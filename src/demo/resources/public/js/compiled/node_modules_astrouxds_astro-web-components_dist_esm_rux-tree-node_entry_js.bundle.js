"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkDemo"] = self["webpackChunkDemo"] || []).push([["node_modules_astrouxds_astro-web-components_dist_esm_rux-tree-node_entry_js"],{

/***/ "./node_modules/@astrouxds/astro-web-components/dist/esm/rux-tree-node.entry.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@astrouxds/astro-web-components/dist/esm/rux-tree-node.entry.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"rux_tree_node\": () => (/* binding */ RuxTreeNode)\n/* harmony export */ });\n/* harmony import */ var _index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-b64764b4.js */ \"./node_modules/@astrouxds/astro-web-components/dist/esm/index-b64764b4.js\");\n\n\nconst ruxTreeNodeCss = \":host{--tree-accent-color:var(--color-background-interactive-default);--tree-hover-background-color:var(--color-background-interactive-hover);--tree-hover-text-color:var(--color-text-inverse);--tree-selected-border-color:var(--color-border-interactive-muted);--tree-selected-accent-color:var(--color-background-interactive-default);--tree-expanded-border-color:var(--color-background-base-default);position:relative;box-sizing:border-box;width:100%;padding:0;margin:0;font-family:var(--font-body-1-font-family);font-size:var(--font-body-1-font-size);font-weight:var(--font-body-1-font-weight);letter-spacing:var(--font-body-1-letter-spacing);color:var(--tree-text-color);user-select:none;display:block}.tree-node{border-top:1px solid var(--color-border-interactive-muted)}.tree-node .parent{border-left:1px solid var(--color-border-interactive-muted);border-right:1px solid var(--color-border-interactive-muted)}.tree-node .children{border-left:none;border-right:none}:host([hidden]){display:none}:host([aria-selected=true]){background-image:var(--tree-node-border-left-selected);background-repeat:no-repeat}:host([aria-selected=true]) .parent::after{content:\\\"\\\";height:30px;width:100%;left:0;z-index:0;position:absolute;transition:background-color 0.0967s ease-in 0s}:host([aria-level=\\\"1\\\"]) .parent{font-weight:bold;padding:0}:host([aria-level=\\\"1\\\"]) .parent::after{content:\\\"\\\";height:31px;width:100%;left:0;z-index:0;position:absolute;transition:background-color 0.0967s ease-in 0s}:host([aria-level=\\\"1\\\"]) .parent .selected{margin-right:-5px}:host([aria-level=\\\"1\\\"]) .tree-node:not(.tree-node--has-children) .parent{padding-left:2rem}:host([aria-level=\\\"2\\\"]) .tree-node:not(.tree-node--has-children) .parent{padding-left:3.5rem}:host([aria-level=\\\"2\\\"]) .selected{margin-right:-10px}:host([aria-level=\\\"3\\\"]) .tree-node:not(.tree-node--has-children) .parent{padding-left:5rem}:host([aria-level=\\\"3\\\"]) .parent{padding-left:3.5rem}:host([aria-level=\\\"4\\\"]) .tree-node:not(.tree-node--has-children) .parent{padding-left:6.5rem}:host([aria-level=\\\"4\\\"]) .parent{padding-left:5rem}.parent{height:2rem;padding:0 0.5rem 0 2rem;display:flex;align-items:center;white-space:nowrap;overflow:hidden}.parent:hover{color:var(--tree-hover-text-color);background:var(--tree-hover-background-color);--tree-accent-color:var(--tree-node-arrow-color-fill-hover)}.children{display:none}.tree-node--expanded>.children{display:block !important}.tree-node--expanded .arrow{transform:rotate(90deg)}.arrow{position:relative;cursor:pointer;width:0.35rem;margin:0 13px;background-color:transparent;transition:transform 0.167s ease-in-out 0s;z-index:11}.arrow::before{content:\\\"\\\";display:block;height:1.5rem;width:1.5rem;top:-0.15rem;left:-0.65rem;position:absolute}.arrow::after{content:\\\"\\\";width:0;height:0;border-style:solid;border-width:0.35rem 0 0.35rem 0.35rem;border-color:transparent transparent transparent var(--tree-accent-color);display:inline-block}::slotted(rux-status){margin:0 0.625rem}::slotted(rux-tree-node){position:relative}::slotted(rux-tree-node)::before{content:\\\"\\\";order:1;position:absolute;top:0;cursor:pointer;width:20px;height:20px;margin-right:1rem;margin-left:0.15rem;left:-40px;background-color:transparent;transition:transform 0.167s ease-in-out 0s;z-index:11}.selected{width:5px;height:100%;background-color:var(--color-interactive-default)}\";\n\nlet id = 0;\nconst RuxTreeNode = class {\n  constructor(hostRef) {\n    (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);\n    this.ruxTreeNodeSelected = (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, \"ruxtreenodeselected\", 7);\n    this.ruxTreeNodeExpanded = (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, \"ruxtreenodeexpanded\", 7);\n    this.ruxTreeNodeCollapsed = (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, \"ruxtreenodecollapsed\", 7);\n    this.componentId = `node-${++id}`;\n    this.children = [];\n    this.addClass = false;\n    /**\n     * Sets the expanded state\n     */\n    this.expanded = false;\n    /**\n     * Sets the selected state\n     */\n    this.selected = false;\n  }\n  handleExpandedChange(newValue) {\n    this.setExpanded(newValue);\n  }\n  handleSelectedChange(newValue) {\n    this.setSelected(newValue);\n  }\n  handleKeyDown(ev) {\n    if (ev.target !== ev.currentTarget) {\n      return true;\n    }\n    switch (ev.key) {\n      case 'ArrowUp':\n        ev.preventDefault();\n        this._focusNext(-1);\n        break;\n      case 'ArrowRight':\n        ev.preventDefault();\n        this._expandNextNode();\n        break;\n      case 'ArrowDown':\n        ev.preventDefault();\n        this._focusNext(1);\n        break;\n      case 'ArrowLeft':\n        ev.preventDefault();\n        this._collapseParent();\n        break;\n      case 'Enter':\n        ev.preventDefault();\n        this.setSelected(true);\n        break;\n    }\n  }\n  handleHover(ev) {\n    if (ev.target === ev.currentTarget) {\n      this.addClass = true;\n    }\n    else\n      this.addClass = false;\n    this._swapToLightStatus();\n  }\n  handleLeave(ev) {\n    if (ev.target === ev.currentTarget) {\n      this.addClass = false;\n    }\n    this._swapToLightStatus();\n  }\n  connectedCallback() {\n    this._handleSlotChange = this._handleSlotChange.bind(this);\n  }\n  componentWillLoad() {\n    this._handleSlotChange();\n  }\n  get _hasChildren() {\n    return this.children.length > 0;\n  }\n  /**\n   * Sets the expanded state\n   * @param value\n   */\n  async setExpanded(value) {\n    this.expanded = value;\n  }\n  /**\n   * Sets the selected state\n   * @param value\n   */\n  async setSelected(value) {\n    this.selected = value;\n    if (value) {\n      this.ruxTreeNodeSelected.emit(this.componentId);\n    }\n  }\n  _handleSlotChange() {\n    const children = Array.from(this.el.querySelectorAll(`[slot=\"node\"]`));\n    this.children = children;\n    this._setAriaLevel();\n  }\n  _swapToLightStatus() {\n    const slottedStatus = this.el.querySelector('rux-status');\n    // have the specifc status slotted to this rux-tree-node\n    if (this.addClass) {\n      slottedStatus === null || slottedStatus === void 0 ? void 0 : slottedStatus.classList.add('light-theme');\n    }\n    else {\n      slottedStatus === null || slottedStatus === void 0 ? void 0 : slottedStatus.classList.remove('light-theme');\n    }\n  }\n  /**\n   * Manually set the aria-level attribute.\n   * Tree is responsible for setting the root node levels.\n   */\n  _setAriaLevel() {\n    const level = this.el.getAttribute('aria-level');\n    if (level) {\n      this.children.map((child) => {\n        child.setAttribute('aria-level', `${+level + 1}`);\n      });\n    }\n  }\n  _handleArrowClick(e) {\n    e.stopPropagation();\n    this.setExpanded(!this.expanded);\n    this.expanded\n      ? this.ruxTreeNodeExpanded.emit(this.componentId)\n      : this.ruxTreeNodeCollapsed.emit(this.componentId);\n  }\n  _handleTreeNodeClick(e) {\n    e.stopPropagation();\n    this.selected = !this.selected;\n  }\n  _expandNextNode() {\n    if (!this.expanded && this._hasChildren) {\n      this.setExpanded(true);\n    }\n  }\n  _focusItem(el) {\n    var _a;\n    const parent = (_a = el === null || el === void 0 ? void 0 : el.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('.parent');\n    if (parent) {\n      parent.focus();\n    }\n  }\n  _collapseParent() {\n    if (this.expanded) {\n      this.setExpanded(false);\n    }\n    else if (this.el.parentElement) {\n      const parentTreeItemNode = this.el.parentElement.closest(\"[role='treeitem']\");\n      if (parentTreeItemNode) {\n        this._focusItem(parentTreeItemNode);\n      }\n    }\n  }\n  _focusNext(direction) {\n    const visibleNodes = this._getVisibleNodes();\n    const currentIndex = visibleNodes.indexOf(this.el);\n    if (currentIndex !== -1) {\n      let nextElement = visibleNodes[currentIndex + direction];\n      if (nextElement !== undefined) {\n        // Skips any disabled nodes\n        while (nextElement.hasAttribute('disabled')) {\n          const offset = direction >= 0 ? 1 : -1;\n          nextElement =\n            visibleNodes[currentIndex + direction + offset];\n          if (nextElement) {\n            break;\n          }\n        }\n      }\n      if (nextElement !== null) {\n        this._focusItem(nextElement);\n      }\n    }\n  }\n  _getVisibleNodes() {\n    const rootTree = this.el.closest(\"[role='tree']\");\n    const nodes = Array.from(rootTree.querySelectorAll('rux-tree-node'));\n    return nodes.filter((node) => node.offsetParent !== null);\n  }\n  render() {\n    const attrs = this._hasChildren && { role: 'group' };\n    return ((0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.H, { role: \"treeitem\", \"aria-expanded\": this.expanded ? 'true' : 'false', \"aria-selected\": this.selected ? 'true' : 'false', onClick: (event) => this._handleTreeNodeClick(event) }, (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { id: this.componentId, class: {\n        'tree-node': true,\n        'tree-node--expanded': this.expanded,\n        'tree-node--has-children': this._hasChildren,\n        'tree-node--selected': this.selected,\n      } }, (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"parent\", tabindex: \"0\", part: \"node\" }, this._hasChildren && ((0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"i\", { part: \"icon\", onClick: (e) => this._handleArrowClick(e), class: \"arrow\" })), (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"slot\", { onSlotchange: this._handleSlotChange })), (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", Object.assign({}, attrs, { class: \"children\" }), (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"slot\", { name: \"node\", onSlotchange: this._handleSlotChange })))));\n  }\n  get el() { return (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }\n  static get watchers() { return {\n    \"expanded\": [\"handleExpandedChange\"],\n    \"selected\": [\"handleSelectedChange\"]\n  }; }\n};\nRuxTreeNode.style = ruxTreeNodeCss;\n\n\n\n\n//# sourceURL=webpack://Demo/./node_modules/@astrouxds/astro-web-components/dist/esm/rux-tree-node.entry.js?");

/***/ })

}]);