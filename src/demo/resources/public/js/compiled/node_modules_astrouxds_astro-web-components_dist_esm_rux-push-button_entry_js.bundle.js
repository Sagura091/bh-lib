"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkDemo"] = self["webpackChunkDemo"] || []).push([["node_modules_astrouxds_astro-web-components_dist_esm_rux-push-button_entry_js"],{

/***/ "./node_modules/@astrouxds/astro-web-components/dist/esm/rux-push-button.entry.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@astrouxds/astro-web-components/dist/esm/rux-push-button.entry.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"rux_push_button\": () => (/* binding */ RuxPushButton)\n/* harmony export */ });\n/* harmony import */ var _index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-b64764b4.js */ \"./node_modules/@astrouxds/astro-web-components/dist/esm/index-b64764b4.js\");\n/* harmony import */ var _utils_73490106_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils-73490106.js */ \"./node_modules/@astrouxds/astro-web-components/dist/esm/utils-73490106.js\");\n\n\n\nconst ruxPushButtonCss = \":host{cursor:pointer;display:block;--pushbutton-background-color:none;--pushbutton-border-color:var(--color-border-interactive-default);--pushbutton-text-color:var(--color-text-interactive-default);--pushbutton-selected-background-color:var(--color-palette-green-500);--pushbutton-selected-border-color:var(--color-palette-green-500);--pushbutton-selected-text-color:var(--color-text-default);--pushbutton-selected-hover-text-color:var(--color-text-default);margin:0 2px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}:host[disabled]{opacity:var(--disabled-opacity);cursor:not-allowed}:host input{appearance:none;-webkit-appearance:none}:host .rux-push-button__button{font-family:var(--font-body-1-font-family);font-size:var(--font-body-1-font-size);font-weight:var(--font-body-1-font-weight);letter-spacing:var(--font-body-1-letter-spacing);display:flex;justify-content:center;align-items:center;height:1.375rem;margin:-27px 0 0 0;color:var(--pushbutton-text-color);background-color:var(--pushbutton-background-color);border-radius:var(--radius-base);border:1px solid var(--pushbutton-border-color);padding:0.469rem 1rem}:host .rux-push-button__button:hover{cursor:pointer;color:var(--color-background-interactive-hover);border-color:var(--color-background-interactive-hover)}:host .rux-push-button__button:hover rux-icon{color:var(--pushbutton-selected-hover-text-color)}:host .rux-push-button__button--small{padding:0.219rem 1rem}:host .rux-push-button__button--large{padding:0.844rem 1rem}:host .rux-push-button__button rux-icon{height:1rem;width:1rem;margin-right:0.625rem}:host .rux-push-button__button--icon-only{font-size:0 !important}:host .rux-push-button__button--icon-only rux-icon{margin-right:0}:host .rux-push-button__input:checked+.rux-push-button__button{display:flex;color:var(--pushbutton-selected-text-color);background-color:var(--pushbutton-selected-background-color);border-color:var(--pushbutton-selected-border-color)}:host .rux-push-button__input:checked+.rux-push-button__button rux-icon{color:var(--pushbutton-selected-text-color)}:host .rux-push-button__input:checked+.rux-push-button__button:hover{background-color:var(--color-palette-green-400)}:host .rux-push-button__input:checked:disabled+.rux-push-button__button:hover{color:var(--pushbutton-selected-text-color);background-color:var(--pushbutton-selected-background-color);border-color:var(--pushbutton-selected-border-color)}:host .rux-push-button__input:checked:disabled+.rux-push-button__button:hover rux-icon{color:var(--pushbutton-selected-text-color)}:host .rux-push-button__input:disabled+.rux-push-button__button{opacity:var(--disabled-opacity);cursor:not-allowed}:host .rux-push-button__input:disabled+.rux-push-button__button:hover{border-color:var(--pushbutton-border-color);color:var(--pushbutton-text-color)}:host .rux-push-button__input:disabled+.rux-push-button__button:hover rux-icon{color:var(--pushbutton-text-color)}:host([hidden]){display:none}\";\n\nconst RuxPushButton = class {\n  constructor(hostRef) {\n    (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);\n    this.ruxChange = (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, \"ruxchange\", 7);\n    this.ruxBlur = (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, \"ruxblur\", 7);\n    this.pushButtonId = `rux-push-button-${id++}`;\n    /**\n     * Hides slotted text from the button by setting rux-button--icon-only class\n     */\n    this.iconOnly = false;\n    /**\n     * Disables the push button via HTML `disabled` attribute.\n     * Button takes on a distinct disabled visual state.\n     * Cursor uses the `not-allowed` system replacement and all keyboard and mouse events are ignored.\n     */\n    this.disabled = false;\n    /**\n     * Checks the push button via HTML `checked` attribute.\n     * Push button takes on a distinct \"enabled\" or \"selected\" visual state.\n     */\n    this.checked = false;\n    /**\n     * The label of the push button.\n     */\n    this.label = 'Push Button';\n    /**\n     * The name of the push button.\n     */\n    this.name = '';\n    /**\n     * The value of the push button.\n     */\n    this.value = '';\n    this._onBlur = () => {\n      this.ruxBlur.emit();\n    };\n  }\n  componentWillLoad() {\n    this._onChange = this._onChange.bind(this);\n  }\n  _onChange(e) {\n    const target = e.target;\n    this.checked = target.checked;\n    this.ruxChange.emit(this.checked);\n  }\n  render() {\n    const { disabled, checked, label, size, _onChange, value, _onBlur, icon, iconOnly, } = this;\n    (0,_utils_73490106_js__WEBPACK_IMPORTED_MODULE_1__.r)(true, this.el, this.name, this.value ? this.value : 'on', this.disabled, this.checked);\n    return ((0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.H, { \"aria-checked\": `${checked}`, \"aria-hidden\": disabled ? 'true' : null, role: \"switch\" }, (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"input\", { class: \"rux-push-button__input\", id: this.pushButtonId, type: \"checkbox\", disabled: disabled, checked: checked, onChange: _onChange, onBlur: _onBlur, value: value }), (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"label\", { class: {\n        'rux-push-button__button': true,\n        'rux-push-button__button--small': size === 'small',\n        'rux-push-button__button--large': size === 'large',\n        'rux-push-button__button--icon-only': iconOnly,\n      }, htmlFor: this.pushButtonId, part: \"label\" }, icon ? ((0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"rux-icon\", { size: \"extra-small\", exportparts: \"icon\", icon: icon })) : null, label), (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"slot\", null)));\n  }\n  get el() { return (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }\n};\nlet id = 0;\nRuxPushButton.style = ruxPushButtonCss;\n\n\n\n\n//# sourceURL=webpack://Demo/./node_modules/@astrouxds/astro-web-components/dist/esm/rux-push-button.entry.js?");

/***/ }),

/***/ "./node_modules/@astrouxds/astro-web-components/dist/esm/utils-73490106.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@astrouxds/astro-web-components/dist/esm/utils-73490106.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"a\": () => (/* binding */ renderHiddenSelect),\n/* harmony export */   \"b\": () => (/* binding */ hasShadowDom),\n/* harmony export */   \"h\": () => (/* binding */ hasSlot),\n/* harmony export */   \"r\": () => (/* binding */ renderHiddenInput)\n/* harmony export */ });\nconst hasShadowDom = (el) => {\n  return !!el.shadowRoot && !!el.attachShadow;\n};\nfunction hasSlot(el, name) {\n  // Look for a named slot\n  if (name) {\n    return el.querySelector(`[slot=\"${name}\"]`) !== null;\n  }\n  // Look for a default slot\n  return [...el.childNodes].some((node) => {\n    var _a;\n    //If node is text and not an empty string return true\n    if (node.nodeType === node.TEXT_NODE &&\n      ((_a = node === null || node === void 0 ? void 0 : node.textContent) === null || _a === void 0 ? void 0 : _a.trim()) !== '') {\n      return true;\n    }\n    //If node is an element with a slot attribute return true\n    if (node.nodeType === node.ELEMENT_NODE) {\n      const el = node;\n      if (!el.hasAttribute('slot') &&\n        /*\n         * This condition is specifically for checkbox because\n         * the hidden input becomes slotted content\n         */\n        el.getAttribute('type') !== 'hidden') {\n        return true;\n      }\n    }\n    return false;\n  });\n}\n/**\n* This method is used to add a hidden input to a host element that contains\n* a Shadow DOM. It does not add the input inside of the Shadow root which\n* allows it to be picked up inside of forms. It should contain the same\n* values as the host element.\n* https://github.com/ionic-team/ionic-framework/blob/ae96563fb3c4612cb8585292b389ee746f5759f7/core/src/utils/helpers.ts#L198\n\n*\n* @param always Add a hidden input even if the container does not use Shadow\n* @param container The element where the input will be added\n* @param name The name of the input\n* @param value The value of the input\n* @param disabled If true, the input is disabled\n* @param checked Optional. If true, the input is checked\n*/\nconst renderHiddenInput = (always, container, name, value, disabled, checked) => {\n  let input = container.querySelector('input.aux-input');\n  if (always || hasShadowDom(container)) {\n    if (checked || checked == undefined) {\n      if (!input) {\n        input = container.ownerDocument.createElement('input');\n        input.type = 'hidden';\n        input.classList.add('aux-input');\n        container.appendChild(input);\n      }\n      input.disabled = disabled;\n      input.name = name;\n      input.value = value || '';\n    }\n    else {\n      if (input) {\n        input.remove();\n      }\n    }\n  }\n};\n/**\n * Renders multiple hidden inputs from an array of values\n * Used in multiselect\n * @param always\n * @param container\n * @param name\n * @param value\n * @param disabled\n */\nconst renderHiddenSelect = (always, container, name, value, disabled) => {\n  // Clear any existing hidden options. May be more performant to edit their values instead though.\n  let inputs = container.querySelectorAll('input.aux-select');\n  if (inputs) {\n    for (const elem of inputs) {\n      elem.remove();\n    }\n  }\n  if (always || hasShadowDom(container)) {\n    if (Array.isArray(value)) {\n      for (const el in value) {\n        let input = container.ownerDocument.createElement('input');\n        input.type = 'hidden';\n        input.classList.add('aux-select');\n        input.classList.add(`aux-select-${el}`);\n        input.disabled = disabled;\n        input.name = name;\n        if (value[el]) {\n          input.value = value[el];\n        }\n        container.appendChild(input);\n      }\n    }\n    else {\n      let input = container.ownerDocument.createElement('input');\n      input.type = 'hidden';\n      input.classList.add('aux-select');\n      input.classList.add(`aux-select-0`);\n      input.disabled = disabled;\n      input.name = name;\n      if (value) {\n        input.value = value;\n      }\n      container.appendChild(input);\n    }\n  }\n};\n\n\n\n\n//# sourceURL=webpack://Demo/./node_modules/@astrouxds/astro-web-components/dist/esm/utils-73490106.js?");

/***/ })

}]);