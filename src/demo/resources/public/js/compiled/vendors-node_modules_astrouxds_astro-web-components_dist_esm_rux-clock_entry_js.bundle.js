"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkDemo"] = self["webpackChunkDemo"] || []).push([["vendors-node_modules_astrouxds_astro-web-components_dist_esm_rux-clock_entry_js"],{

/***/ "./node_modules/@astrouxds/astro-web-components/dist/esm/index-33004084.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@astrouxds/astro-web-components/dist/esm/index-33004084.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"r\": () => (/* binding */ requiredArgs),\n/* harmony export */   \"t\": () => (/* binding */ toDate)\n/* harmony export */ });\nfunction requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nfunction toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}\n\n\n\n\n//# sourceURL=webpack://Demo/./node_modules/@astrouxds/astro-web-components/dist/esm/index-33004084.js?");

/***/ }),

/***/ "./node_modules/@astrouxds/astro-web-components/dist/esm/index-8434b33d.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@astrouxds/astro-web-components/dist/esm/index-8434b33d.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"d\": () => (/* binding */ differenceInCalendarDays),\n/* harmony export */   \"g\": () => (/* binding */ getTimezoneOffsetInMilliseconds)\n/* harmony export */ });\n/* harmony import */ var _index_33004084_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-33004084.js */ \"./node_modules/@astrouxds/astro-web-components/dist/esm/index-33004084.js\");\n\n\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nfunction getTimezoneOffsetInMilliseconds(date) {\n  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n  utcDate.setUTCFullYear(date.getFullYear());\n  return date.getTime() - utcDate.getTime();\n}\n\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\n\nfunction startOfDay(dirtyDate) {\n  (0,_index_33004084_js__WEBPACK_IMPORTED_MODULE_0__.r)(1, arguments);\n  var date = (0,_index_33004084_js__WEBPACK_IMPORTED_MODULE_0__.t)(dirtyDate);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}\n\nvar MILLISECONDS_IN_DAY = 86400000;\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar days\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\n\nfunction differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {\n  (0,_index_33004084_js__WEBPACK_IMPORTED_MODULE_0__.r)(2, arguments);\n  var startOfDayLeft = startOfDay(dirtyDateLeft);\n  var startOfDayRight = startOfDay(dirtyDateRight);\n  var timestampLeft = startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);\n  var timestampRight = startOfDayRight.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a day is not constant\n  // (e.g. it's different in the day of the daylight saving time clock shift)\n\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);\n}\n\n\n\n\n//# sourceURL=webpack://Demo/./node_modules/@astrouxds/astro-web-components/dist/esm/index-8434b33d.js?");

/***/ }),

/***/ "./node_modules/@astrouxds/astro-web-components/dist/esm/rux-clock.entry.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@astrouxds/astro-web-components/dist/esm/rux-clock.entry.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"rux_clock\": () => (/* binding */ RuxClock)\n/* harmony export */ });\n/* harmony import */ var _index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-b64764b4.js */ \"./node_modules/@astrouxds/astro-web-components/dist/esm/index-b64764b4.js\");\n/* harmony import */ var _index_1766f547_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-1766f547.js */ \"./node_modules/@astrouxds/astro-web-components/dist/esm/index-1766f547.js\");\n/* harmony import */ var _index_33004084_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-33004084.js */ \"./node_modules/@astrouxds/astro-web-components/dist/esm/index-33004084.js\");\n/* harmony import */ var _index_8434b33d_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./index-8434b33d.js */ \"./node_modules/@astrouxds/astro-web-components/dist/esm/index-8434b33d.js\");\n\n\n\n\n\n/**\n * @name startOfYear\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\n\nfunction startOfYear(dirtyDate) {\n  (0,_index_33004084_js__WEBPACK_IMPORTED_MODULE_2__.r)(1, arguments);\n  var cleanDate = (0,_index_33004084_js__WEBPACK_IMPORTED_MODULE_2__.t)(dirtyDate);\n  var date = new Date(0);\n  date.setFullYear(cleanDate.getFullYear(), 0, 1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}\n\n/**\n * @name getDayOfYear\n * @category Day Helpers\n * @summary Get the day of the year of the given date.\n *\n * @description\n * Get the day of the year of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the day of year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which day of the year is 2 July 2014?\n * const result = getDayOfYear(new Date(2014, 6, 2))\n * //=> 183\n */\n\nfunction getDayOfYear(dirtyDate) {\n  (0,_index_33004084_js__WEBPACK_IMPORTED_MODULE_2__.r)(1, arguments);\n  var date = (0,_index_33004084_js__WEBPACK_IMPORTED_MODULE_2__.t)(dirtyDate);\n  var diff = (0,_index_8434b33d_js__WEBPACK_IMPORTED_MODULE_3__.d)(date, startOfYear(date));\n  var dayOfYear = diff + 1;\n  return dayOfYear;\n}\n\nconst militaryTimezones = {\n  A: '+01:00',\n  B: '+02:00',\n  C: '+03:00',\n  D: '+04:00',\n  E: '+05:00',\n  F: '+06:00',\n  G: '+07:00',\n  H: '+08:00',\n  I: '+09:00',\n  K: '+10:00',\n  L: '+11:00',\n  M: '+12:00',\n  N: '-01:00',\n  O: '-02:00',\n  P: '-03:00',\n  Q: '-04:00',\n  R: '-05:00',\n  S: '-06:00',\n  T: '-07:00',\n  U: '-08:00',\n  V: '-09:00',\n  W: '-10:00',\n  X: '-11:00',\n  Y: '-12:00',\n  Z: '+00:00',\n};\n\nconst ruxClockCss = \":host{--clock-text-color:var(--color-palette-neutral-000);--clock-background-color:var(--color-palette-brightblue-900);--clock-border-color:var(--gsb-color-background);--clock-label-color:var(--color-palette-neutral-000);display:flex;margin:0 1rem;color:var(--clock-text-color);-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;height:3.938rem}:host([hidden]){display:none}.rux-clock__segment{display:flex;flex-direction:column;align-items:center}.rux-clock__segment__value{display:flex;align-items:center;font-family:var(--font-monospace-1-font-family);font-weight:var(--font-monospace-1-font-weight);font-size:var(--font-monospace-1-font-size);letter-spacing:var(--font-monospace-1-letter-spacing);border:1px solid var(--clock-border-color);background-color:var(--clock-background-color);white-space:nowrap;overflow-y:hidden;text-overflow:ellipsis;height:2.75rem;padding:0 0.75rem}:host([small]) .rux-clock__segment__value{height:2.75rem;padding:0 0.75rem;font-size:1.15rem;font-weight:500}.rux-clock__segment__label{font-family:var(--font-body-2-font-family);font-size:var(--font-body-2-font-size);font-weight:var(--font-body-2-font-weight);letter-spacing:var(--font-body-2-letter-spacing);color:var(--clock-label-color);background:var(--gsb-color-background);padding:0.094rem 0.625rem;width:-moz-available;width:-webkit-fill-available;width:fill-available;text-align:center}.rux-clock__aos{margin-left:1.063em}\";\n\nconst RuxClock = class {\n  constructor(hostRef) {\n    (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);\n    this._timezone = 'UTC';\n    this.tzFormat = 'z';\n    this.hasRun = false;\n    /**\n     * Accepts the [IANA timezone string format](https://www.iana.org/time-zones) such as `'America/Los_Angeles'` or any single-character designation for a [military timezones](https://en.wikipedia.org/wiki/List_of_military_time_zones) (`'A'` through `'Z'`, excluding `'J'`), both case-insensitive. If no value for timezone is provided, the clock will use `'UTC'`. See [`toLocaleString()` on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString#Parameters) for more details.\n     */\n    this.timezone = 'UTC';\n    /**\n     * Hides the timezone in the main 24-hour clock. Timezone does not display on AOS/LOS.\n     */\n    this.hideTimezone = false;\n    /**\n     * Hides the day of the year.\n     */\n    this.hideDate = false;\n    /**\n     * Hides all of the labels.\n     */\n    this.hideLabels = false;\n    /**\n     * Applies a smaller clock style.\n     */\n    this.small = false;\n  }\n  updateAos(newValue) {\n    this.convertedAos = this._formatLosAosDateIn(newValue);\n  }\n  updateLos(newValue) {\n    this.convertedLos = this._formatLosAosDateIn(newValue);\n  }\n  handleDateInChange() {\n    clearTimeout(this._timer);\n    this._rawTime = new Date(this.dateIn);\n    this._handleDateIn();\n    this._updateTime();\n  }\n  timezoneChanged() {\n    this._convertTimezone(this.timezone);\n    if (this.aos)\n      this.convertedAos = this._formatLosAosDateIn(this.aos);\n    if (this.los)\n      this.convertedLos = this._formatLosAosDateIn(this.los);\n    this._updateTime();\n  }\n  get time() {\n    return this._time;\n  }\n  connectedCallback() {\n    this._convertTimezone(this.timezone);\n    if (this.dateIn) {\n      this._handleDateIn();\n    }\n    else {\n      this._timer = window.setInterval(() => {\n        this._updateTime();\n      }, 1000);\n    }\n    if (this.aos)\n      this.convertedAos = this._formatLosAosDateIn(this.aos);\n    if (this.los)\n      this.convertedLos = this._formatLosAosDateIn(this.los);\n  }\n  disconnectedCallback() {\n    clearTimeout(this._timer);\n  }\n  componentWillLoad() {\n    this._timezone = this.timezone;\n    this._convertTimezone(this.timezone);\n    this._updateTime();\n  }\n  _formatTime(time, timezone) {\n    return (0,_index_1766f547_js__WEBPACK_IMPORTED_MODULE_1__.f)((0,_index_1766f547_js__WEBPACK_IMPORTED_MODULE_1__.u)(time, timezone), `HH:mm:ss ${this.hideTimezone ? '' : this.tzFormat}`, { timeZone: timezone });\n  }\n  _handleDateIn() {\n    this._formatLosAosDateIn(this.dateIn);\n    this._time = this.dateIn;\n    if (!this._rawTime)\n      this._rawTime = new Date(this.dateIn);\n    if (this._validateDateIn(this._rawTime)) {\n      this._timer = window.setInterval(() => {\n        this._updateTime();\n      }, 1000);\n    }\n    else {\n      console.warn(`The date-in value of ${this.dateIn} is not a valid date.`);\n    }\n  }\n  /**\n   * @param date a Date type to be validated\n   * @returns A boolean representative of if the date provided is valid\n   */\n  _validateDateIn(date) {\n    //If it's not valid then date.getTime() will be NaN, which isn't equal to itself\n    return date.getTime() === date.getTime();\n  }\n  _updateTime() {\n    if (this.dateIn) {\n      if (!this.hasRun) {\n        this._time = this._formatTime(this._rawTime, this._timezone);\n        const clockDate = (0,_index_1766f547_js__WEBPACK_IMPORTED_MODULE_1__.u)(this._rawTime, this._timezone);\n        this.dayOfYear = getDayOfYear(clockDate);\n        this.hasRun = true;\n      }\n      else {\n        let seconds = this._rawTime.getSeconds() + 1;\n        this._rawTime.setSeconds(seconds);\n        this._time = this._formatTime(this._rawTime, this._timezone);\n        const clockDate = (0,_index_1766f547_js__WEBPACK_IMPORTED_MODULE_1__.u)(this._rawTime, this._timezone);\n        this.dayOfYear = getDayOfYear(clockDate);\n      }\n    }\n    else {\n      this._time = this._formatTime(new Date(Date.now()), this._timezone);\n      /**\n       * Date.now() is a unix timestamp of the current time in UTC\n       * We need to convert that to the Clock's defined timezone\n       * before we get the day of the year.\n       */\n      const localDate = new Date(Date.now());\n      const clockDate = (0,_index_1766f547_js__WEBPACK_IMPORTED_MODULE_1__.u)(localDate, this._timezone);\n      this.dayOfYear = getDayOfYear(clockDate);\n    }\n  }\n  /**\n   * @param dateTime A date string in unix or ISO formats\n   * @returns A timezone local ISO formatted 24h time string\n   */\n  _formatLosAosDateIn(dateTime) {\n    // Check for unix timestamp\n    if (new Date(Number(dateTime)).getTime() > 0) {\n      dateTime = Number(dateTime);\n      // If date-in is provided and matches the conversion made if it's a unix stamp, then\n      // we need to handle it as a unix stamp.\n      if (this.dateIn && parseInt(this.dateIn) === dateTime) {\n        let d = new Date(dateTime);\n        this._rawTime = d;\n      }\n    }\n    return (0,_index_1766f547_js__WEBPACK_IMPORTED_MODULE_1__.f)((0,_index_1766f547_js__WEBPACK_IMPORTED_MODULE_1__.u)(dateTime, this._timezone), 'HH:mm:ss');\n  }\n  _convertTimezone(timezone) {\n    const _militaryTimezones = militaryTimezones;\n    this._timezone = _militaryTimezones[timezone.toUpperCase()];\n    this.tzFormat = 'O';\n    if (!this._timezone) {\n      this._timezone = timezone;\n      this.tzFormat = 'zzz';\n    }\n    else if (timezone.toUpperCase() == 'Z') {\n      this.tzFormat = 'X';\n    }\n  }\n  render() {\n    return ((0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.H, null, !this.hideDate && ((0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"rux-clock__segment\" }, (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"rux-clock__segment__value\", \"aria-labelledby\": \"rux-clock__day-of-year-label\", part: \"date\" }, this.dayOfYear.toString().padStart(3, '0')), !this.hideLabels && ((0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"rux-clock__segment__label\", id: \"rux-clock__day-of-year-label\", part: \"date-label\" }, \"Date\")))), (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"rux-clock__segment\" }, (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"rux-clock__segment__value\", \"aria-labelledby\": \"rux-clock__time-label\", part: \"time\" }, this.time), !this.hideLabels && ((0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"rux-clock__segment__label\", id: \"rux-clock__time-label\", part: \"time-label\" }, \"Time\"))), this.aos && ((0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"rux-clock__segment rux-clock__aos\" }, (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"rux-clock__segment__value\", \"aria-labelledby\": \"rux-clock__time-label--aos\", id: \"rux-clock__time--aos\", part: \"aos\" }, this.convertedAos), !this.hideLabels && ((0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"rux-clock__segment__label\", id: \"rux-clock__time-label--aos\", part: \"aos-label\" }, \"AOS\")))), this.los && ((0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"rux-clock__segment rux-clock__los\" }, (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"rux-clock__segment__value\", \"aria-labelledby\": \"rux-clock__time-label--los\", id: \"rux-clock__time--los\", part: \"los\" }, this.convertedLos), !this.hideLabels && ((0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"rux-clock__segment__label\", id: \"rux-clock__time-label--los\", part: \"los-label\" }, \"LOS\"))))));\n  }\n  static get watchers() { return {\n    \"aos\": [\"updateAos\"],\n    \"los\": [\"updateLos\"],\n    \"dateIn\": [\"handleDateInChange\"],\n    \"timezone\": [\"timezoneChanged\"]\n  }; }\n};\nRuxClock.style = ruxClockCss;\n\n\n\n\n//# sourceURL=webpack://Demo/./node_modules/@astrouxds/astro-web-components/dist/esm/rux-clock.entry.js?");

/***/ })

}]);