{"version":3,"sources":["ui_component/molecule/composite/util/ui.cljs"],"mappings":"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","names":["taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","ui-component.molecule.composite.util.ui/handle-style","ui-component.molecule.composite.util.ui/default-node-style","ui-component.molecule.composite.util.ui/node-style","ui-component.molecule.composite.util.ui/input-output-handles","label","inputs","outputs","cljs.core.doall","cljs.core.map_indexed","p__59100","vec__59101","cljs.core.nth","idx","target","ports","vec__59104","source-port","target-port","js/shadow.js.shim.module$react_flow_renderer.Handle","cljs.core.merge","cljs.core.into","p__59107","vec__59108","vec__59111","ui-component.molecule.composite.util.ui/open-details","open-details?","node","cljs.core/reset!","cljs.core.js__GT_clj","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","ui-component.molecule.composite.util.ui/custom-node","seq59114","G__59115","cljs.core/first","cljs.core/next","G__59116","G__59117","self__4851__auto__","node-type","d","extras?","data","cljs.core.get_in","style","reagent.core.as_element","ui-component.molecule.composite.util.ui/create-flow-node","configuration","node-id","cljs.core.map","p__59118","vec__59119","k","v","vec__59122","sp","tp","p__59125","vec__59126","vec__59129","p__59132","vec__59133","ui-component.molecule.composite.util.ui/create-flow-edge","target-id","edge","vec__59136","source-handle","target-handle","ui-component.molecule.composite.util.ui/compute-edges","cljs.core.mapcat","p__59139","vec__59140","entity","links","p__59143","vec__59144","targets","p__59147","vec__59148","ui-component.molecule.composite.util.ui/make-flow","flow","p1__59151#","ui_component.atom.diagram.diagram.dagre_support.build_layout","ui-component.molecule.composite.util.ui/prep-environment","component-id","registry","ui-component.molecule.composite.util.signals/process-components","ui-component.utils.locals/create-container-sub","ui-component.utils.locals/create-container-local-sub"],"sourcesContent":["(ns ui-component.molecule.composite.util.ui\n  (:require [ui-component.atom.diagram.diagram.dagre-support :as dagre]\n            [ui-component.molecule.composite.util.signals :as sig]\n            [ui-component.utils.locals :as ul]\n            [reagent.core :as r]\n            [day8.re-frame.tracing :refer-macros [fn-traced]]\n            [taoensso.timbre :as log]\n            [\"react-flow-renderer\" :refer (ReactFlowProvider Controls Handle Background) :default ReactFlow]))\n\n\n(log/info \"ui-component.molecule.composite.util.ui\")\n\n\n(def handle-style {:width \"8px\" :height \"8px\" :borderRadius \"50%\"})\n(def default-node-style {:padding      \"3px\" :max-width \"180px\"\n                         :borderRadius \"5px\" :margin :auto\n                         :background   :white :color :black})\n(def node-style {:ui/component  {:background :green :color :white}\n                 :source/remote {:background :orange :color :black}\n                 :source/local  {:background :blue :color :white}\n                 :source/fn     {:background :pink :color :black}})\n\n\n(defn input-output-handles\n  \"\n\n  NOTE: the inputs (values in the hash-map) are STRINGS!\n  \"\n\n  [label inputs outputs]\n  [:<>\n   ; add the input handles\n   (doall\n     (->> inputs\n       (map-indexed (fn [idx [target ports]]\n                      (let [[source-port target-port] ports]\n                        ;(log/info \"input-handle\" label \"/\" target-port \"///\" target \"/\" source-port)\n                        [:> Handle {:id    target-port :type \"target\" :position \"top\"\n                                    :style (merge handle-style {:left (+ 20 (* 10 idx))})}])))\n       (into [:<>])))\n\n   ; add the output handles\n   (doall\n     (->> outputs\n       (map-indexed (fn [idx [target ports]]\n                      (let [[source-port target-port] ports]\n                        ;(log/info \"output-handle\" label \"/\" source-port \"///\" target \"/\" target-port)\n                        [:> Handle {:id    source-port :type \"source\" :position \"bottom\"\n                                    :style (merge handle-style {:left (+ 20 (* 10 idx))})}])))\n       (into [:<>])))])\n\n\n(defn- open-details [open-details? node]\n  (reset! open-details? (js->clj node)))\n  ;(log/info \"open-details\" @open-details?))\n\n\n(defn custom-node\n  \"build a custom node for the flow diagram, this time for :ui/component, so\n  green, since this is a 'view', and one Handle for each input (along the top)\n  and output (along the bottom)\n  \"\n  [node-type open-details? d & extras?]\n  (let [data    (js->clj d)\n        label   (get-in data [\"data\" \"label\"])\n        inputs  (get-in data [\"data\" \"inputs\"])\n        outputs (get-in data [\"data\" \"outputs\"])\n        style   (merge default-node-style (node-type node-style))]\n\n    ;(log/info \"custom-node\" label data \"///\" inputs \"///\" outputs \"//\" extras?)\n\n    (r/as-element\n      [:div {:style style :on-click #(open-details open-details? d)}\n       [:h5 {:style (merge {:textAlign :center} style)} label]\n       (input-output-handles label inputs outputs)])))\n\n\n(defn create-flow-node\n  \"convert the nodes, currently organized by Loom (https://github.com/aysylu/loom), into\n  the format needed by react-flow (https://reactflow.dev)\n  \"\n  [configuration node-id]\n  (let [node-type (get-in configuration [:components node-id :type])]\n    ;(log/info \"node\" node-id node-type)\n    {:id       (str node-id)\n     :type     (str node-type)\n     :data     {:label   (str node-id)\n                :node-type (str node-type)\n                :inputs  (->>\n                           (get-in configuration [:denorm node-id :inputs])\n                           (map (fn [[k v]]\n                                  (let [[sp tp] v]\n                                    {(str k) [(str sp) (str tp)]})))\n                           (into {}))\n                :outputs (->>\n                           (get-in configuration [:denorm node-id :outputs])\n                           (map (fn [[k v]]\n                                  (let [[sp tp] v]\n                                    {(str k) [(str sp) (str tp)]})))\n                           (into {}))}\n     :position {:x 0 :y 0}}))\n\n\n(defn create-flow-edge\n  \"convert the edges, currently organized by Loom (https://github.com/aysylu/loom), into\n  the format needed by react-flow (https://reactflow.dev)\n  \"\n  [configuration idx [node-id target-id :as edge]]\n  (let [[source-handle target-handle] (get-in configuration [:denorm node-id :outputs target-id])]\n\n    ;(log/info \"flow-edge\" idx \"/\" node-id \"/\" source-handle \"///\" target-id \"/\" target-handle)\n\n    {:id            (str idx)\n     :source        (str node-id)\n     :sourceHandle  (str source-handle)\n     :target        (str target-id)\n     :targetHandle  (str target-handle)\n     :label         (str source-handle \"->\" target-handle)\n     :style         {:strokeWidth 1 :stroke :black}\n     :arrowHeadType \"arrowclosed\"\n     :animated      false}))\n\n\n(defn compute-edges\n  \"pull out just the relevant information from the configuration, so it can be passed into Loom and\n  the interconnected digraph can be built\n  \"\n  [configuration]\n  (->> configuration\n    :links\n    (mapcat (fn [[entity links]]\n              (mapcat (fn [[source-port targets]]\n                        (map (fn [[target target-port]]\n                               [entity target])\n                          targets))\n                links)))\n    (into [])))\n\n\n(defn make-flow\n  \"take the Loom graph and turn it into what react-flow needs to draw it onto the display\n  \"\n  [configuration]\n  (let [flow {:nodes (map #(create-flow-node configuration %) (:nodes configuration))\n              :edges (map-indexed (fn [idx node]\n                                    (create-flow-edge configuration idx node))\n                       (:edges configuration))}]\n    (dagre/build-layout flow)))\n\n\n(defn prep-environment [configuration component-id registry]\n  ; 1. remote subscriptions (including the remote call)\n  ;\n  ; [SIDE EFFECT]\n  (sig/process-components configuration :source/remote registry component-id)\n\n  ; 2. build the subscription for the \"container\" which provide the basis for the\n  ;     subscriptions for the \"locals\"\n  ;\n  ; [SIDE EFFECT]\n  (ul/create-container-sub component-id)\n  (ul/create-container-local-sub component-id [:blackboard] {})\n\n  ; 3. add blackboard data to the app-db and build local subscriptions/events against the blackboard\n  ;\n  ; [SIDE EFFECT]\n  (sig/process-components configuration :source/local registry component-id)\n\n  ; 4. local functions (to build subscriptions against the blackboard or remotes)\n  ;\n  ; [SIDE EFFECT]\n  (sig/process-components configuration :source/fn registry component-id))\n\n"]}