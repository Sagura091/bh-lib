{"version":3,"sources":["rccst_ui_component/atom/example/re_com/plain_table.cljs"],"mappings":"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","names":["rccst-ui-component.atom.example.re-com.plain-table/sample-data","js/rccst-ui-component","js/rccst-ui-component.atom","js/rccst-ui-component.atom.example","js/rccst-ui-component.atom.example.re-com","js/rccst-ui-component.atom.example.re-com.plain-table","js/rccst-ui-component.atom.example.re-com.plain-table.data","rccst-ui-component.atom.example.re-com.plain-table/data","reagent.core.atom","p__59303","p__59304","map__59305","cljs.core/--destructure-map","cljs.core.get","map__59306","rccst-ui-component.atom.example.re-com.plain-table/cell-styling-fn","amt","uv","pv","row","id","column","cljs.core._EQ_","rccst-ui-component.atom.example.re-com.plain-table/table-column-headers","data","rows","width","height","d","cljs.core.apply","cljs.core/set","cljs.core.map","cljs.core/keys","col-count","cljs.core/count","col-width","x__4336__auto__","y__4337__auto__","or__4253__auto__","row-height","k","cljs.core/name","cljs.core.into","rccst-ui-component.atom.example.re-com.plain-table/show","re-com.core/h-box","js/goog.DEBUG","cljs.core/deref","rccst-ui-component.atom.example.re-com.plain-table/data-tools","re-com.core/button","cljs.core/reset!","cljs.core.assoc","cljs.core.swap_BANG_","cljs.core/assoc-in","cljs.core/assoc","cljs.core.conj","cljs.core.drop_last","x","cljs.core/rand-int","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","rccst-ui-component.atom.example.re-com.plain-table/data-update-example","p__59335","map__59336","seq59334","self__4852__auto__","cljs.core/seq","container-id","component-id","params","re-com.core/v-box","re-com.core/simple-v-table","rccst-ui-component.atom.example.re-com.plain-table/example","woolybear.ad.demo.src.catalog.utils.demo","woolybear.ad.layout/centered"],"sourcesContent":["(ns rccst-ui-component.atom.example.re-com.plain-table\n  (:require [reagent.core :as r]\n            [re-com.core :as rc]\n            [taoensso.timbre :as log]\n            [woolybear.ad.demo.src.catalog.utils :as acu]\n            [woolybear.ad.layout :as layout]))\n\n\n(def sample-data {:metadata {:type   :tabular\n                             :id     :name\n                             :title  \"Tabular Data with Metadata\"\n                             :fields {:name :string :uv :number :pv :number :kp :number :amt :number}}\n                  :data [{:name \"Page A\" :kp 2000 :uv 4000 :pv 2400 :amt 2400}\n                         {:name \"Page B\" :kp 2000 :uv 3000 :pv 5598 :amt 2210}\n                         {:name \"Page C\" :kp 2000 :uv 2000 :pv 9800 :amt 2290}\n                         {:name \"Page D\" :kp 2000 :uv 2780 :pv 3908 :amt 2000}\n                         {:name \"Page E\" :kp 2000 :uv 1890 :pv 4800 :amt 2181}\n                         {:name \"Page F\" :kp 2000 :uv 2390 :pv 3800 :amt 2500}\n                         {:name \"Page G\" :kp 2000 :uv 3490 :pv 4300 :amt 2100}]})\n(defonce data (r/atom sample-data))\n\n\n(defn cell-styling-fn [{:keys [amt uv pv] :as row} {:keys [id] :as column}]\n  ;(log/info \"cell-styling-fn\")\n  (cond\n    (= :uv id)\n    {:background-color (cond\n                         (> 2000 uv) \"#FF4136\"\n                         (> 5000 uv 2000) \"#FFDC00\"\n                         (> 7500 uv 5000) \"#01FF70\"\n                         (> uv 7500) \"#2ECC40\")}\n    (= :pv id)\n    {:background-color (cond\n                         (> 2000 pv) \"#FF4136\"\n                         (> 5000 pv 2000) \"#FFDC00\"\n                         (> 7500 pv 5000) \"#01FF70\"\n                         (> pv 7500) \"#2ECC40\")}\n    (= :amt id)\n    {:background-color (cond\n                         (> 2000 amt) \"#FF4136\"\n                         (> 5000 amt 2000) \"#FFDC00\"\n                         (> 7500 amt 5000) \"#01FF70\"\n                         (> amt 7500) \"#2ECC40\")}))\n\n\n(defn table-column-headers [data rows width height]\n  (let [d          (apply set (map keys data))\n        col-count  (count d)\n        col-width  (max 80 (- (/ (or width 400) col-count) 5))\n        row-height (max 50 (/ (or height 400) (+ 2 (or rows 5))))]\n    (->> d\n      (map (fn [k]\n             {:id    k :header-label (name k) :row-label-fn k\n              :width col-width :height row-height}))\n      (into []))))\n\n\n(defn- show [data]\n  [rc/h-box :src (rc/at)\n   :gap \"10px\"\n   :style {:border     \"1px solid\" :border-radius \"3px\"\n           :background \"#808080\"\n           :box-shadow \"5px 5px 5px 2px\"\n           :margin     \"5px\" :padding \"5px\"}\n   :children [[:p {:style {:color \"white\"}}\n               (str @data)]]])\n\n\n(defn- data-tools []\n  [rc/h-box :src (rc/at)\n   :gap \"10px\"\n   :style {:border     \"1px solid\" :border-radius \"3px\"\n           :box-shadow \"5px 5px 5px 2px\"\n           :margin     \"5px\" :padding \"5px\"}\n   :children [[:label.h5 \"Input Data:\"]\n              [rc/button :on-click #(reset! data (assoc sample-data :data [])) :label \"Empty\"]\n              [rc/button :on-click #(reset! data sample-data) :label \"Default\"]\n              [rc/button :on-click #(swap! data assoc-in [:data 0 :uv] 10000) :label \"A -> 10,000\"]\n              [rc/button :on-click #(swap! data assoc :data\n                                      (conj (:data @data)\n                                        {:name \"Page Q\" :uv 1100\n                                         :pv   1100 :tv 1100 :amt 1100}))\n               :label \"Add 'Q'\"]\n              [rc/button :on-click #(swap! data assoc :data\n                                      (into [] (drop-last 2 (:data @data))))\n               :label \"Drop Last 2\"]\n              [rc/button :on-click #(reset! data (-> @data\n                                                   (assoc-in [:metadata :fields :new-item] :number)\n                                                   (assoc :data (into []\n                                                                  (map (fn [x]\n                                                                         (assoc x :new-item (rand-int 7000)))\n                                                                    (:data @data))))))\n               :label \"Add :new-item\"]]])\n\n\n(defn- data-update-example [& {:keys [data container-id component-id] :as params}]\n  ;(log/info \"data-update-example (params)\" params)\n\n  (fn []\n    [rc/v-box :src (rc/at)\n     :class \"data-update-example\"\n     :gap \"10px\"\n     :width \"100%\"\n     :height \"100%\"\n     :children [[:div.chart-part {:style {:width \"100%\" :height \"90%\"}}\n                 [rc/simple-v-table :src (rc/at)\n                  :model (r/atom (:data @data))\n                  :columns (table-column-headers (:data @data) 5 200 25)\n                  :max-rows (count (:data @data))\n                  :table-row-line-color \"#00fff0\"\n                  :cell-style cell-styling-fn\n                  :parts {:simple-wrapper {:style {:border false}}}]]\n                [:div.data-tools-part {:style {:width \"100%\"}}\n                 [show data]\n                 [data-tools]]]]))\n\n\n\n(defn example []\n  (acu/demo \"Raw Re-com Table (WIP)\"\n    \"Trying to debug re-renders on data change\n\n> Looks like the component _may_ be broken...\"\n\n    [layout/centered {:extra-classes :width-50}\n     [data-update-example :data data]]))\n\n\n\n\n(comment\n  (reset! data [])\n\n  (reset! data sample-data)\n\n  (swap! data assoc-in [0 :uv] 10000)\n\n  (swap! data conj {:name \"Page Q\" :uv 1100\n                    :pv   1100 :tv 1100 :amt 1100})\n\n  (reset! data (into [] (drop-last 2 @data)))\n\n  (reset! data (into []\n                 (map (fn [x]\n                        (assoc x :new-item (rand-int 5000)))\n                   @data)))\n\n  ())\n\n\n"]}