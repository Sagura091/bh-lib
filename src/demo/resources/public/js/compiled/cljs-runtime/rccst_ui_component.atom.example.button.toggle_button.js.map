{"version":3,"sources":["rccst_ui_component/atom/example/button/toggle_button.cljs"],"mappings":";AAOA,+DAAA,/DAAMA;AAAN,AACM,IAAMC,sBAAoB,iDAAA,jDAACC;IACrBC,sBAAoB,iDAAA,jDAACD;AAD3B,AAEK,4EAAA,kEAAA,2kCAAA,8GAAA,2CAAA,uEAAA,+DAAA,sHAAA,2CAAA,iGAAA,sEAAA,kEAAA,33DAACE,qyCAYUC,+RACCC,2JAAyCL,yNAER,WAAKM;AAAL,AAAQ,OAACC,mDAAMP,oBAAoBQ;WAfhF,4BAAA,sHAAA,2CAAA,iGAAA,sEAAA,kEAAA,vTAiBYH,2JAAyCH,yNAER,WAAKI;AAAL,AAAQ,OAACC,mDAAML,oBAAoBM;WAnBhF,oCAAA,AAAA","names":["rccst-ui-component.atom.example.button.toggle-button/example","demo-toggle-state-1","reagent.ratom.atom","demo-toggle-state-2","woolybear.ad.demo.src.catalog.utils.demo","woolybear.ad.layout/padded","woolybear.ad.buttons/toggle-button","_","cljs.core.swap_BANG_","cljs.core/not"],"sourcesContent":["(ns rccst-ui-component.atom.example.button.toggle-button\n  (:require [reagent.ratom :as ratom]\n            [woolybear.ad.demo.src.catalog.utils :as acu]\n            [woolybear.ad.layout :as layout]\n            [woolybear.ad.buttons :as buttons]))\n\n\n(defn example []\n      (let [demo-toggle-state-1 (ratom/atom false)\n            demo-toggle-state-2 (ratom/atom false)]\n           (acu/demo \"Toggle button\"\n                           \"This component works similar to a checkbox, in that it has an \\\"on\\\" state and\n                     and \\\"off\\\" state, representing some value in the app-db. Use the :subscribe-to-on?\n                     option to pass the current state to the toggle button, and the :class-for-on option\n                     to pass the CSS class to add to the toggle button when the current state is \\\"on.\\\"\n                     You can also pass the :class-for-off option to specify a CSS class to be added when\n                     the toggle button is \\\"off,\\\" however it is usually sufficient to just leave the\n                     toggle button in its default state when not active. Pass a (required) :on-click option\n                     to specify an event to dispatch when the button is clicked. It is up to the event\n                     handler to update the on/off value so that the toggle button displays in the correct\n                     state. All other standard button options also apply to the toggle button (including\n                     :extra-classes and :subscribe-to-classes).\"\n                     [layout/padded {:extra-classes :level}\n                      [buttons/toggle-button {:subscribe-to-on? demo-toggle-state-1\n                                              :class-for-on :is-primary\n                                              :on-click (fn [_] (swap! demo-toggle-state-1 not))}\n                       \"Click to toggle 1\"]\n                      [buttons/toggle-button {:subscribe-to-on? demo-toggle-state-2\n                                              :class-for-on :is-primary\n                                              :on-click (fn [_] (swap! demo-toggle-state-2 not))}\n                       \"Click to toggle 2\"]]\n                     '[layout/padded {:extra-classes :level}\n                       [buttons/toggle-button {:subscribe-to-on? [:toggle-demo/button 1]\n                                               :class-for-on :is-primary\n                                               :on-click [:toggle-demo/click 1]}\n                        \"Click to toggle 1\"]\n                       [buttons/toggle-button {:subscribe-to-on? [:toggle-demo/button 2]\n                                               :class-for-on :is-primary\n                                               :on-click [:toggle-demo/click 2]}\n                        \"Click to toggle 2\"]])))\n"]}