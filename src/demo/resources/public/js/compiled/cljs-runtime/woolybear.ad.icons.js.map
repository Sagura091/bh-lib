{"version":3,"sources":["woolybear/ad/icons.cljs"],"mappings":"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","names":["cljs.spec.alpha/def-impl","cljs.core/string?","cljs.core/boolean?","cljs.spec.alpha/map-spec-impl","G__73016","cljs.core/map?","cljs.core/contains?","woolybear.ad.icons/icon","opts","cljs.core.ex_info","map__73017","cljs.core/--destructure-map","cljs.core.get","icon","brand?","tooltip","classes","size","on-click","extra-classes","subscribe-to-classes","caption","subscribe-to-caption","icon-class","clojure.string/starts-with?","size-class","cljs.core/name","brand-class","fa-size","G__73018","cljs.core._EQ_","fa-classes","span-attrs","G__73019","woolybear.ad.utils.css__GT_str","cljs.core.assoc","woolybear.ad.utils/mk-no-default-dispatcher","classes-sub","woolybear.ad.utils/subscribe-to","caption-sub","_","cljs.core/deref","dynamic-classes","dynamic-caption","or__4253__auto__","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl","cljs.spec.alpha/cat-impl","cljs.core/vector?"],"sourcesContent":["(ns woolybear.ad.icons\n  \"\n  Simple icons based on FontAwesome (free version), suitable for use in buttons,\n  dialogs, etc.\n  \"\n  (:require [cljs.spec.alpha :as s]\n            [woolybear.ad.utils :as adu]\n            [clojure.string :as str]))\n\n;; Wrapper for Font Awesome based icons\n;; https://fontawesome.com/icons?d=gallery&m=free\n\n(s/def :icon/icon string?)\n(s/def :icon/brand? boolean?)\n(s/def :icon/tooltip string?)\n(s/def :icon/extra-classes :ad/extra-classes)\n(s/def :icon/subscribe-to-classes :ad/subscription)\n(s/def :icon/size #{:small :medium :large})\n(s/def :icon/on-click :ad/event-dispatcher)\n\n(s/def :icon/opts (s/keys :req-un [:icon/icon]\n                          :opt-un [:icon/brand?\n                                   :icon/tooltip\n                                   :icon/extra-classes\n                                   :icon/subscribe-to-classes\n                                   :icon/size\n                                   :icon/on-click\n                                   ]))\n(defn icon\n  \"\n  Given a map of options, returns an icon component based on Bulma's\n  FontAwesome-based icons. The options are as follows:\n  :icon (req)            name of the icon, as specified on the FontAwesome gallery page\n  :brand?                if present and true, uses 'fab' icons instead of 'fas'.\n  :tooltip               Short tooltip string (for title attribute)\n  :extra-classes         extra CSS classes to add to the icon\n  :subscribe-to-classes  dynamic CSS classes to add to the icon\n  :size                  :small, :medium, :large (or none). Default size is between :small and :medium\n  :on-click              re-frame event handler when user clicks on icon\n  \"\n  [opts]\n  (if-not (contains? opts :icon)\n    (throw (ex-info \"Missing :icon/icon parameter.\" opts)))\n  (let [{:keys [icon brand? tooltip classes size on-click extra-classes subscribe-to-classes\n                caption subscribe-to-caption]} opts\n        icon-class (if (str/starts-with? icon \"fa-\") icon\n                                                     (str \"fa-\" icon))\n        size-class (when size (str \"is-\" (name size)))\n        brand-class (if brand? \"fab\" \"fas\")\n        fa-size (case size\n                  nil :fa-lg\n                  :medium :fa-2x\n                  :large :fa-3x\n                  \"\")\n        fa-classes #{brand-class icon-class fa-size}\n        span-attrs (cond-> {:class (adu/css->str :icon size-class classes)}\n                           tooltip (assoc :title tooltip)\n                           on-click (assoc :on-click (adu/mk-no-default-dispatcher on-click)))\n        classes-sub (adu/subscribe-to subscribe-to-classes)\n        caption-sub (adu/subscribe-to subscribe-to-caption)]\n    (fn [_]\n      (let [dynamic-classes @classes-sub\n            dynamic-caption @caption-sub]\n        [:span span-attrs\n         [:i {:class (adu/css->str :wb-icon\n                                   fa-classes\n                                   extra-classes\n                                   dynamic-classes)}]\n         (when (or caption dynamic-caption)\n           [:span.wb-icon-caption caption dynamic-caption])]))))\n\n(s/fdef icon\n  :args (s/cat :opts :icon/opts)\n  :ret vector?)\n"]}