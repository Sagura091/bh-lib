{"version":3,"sources":["ui_component/atom/diagram/editable_digraph.cljs"],"mappings":"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","names":["taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","ui-component.atom.diagram.editable-digraph/sample-data","js/shadow.js.shim.module$react_flow_renderer.MarkerType","ui-component.atom.diagram.editable-digraph/sample-data-3","ui-component.atom.diagram.editable-digraph/source-code","ui-component.atom.diagram.editable-digraph/handle-style","ui-component.atom.diagram.editable-digraph/default-node-style","ui-component.atom.diagram.editable-digraph/node-style","ui-component.atom.diagram.editable-digraph/source-panel","ui-component.atom.diagram.editable-digraph/input-handles","label","inputs","position","cljs.core.doall","cljs.core.map_indexed","p__59184","vec__59185","cljs.core.nth","idx","target","ports","vec__59188","source-port","target-port","js/shadow.js.shim.module$react_flow_renderer.Handle","cljs.core.merge","cljs.core.into","ui-component.atom.diagram.editable-digraph/output-handles","outputs","p__59191","vec__59192","vec__59195","ui-component.atom.diagram.editable-digraph/apply-handles","input-position","output-position","i","cljs.core.map","p__59198","vec__59199","vec__59202","k","s","d","o","p__59205","vec__59206","vec__59209","in-out","clojure.set.intersection","in-only","clojure.set.difference","out-only","ui-component.atom.diagram.editable-digraph/color-black","ui-component.atom.diagram.editable-digraph/color-white","ui-component.atom.diagram.editable-digraph/on-drag-start","node-type","event","ui-component.atom.diagram.editable-digraph/on-drag-over","ui-component.atom.diagram.editable-digraph/on-drop","component-id","reactFlowInstance","set-nodes-fn","wrapper","x","y","reactFlowBounds","cljs.core/deref","cljs.core.not_EQ_","new-id","G__59213","fexpr__59212","cljs.core/clj->js","new-node","G__59214","nds","p__59216","vec__59217","map__59220","cljs.core/--destructure-map","cljs.core.get","p1__59215#","ui-component.atom.diagram.editable-digraph/make-draggable-node","type","color","text-color","node","ui-component.atom.diagram.editable-digraph/details-panel","components","details","ui-component.molecule.composite.util.node-config-ui/make-config-panel","ui-component.atom.diagram.editable-digraph/tool-panel","open-details?","tool-types","re-com.core/v-box","js/goog.DEBUG","re-com.core/line","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","ui-component.atom.diagram.editable-digraph/flow*","p__59222","map__59223","seq59221","self__4852__auto__","cljs.core/seq","nodes","edges","node-types","edge-types","minimap-styles","on-change-nodes","on-change-edges","on-drop","on-drag-over","zoom-on-scroll","preventScrolling","connectFn","flowInstance","params","cljs.core.apply","cljs.core/merge","or__4253__auto__","generatedFlowInstance","cljs.core/reset!","js/shadow.js.shim.module$react_flow_renderer.default","js/shadow.js.shim.module$react_flow_renderer.MiniMap","js/shadow.js.shim.module$react_flow_renderer.Background","js/shadow.js.shim.module$react_flow_renderer.Controls","ui-component.atom.diagram.editable-digraph/editable-flow","p__59225","map__59226","seq59224","force-layout?","map__59227","vec__59228","vec__59231","n","e","ui_component.atom.diagram.diagram.dagre_support.build_layout","ns","set-nodes","js/shadow.js.shim.module$react_flow_renderer.useNodesState","es","set-edges","js/shadow.js.shim.module$react_flow_renderer.useEdgesState","!wrapper","cljs.core.atom","js/shadow.js.shim.module$react_flow_renderer.ReactFlowProvider","el","cljs.core.partial","ui-component.atom.diagram.editable-digraph/component","p__59235","map__59236","seq59234","data","container-id","ui-component.utils.helpers/resolve-value","reagent.core.atom","n-types","p__59237","vec__59238","v","re-com.core/h-box"],"sourcesContent":["(ns ui-component.atom.diagram.editable-digraph\n  (:require [ui-component.atom.diagram.diagram.dagre-support :as dagre]\n            [ui-component.molecule.composite.util.node-config-ui :as config]\n            [ui-component.molecule.composite.util.ui]\n            [ui-component.utils.helpers :as h]\n            [clojure.set :as set]\n            [re-com.core :as rc]\n            [reagent.core :as r]\n            [taoensso.timbre :as log]\n            [\"react\" :as react]\n            [\"react-flow-renderer\" :refer (ReactFlowProvider MiniMap Controls\n                                                             Handle MarkerType\n                                                             Background\n                                                             applyNodeChanges\n                                                             applyEdgeChanges\n                                                             useNodesState\n                                                             useEdgesState) :default ReactFlow]))\n\n\n(log/info \"ui-component.atom.diagram.editable-digraph\")\n\n\n(declare node)\n\n\n(def sample-data\n  {:nodes [{:id       \":ui/targets\"\n            ;:type     \":ui/component\"\n            :data     {:label   \":ui/targets\"\n                       :inputs  []\n                       :outputs []}\n            :position {:x 0 :y 100}}\n           {:id       \":topic/target-data\"\n            ;:type     \":source/remote\"\n            :data     {:label   \":topic/target-data\"\n                       :inputs  []\n                       :outputs []}\n            :position {:x 100 :y 0}}\n           {:id       \":topic/selected-targets\"\n            ;:type     \":source/local\"\n            :data     {:label   \":topic/selected-targets\"\n                       :inputs  []\n                       :outputs []}\n            :position {:x 0 :y 200}}]\n\n   :edges [\n           {:id        \"target-data->targets\"\n            :source    \":topic/target-data\" :target \":ui/targets\"\n            :style     {:strokeWidth 2 :stroke :orange}\n            :markerEnd {:type (.-Arrow MarkerType)}}        ;:type (.-ArrowClosed MarkerType)}}\n           {:id        \"targets->selected-targets\"\n            :source    \":ui/targets\" :target \":topic/selected-targets\"\n            :style     {:strokeWidth 2 :stroke :blue}\n            :markerEnd {:type (.-ArrowClosed MarkerType)}}]})\n(def sample-data-3\n  {:nodes [{:id \"1 \" :type \"input\" :data {:label \"input\"} :position {:x 0 :y 0}}\n           {:id \"2 \" :data {:label \"node 2 \"} :position {:x 0 :y 0}}\n           {:id \"2a \" :data {:label \"node 2a \"} :position {:x 0 :y 0}}\n           {:id \"2b \" :data {:label \"node 2b \"} :position {:x 0 :y 0}}\n           {:id \"2c \" :data {:label \"node 2c \"} :position {:x 0 :y 0}}\n           {:id \"2d \" :data {:label \"node 2d \"} :position {:x 0 :y 0}}\n           {:id \"3 \" :data {:label \"node 3 \"} :position {:x 0 :y 0}}\n           {:id \"4 \" :data {:label \"node 4 \"} :position {:x 0 :y 0}}\n           {:id \"5 \" :data {:label \"node 5 \"} :position {:x 0 :y 0}}\n           {:id \"6 \" :type \"output\" :data {:label \"output\"} :position {:x 0 :y 0}}\n           {:id \"7 \" :type \"output\" :data {:label \"output\"} :position {:x 0 :y 0}}]\n\n   :edges [{:id \"e12\" :source \"1 \" :target \"2 \" :type \"smoothstep\" :animated true}\n           {:id \"e13\" :source \"1 \" :target \"3 \" :type \"smoothstep\" :animated true}\n           {:id \"e22a\" :source \"2 \" :target \"2a \" :type \"smoothstep\" :animated true}\n           {:id \"e22b\" :source \"2 \" :target \"2b \" :type \"smoothstep\" :animated true}\n           {:id \"e22c\" :source \"2 \" :target \"2c \" :type \"smoothstep\" :animated true}\n           {:id \"e2c2d\" :source \"2c \" :target \"2d \" :type \"smoothstep\" :animated true}\n           {:id \"e45\" :source \"4 \" :target \"5 \" :type \"smoothstep\" :animated true}\n           {:id \"e56\" :source \"5 \" :target \"6 \" :type \"smoothstep\" :animated true}\n           {:id \"e57\" :source \"5 \" :target \"7 \" :type \"smoothstep\" :animated true}]})\n\n\n(def source-code '[])\n\n\n(def handle-style {:width \"8px\" :height \"8px\" :borderRadius \"50%\"})\n(def default-node-style {:padding      \"3px\" :max-width \"180px\"\n                         :borderRadius \"5px\" :margin :auto\n                         :background   :white :color :black})\n(def node-style {:ui/component  {:background :green :color :white}\n                 :source/remote {:background :orange :color :black}\n                 :source/local  {:background :blue :color :white}\n                 :source/fn     {:background :pink :color :black}})\n\n\n(defn- source-panel [])\n\n\n;; region ; adding handles to nodes in the digraph\n\n(defn- input-handles\n       \"\n       NOTE: the inputs (values in the hash-map) are STRINGS!\n       \"\n       [label inputs position]\n       [:<>\n        (doall\n          (->> inputs\n               (map-indexed (fn [idx [target ports]]\n                                (let [[source-port target-port] ports]\n                                     ;(log/info \"input-handle\" label target-port)\n                                     [:> Handle {:id    target-port :type \"target\" :position position\n                                                 :style (merge handle-style {:left (+ 20 (* 10 idx))})}])))\n               (into [:<>])))])\n\n\n(defn- output-handles\n       \"\n       NOTE: the inputs (values in the hash-map) are STRINGS!\n       \"\n       [label outputs position]\n       [:<>\n        (doall\n          (->> outputs\n               (map-indexed (fn [idx [target ports]]\n                                (let [[source-port target-port] ports]\n                                     ;(log/info \"output-handle\" label source-port)\n                                     [:> Handle {:id    source-port :type \"source\" :position position\n                                                 :style (merge handle-style {:right (+ 20 (* 10 idx))})}])))\n               (into [:<>])))])\n\n\n(defn- apply-handles [label inputs outputs input-position output-position]\n       (let [i (->> inputs\n                    (map (fn [[k [s d]]] [k s d])\n                         (into #{})))\n             o (->> outputs\n                    (map (fn [[k [s d]]] [k s d])\n                         (into #{})))\n             in-out (set/intersection i o)\n             in-only (set/difference (set/difference i o) in-out)\n             out-only (set/difference (set/difference o i) in-out)]\n\n            (input-handles label in-out input-position)\n            (input-handles label in-only input-position)\n            (output-handles label out-only output-position)))\n\n;; endregion\n\n\n(def color-black \"#000000\")\n(def color-white \"#ffffff\")\n\n\n;; region ; digraph drag-and-drop support\n\n(defn- on-drag-start [node-type event]\n       (.setData (.-dataTransfer event) \"editable-flow\" node-type)\n       (set! (.-effectAllowed (.-dataTransfer event)) \"move\"))\n\n\n(defn- on-drag-over [event]\n       (.preventDefault event)\n       (set! (.-dropEffect (.-dataTransfer event)) \"move\"))\n\n\n(defn- on-drop [component-id reactFlowInstance set-nodes-fn wrapper event]\n       (.preventDefault event)\n\n       (let [node-type (.getData (.-dataTransfer event) \"editable-flow\")\n             x (.-clientX event)\n             y (.-clientY event)\n             reactFlowBounds (.getBoundingClientRect @wrapper)]\n\n            (when (not= node-type \"undefined\")\n                  (let [new-id (str node-type \"-new\")\n                        position ((.-project @reactFlowInstance) (clj->js {:x (- x (.-left reactFlowBounds))\n                                                                           :y (- y (.-top reactFlowBounds))}))\n                        new-node {:id       new-id\n                                  :type     node-type\n                                  :data     {:label   new-id\n                                             :inputs  []\n                                             :outputs []}\n                                  :position position}]\n\n                       (set-nodes-fn (fn [nds] (.concat nds (clj->js new-node))))))))\n\n\n(defn- make-draggable-node [[k {:keys [label type color text-color]} :as node]]\n       ^{:key label} [:div.draggable\n                      {:style       {:width           \"150px\" :height \"50px\"\n                                     :margin-bottom   \"5px\"\n                                     :display         :flex\n                                     :justify-content :center\n                                     :align-items     :center\n                                     :cursor          :grab\n                                     :border-radius   \"3px\" :padding \"2px\"\n                                     :background      color :color text-color}\n                       :onDragStart #(on-drag-start type %)\n                       :draggable   true}\n                      label])\n\n;; endregion\n\n\n(defn- details-panel [components component-id node]\n       (let [details (get node \"data\")]\n\n            [config/make-config-panel details]))\n\n\n(defn- tool-panel [open-details? components component-id tool-types]\n\n       [:div#tool-panel {:display         :flex\n                         :flex-direction  :column\n                         :justify-content :center\n                         :align-items     :center\n                         :style           {:width         \"20%\" :height \"100%\"\n                                           :border-radius \"5px\" :padding \"15px 10px\"\n                                           :background    :white :box-shadow \"5px 5px 5px #888888\"}}\n        [rc/v-box :src (rc/at)\n         :gap \"2px\"\n         :children [[rc/v-box :src (rc/at)\n                     :gap \"2px\"\n                     :justify :center\n                     :align :center\n                     :children [(doall\n                                  (map make-draggable-node tool-types))]]\n                    [rc/line :size \"2px\"]\n                    [:div {:style {:width \"20%\" :height \"100%\"}}\n                     [config/make-config-panel @open-details?]]]]])\n\n\n(defn- flow* [& {:keys [component-id nodes edges\n                        node-types edge-types\n                        minimap-styles\n                        on-change-nodes on-change-edges on-drop on-drag-over\n                        zoom-on-scroll preventScrolling connectFn flowInstance] :as params}]\n\n       (let [params (apply merge {:nodes               nodes\n                                  :edges               edges\n                                  :onNodesChange       on-change-nodes\n                                  :onEdgesChange       on-change-edges\n                                  :zoomOnScroll        (or zoom-on-scroll false)\n                                  :preventScrolling    (or preventScrolling false)\n                                  :onConnect           (or connectFn #())\n                                  :fitView             true\n                                  :attributionPosition \"bottom-left\"\n                                  :onDrop              (or on-drop #())\n                                  :onDragOver          (or on-drag-over #())\n                                  :onInit              (fn [generatedFlowInstance] (reset! flowInstance generatedFlowInstance))}\n                           (when node-types {:node-types node-types})\n                           (when edge-types {:edge-types edge-types}))]\n\n            [:> ReactFlow params\n             [:> MiniMap (if minimap-styles minimap-styles {})]\n             [:> Background]\n             [:> Controls]]))\n\n\n(defn- editable-flow [& {:keys [component-id\n                                nodes edges\n                                node-types edge-types\n                                minimap-styles on-drop on-drag-over\n                                zoom-on-scroll preventScrolling connectFn\n                                flowInstance\n                                force-layout?] :as params}]\n\n       (let [{n :nodes e :edges} (if force-layout?\n                                   (dagre/build-layout nodes edges)\n                                   {:nodes nodes :edges edges})\n             [ns set-nodes on-change-nodes] (useNodesState (clj->js n))\n             [es set-edges on-change-edges] (useEdgesState (clj->js e))\n             !wrapper (clojure.core/atom nil)]\n\n            [:> ReactFlowProvider\n             [:div#wrapper {:style {:width \"800px\" :height \"700px\"}\n                            :ref   (fn [el]\n                                       (reset! !wrapper el))}\n              [flow*\n               :component-id component-id\n               :nodes ns :edges es\n               :on-change-nodes on-change-nodes\n               :on-change-edges on-change-edges\n               :node-types node-types\n               :edge-types edge-types\n               :minimap-styles minimap-styles\n               :connectFn connectFn\n               :zoom-on-scroll zoom-on-scroll\n               :preventScrolling preventScrolling\n               :on-drop (partial on-drop component-id flowInstance set-nodes !wrapper)\n               :on-drag-over on-drag-over\n               :flowInstance flowInstance]]]))\n\n\n(defn component [& {:keys [data\n                           node-types edge-types\n                           minimap-styles\n                           tool-types\n                           connectFn zoom-on-scroll preventScrolling\n                           component-id container-id\n                           force-layout?]}]\n\n      (let [d (h/resolve-value data)\n            open-details? (r/atom {})\n            n-types (->> node-types\n                         (map (fn [[k v]]\n                                  {k (partial v open-details?)}))\n                         (into {})\n                         (clj->js))\n            flowInstance (clojure.core/atom nil)]\n\n\n           ;(log/info \"component (DIGRAPH)\" \"//\" data \"//\" @d \"// node-types\" node-types \"// n-types\" (js->clj n-types))\n\n           (fn []\n               [rc/h-box :src (rc/at)\n                :gap \"10px\"\n                :children [[tool-panel open-details? (:components @d) component-id tool-types]\n                           [:f> editable-flow\n                            :component-id component-id\n                            :nodes (:nodes @d)\n                            :edges (:edges @d)\n                            :node-types n-types\n                            :edge-types edge-types\n                            :on-drop on-drop\n                            :on-drag-over on-drag-over\n                            :minimap-styles (or minimap-styles {})\n                            :connectFn connectFn\n                            :zoom-on-scroll zoom-on-scroll\n                            :preventScrolling preventScrolling\n                            :flowInstance flowInstance\n                            :force-layout? force-layout?]]])))\n\n\n\n\n(comment\n  (:nodes @sample-data)\n  (swap! sample-data assoc :nodes (conj (:nodes @sample-data)\n                                        {:id \"dummy-node\" :position {:x 0 :y 0}}))\n\n  (def node-types {\":ui/component\"  (partial ui-component.molecule.composite.util.ui/custom-node :ui/component)\n                   \":source/remote\" (partial ui-component.molecule.composite.util.ui/custom-node :source/remote)\n                   \":source/local\"  (partial ui-component.molecule.composite.util.ui/custom-node :source/local)\n                   \":source/fn\"     (partial ui-component.molecule.composite.util.ui/custom-node :source/fn)})\n  (def open-details? (r/atom \"\"))\n\n  (defn- dummy [a b c d]\n         (+ a b c d))\n\n  ((partial (partial dummy 1 1) 1 1))\n  (->> node-types\n       (map (fn [[k v]]\n                {k (partial v open-details?)}))\n       (into {})\n       (clj->js))\n\n  ())\n\n"]}