{"version":3,"sources":["ui_component/atom/layout/responsive_grid.cljs"],"mappings":";AAKA,AAAAA,0DAAAC,mCAAA,qDAAA,2CAAA,KAAA,EAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA;GAAA,OAAA,KAAA,YAAA;AAGA,AAAKC,gEAAqB,KAAAC,sDAAgBC;AAG1C,AAAA;;;;;;;;;;;;;;;;;;;;;;gDAAA,wDAAAC,xGAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,mFAAAF;;;AAAA,AAAA,CAAA,qFAAA,WAAAG,hGAAMD;AAAN,AAAA,IAAAE,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;WAAAA,PAwB0CmB;sBAxB1C,AAAAjB,4CAAAF,eAAA,7EAuB6BgB;gBAvB7B,AAAAd,4CAAAF,eAAA,vEAsBwBa;eAtBxB,AAAAX,4CAAAF,eAAA,tEAqBgCS;eArBhC,AAAAP,4CAAAF,eAAA,tEAqBgBO;sBArBhB,AAAAL,4CAAAF,eAAA,7EAuBae;cAvBb,AAAAb,4CAAAF,eAAA,rEAqByCU;kBArBzC,AAAAR,4CAAAF,eAAA,zEAsBkCc;aAtBlC,AAAAZ,4CAAAF,eAAA,pEAqByBQ;YArBzB,AAAAN,4CAAAF,eAAA,nEAsBkBY;kBAtBlB,AAAAV,4CAAAF,eAAA,zEAwBaiB;kBAxBb,AAAAf,4CAAAF,eAAA,zEAwByBkB;WAxBzB,AAAAhB,4CAAAF,eAAA,lEAsBaW;SAtBb,AAAAT,4CAAAF,eAAA,hEAqBaM;AArBb,AA4BE,QAAA,2CAAA,uDAAA,uDAAA,7JAAMc,+FAAOZ,uDAAWA,yDAAWA;AAAnC,AACE,oDAAA,mFAAA,6GAAA,wCAAA,kEAAA,2EAAA,wEAAA,uDAAA,yEAAA,mEAAA,gEAAA,mEAAA,sDAAA,yDAAA,kDAAA,4EAAA,mEAAA,hmCAACa,+KAAShC,k/BAauC,iBAAAiC,mBAAIR;AAAJ,AAAA,oBAAAQ;AAAAA;;AAAA;;KAFA,iBAAAA,mBAAIP;AAAJ,AAAA,oBAAAO;AAAAA;;AAAA;;KAHA,iBAAAA,mBAAIZ;AAAJ,AAAA,oBAAAY;AAAAA;;AAAA;AAAA,AAAA;;;KAHA,iBAAAA,mBAAIV;AAAJ,AAAA,oBAAAU;AAAAA;;AAAA;;KAEA,iBAAAA,mBAAIb;AAAJ,AAAA,oBAAAa;AAAAA;;AAAA;AAAA,AAAA;;;KAEA,iBAAAA,mBAAIL;AAAJ,AAAA,oBAAAK;AAAAA;;AAAA;;KATjD,SAUiD,iBAAAA,mBAAIJ;AAAJ,AAAA,oBAAAI;AAAAA;;AAAA;;KAVjD,2CAAA,gDAAA,KAAA,gDAAA,KAAA,kDAAA,KAAA,gDAAA,KAAA,kDAAA,eACiDhB,FACAc,KAUA,iBAAAE,mBAAIN;AAAJ,AAAA,oBAAAM;AAAAA;;AAAA;;KAZjD,2CAAA,gDAAA,OAAA,gDAAA,MAAA,kDAAA,MAAA,gDAAA,MAAA,kDAAA,YAMiD,iBAAAA,mBAAIT;AAAJ,AAAA,oBAAAS;AAAAA;;AAAA;;eAQ/Cf;;;AA3CN,CAAA,wEAAA,xEAAMT;;AAAN;AAAA,CAAA,kEAAA,WAAAK,7EAAML;AAAN,AAAA,IAAAM,qBAAA;AAAA,AAAA,OAAAA,wDAAA,AAAAC,cAAAF;;;AAAA","names":["taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","ui-component.atom.layout.responsive-grid/ResponsiveGridLayout","js/shadow.js.shim.module$react_grid_layout.WidthProvider","js/shadow.js.shim.module$react_grid_layout.Responsive","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","ui-component.atom.layout.responsive-grid/grid","p__59907","map__59908","cljs.core/--destructure-map","cljs.core.get","seq59906","self__4852__auto__","cljs.core/seq","id","children","layout","layoutFn","widthFn","cols","width","rowHeight","compactType","draggableHandle","draggableCancel","isDraggable","isResizable","args","l","cljs.core.into","or__4253__auto__"],"sourcesContent":["(ns ui-component.atom.layout.responsive-grid\n  (:require [taoensso.timbre :as log]\n            [\"react-grid-layout\" :refer (Responsive WidthProvider)]))\n\n\n(log/info \"ui-component.atom.layout.responsive-grid\")\n\n\n(def ResponsiveGridLayout (WidthProvider. Responsive))\n\n\n(defn grid\n  \"use [react-grid-layout](https://github.com/react-grid-layout/react-grid-layout) to organize a bunch of children in a draggable grid\n\n  ---\n\n  Parameters are keyword identified as follows:\n\n  | keyword     | type     | description            |\n  |:------------|:--------:|:-----------------------|\n  | `:id`       | string   | uniquely identify this particular grid, in case you have multiples |\n  | `:children` | vector   | vector of hiccup that define each child to be placed into the grid |\n  | `:layout`   | atom     | atom of layout 'records' that track where each child is drawn in the grid |\n  | `:layoutFn` | function | function to update the layout atom when children are resized or move |\n  | `:cols`     | atom     | atom wrapping an integer, which specifies the number of 'grid columns' |\n\n> See also\n>\n> [react-grid-layout](https://github.com/react-grid-layout/react-grid-layout)\n>\n> [re-com](https://github.com/Day8/re-com)\n  \"\n  [& {:keys [id children layout layoutFn widthFn\n             cols width rowHeight compactType\n             draggableHandle draggableCancel\n             isDraggable isResizable] :as args}]\n\n  ;(log/info \"grid\" id children layout layoutFn)\n\n  (let [l {:lg layout :md layout :sm layout}]\n    (into [:> ResponsiveGridLayout {:className       \"layout\"\n                                    :id              id\n                                    :layouts         l\n                                    :breakpoints     {:lg 1000 :md 800 :sm 500 :xs 480 :xxs 0}\n                                    :cols            {:lg 20 :md 20 :sm 20 :xs 20 :xxs 20}\n                                    :width           (or width 1200)\n                                    :rowHeight       (or rowHeight 25)\n                                    :onLayoutChange  (or layoutFn #())\n                                    :onWidthChange   (or widthFn #())\n                                    :isDraggable     (or isDraggable true)\n                                    :isResizable     (or isResizable true)\n                                    :draggableHandle (or draggableHandle \".grid-toolbar\")\n                                    :draggableCancel (or draggableCancel \".grid-content\")\n                                    :compactType     (or compactType :vertical)}]\n      children)))"]}