{"version":3,"sources":["rccst_ui_component/atom/example/chart/alt/show_data.cljs"],"mappings":";AAMA,AAAAA,0DAAAC,mCAAA,qDAAA,sDAAA,KAAA,EAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA;GAAA,OAAA,KAAA,WAAA;AAGA,gEAAA,hEAAMC,wIAAWC;AAAjB,AACE,IAAMC,IAAE,AAACC,yCAAgBF;AAAzB,AACE;AAAA,AAAA,4GAAA,wSAAA,iDAAA,OAAA,uDAAA,2CAAA,yDAAA,YAAA,sEAAA,MAAA,iEAAA,UAAA,iEAAA,kBAAA,yDAAA,MAAA,2DAAA,cAAA,6DAAA,mFAAA,mFAAA,8CAAA,2CAAA,uDAAA,2CAAA,uDAAA,QAAA,6DAAA,qDAAA,iEAAA,QAAA,gEAAA,nmDAIGG,sEAAc,EAAA,GAAAC,cAAA,KAAA,2CAAA,sDAAA,2DAAA,oDAAA,60CAQF,4CAAA,AAAAC,gBAAMJ;;;AAGzB,kEAAA,lEAAMK,4IAAaC;AAAnB,AACE,IAAMN,IAAE,AAACC,yCAAgBK;AAAzB,AACE;AAAA,AAAA,4GAAA,wSAAA,iDAAA,OAAA,uDAAA,2CAAA,yDAAA,YAAA,sEAAA,MAAA,iEAAA,UAAA,iEAAA,kBAAA,yDAAA,MAAA,2DAAA,cAAA,6DAAA,mFAAA,mFAAA,8CAAA,2CAAA,uDAAA,2CAAA,uDAAA,h2CAIGJ,sEAAc,EAAA,GAAAC,cAAA,KAAA,2CAAA,sDAAA,2DAAA,oDAAA,0kCAOF,4CAAA,AAAAC,gBAAMJ","names":["taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","rccst-ui-component.atom.example.chart.alt.show-data/show-data","data","d","ui-component.utils.helpers/resolve-value","re-com.core/h-box","js/goog.DEBUG","cljs.core/deref","rccst-ui-component.atom.example.chart.alt.show-data/show-config","config-data"],"sourcesContent":["(ns rccst-ui-component.atom.example.chart.alt.show-data\n  (:require [ui-component.utils.helpers :as h]\n            [re-com.core :as rc]\n            [taoensso.timbre :as log]))\n\n\n(log/info \"rccst-ui-component.atom.example.chart.alt.show-data\")\n\n\n(defn show-data [data]\n  (let [d (h/resolve-value data)]\n    (fn []\n\n      ;(log/info \"show-data\" data \"//\" d \"//\" @d)\n\n      [rc/h-box :src (rc/at)\n       :gap \"10px\"\n       :style {:border     \"1px solid\" :border-radius \"3px\"\n               :background \"#808080\"\n               :box-shadow \"5px 5px 5px 2px\"\n               :margin     \"5px\" :padding \"5px\"}\n       :children [[:p {:style {:color \"white\" :overflow :auto\n                               :max-height \"100px\" :min-height \"100px\"}}\n                   (str @d)]]])))\n\n\n(defn show-config [config-data]\n  (let [d (h/resolve-value config-data)]\n    (fn []\n\n      ;(log/info \"show-data\" data \"//\" d \"//\" @d)\n\n      [rc/h-box :src (rc/at)\n       :gap \"10px\"\n       :style {:border     \"1px solid\" :border-radius \"3px\"\n               :background \"#808080\"\n               :box-shadow \"5px 5px 5px 2px\"\n               :margin     \"5px\" :padding \"5px\"}\n       :children [[:p {:style {:color \"white\"}}\n                   (str @d)]]])))\n"]}