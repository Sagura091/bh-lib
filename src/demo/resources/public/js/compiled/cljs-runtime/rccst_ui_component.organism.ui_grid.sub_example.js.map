{"version":3,"sources":["rccst_ui_component/organism/ui_grid/sub_example.cljs"],"mappings":"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","names":["taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","rccst-ui-component.organism.ui-grid.sub-example/container-id","rccst-ui-component.organism.ui-grid.sub-example/bar-chart-widget","ui-component.molecule.grid-container/component","reagent.core.atom","ui-component.molecule.composite.chart-remote-data/ui-definition","ui_component.utils.helpers.path__GT_keyword","rccst-ui-component.organism.ui-grid.sub-example/multi-chart-widget","ui-component.molecule.composite.simple-multi-chart/ui-definition","rccst-ui-component.organism.ui-grid.sub-example/multi-chart-2-widget","ui-component.molecule.composite.simple-multi-chart-2/ui-definition","rccst-ui-component.organism.ui-grid.sub-example/coverage-plan-widget","ui-component.molecule.composite.coverage-plan/ui-definition","rccst-ui-component.organism.ui-grid.sub-example/default-widgets","rccst-ui-component.organism.ui-grid.sub-example/bar-chart-layout","rccst-ui-component.organism.ui-grid.sub-example/multi-chart-layout","rccst-ui-component.organism.ui-grid.sub-example/multi-chart-2-layout","rccst-ui-component.organism.ui-grid.sub-example/coverage-plan-layout","rccst-ui-component.organism.ui-grid.sub-example/default-layout","rccst-ui-component.organism.ui-grid.sub-example/empty-widgets","rccst-ui-component.organism.ui-grid.sub-example/empty-layout","rccst-ui-component.organism.ui-grid.sub-example/config","rccst-ui-component.organism.ui-grid.sub-example/grid-reset","container-id","widget-val","layout-val","ui-component.utils.helpers/handle-change-path","rccst-ui-component.organism.ui-grid.sub-example/toggle-val","s","val","cljs.core/contains?","cljs.core.disj","cljs.core.conj","rccst-ui-component.organism.ui-grid.sub-example/grid-update","widgets","layout","cljs.core/deref","ui-component.utils.helpers/resolve-value","rccst-ui-component.organism.ui-grid.sub-example/widget-tools","default-widgets","re-com.core/h-box","js/goog.DEBUG","re-com.core/button","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","rccst-ui-component.organism.ui-grid.sub-example/ui-grid-container","p__61141","map__61142","cljs.core/--destructure-map","cljs.core.get","seq61140","self__4852__auto__","cljs.core/seq","params","id","cljs.core/reset!","ui-component.utils/init-container-locals","ui-component.utils/dispatch-local","ui-component.utils/build-subs","ui-component.organism.ui-grid/component","rccst-ui-component.organism.ui-grid.sub-example/example","logged-in?","re_frame.core.subscribe","pub-sub-started?","cljs.core/not","re-frame.core/dispatch","woolybear.ad.demo.src.catalog.utils.demo","and__4251__auto__","woolybear.ad.layout/page","re-com.core/v-box","re-com.core/alert-box"],"sourcesContent":["(ns rccst-ui-component.organism.ui-grid.sub-example\n  (:require [subs :as subs]\n            [ui-component.molecule.composite.chart-remote-data :as chart-remote-data]\n            [ui-component.molecule.composite.coverage-plan :as coverage-plan]\n            [ui-component.molecule.composite.simple-multi-chart :as simple-multi-chart]\n            [ui-component.molecule.composite.simple-multi-chart-2 :as simple-multi-chart-2]\n            [ui-component.molecule.grid-container :as grid-container]\n            [ui-component.organism.ui-grid :as grid]\n            [ui-component.utils :as ui-utils]\n            [ui-component.utils.helpers :as h]\n            [re-com.core :as rc]\n            [re-frame.core :as re-frame]\n            [reagent.core :as r]\n            [taoensso.timbre :as log]\n            [woolybear.ad.demo.src.catalog.utils :as acu]\n            [woolybear.ad.layout :as layout]))\n\n\n(log/info \"rccst-ui-component.organism.ui-grid.sub-example\")\n\n\n(def container-id :ui-grid-sub-demo)\n\n(def bar-chart-widget [\"bar-chart\" \"Bar Chart\"\n                       [grid-container/component\n                        :data (r/atom chart-remote-data/ui-definition)\n                        :component-id (h/path->keyword container-id \"bar-chart\")\n                        :resizable true]\n                       :green :white])\n(def multi-chart-widget [\"multi-chart\" \"Multi-Chart\"\n                         [grid-container/component\n                          :data (r/atom simple-multi-chart/ui-definition)\n                          :component-id (h/path->keyword container-id \"multi-chart\")\n                          :resizable true]\n                         :blue :white])\n(def multi-chart-2-widget [\"multi-chart-2\" \"Multi-Chart-2\"\n                           [grid-container/component\n                            :data (r/atom simple-multi-chart-2/ui-definition)\n                            :component-id (h/path->keyword container-id \"multi-chart-2\")\n                            :resizable true]\n                           :rebeccapurple :white])\n(def coverage-plan-widget [\"coverage-plan\" \"Coverage Plan\"\n                           [grid-container/component\n                            :data (r/atom coverage-plan/ui-definition)\n                            :component-id (h/path->keyword container-id \"coverage-plan\")\n                            :resizable true]\n                           :yellow :black])\n(def default-widgets #{bar-chart-widget})\n\n(def bar-chart-layout {:i \"bar-chart\" :x 0 :y 0 :w 8 :h 15})\n(def multi-chart-layout {:i \"multi-chart\" :x 0 :y 10 :w 8 :h 15})\n(def multi-chart-2-layout {:i \"multi-chart-2\" :x 8 :y 21 :w 12 :h 15})\n(def coverage-plan-layout {:i \"coverage-plan\" :x 8 :y 0 :w 12 :h 21})\n(def default-layout #{bar-chart-layout})\n\n(def empty-widgets #{})\n(def empty-layout #{})\n\n\n(def config\n  {:widgets   default-widgets\n   :layout    default-layout\n   :container \"\"})\n\n\n(defn- grid-reset [container-id widget-val layout-val]\n  (h/handle-change-path container-id  [] {:widgets  widget-val :layout layout-val}))\n\n\n(defn- toggle-val [s val]\n  (if (contains? s val)\n    (disj s val)\n    (conj s val)))\n\n\n(defn- grid-update [container-id widgets layout widget-val layout-val]\n  (h/handle-change-path container-id []\n    {:widgets (toggle-val @(h/resolve-value widgets) widget-val)\n     :layout (toggle-val @(h/resolve-value layout) layout-val)}))\n\n\n(defn- widget-tools [container-id widgets layout default-widgets]\n  [rc/h-box :src (rc/at)\n   :gap \"10px\"\n   :style {:border     \"1px solid\" :border-radius \"3px\"\n           :box-shadow \"5px 5px 5px 2px\"\n           :margin     \"5px\" :padding \"5px\"}\n   :children [[:label.h5 \"Widgets:\"]\n              [rc/button :on-click #(grid-reset container-id\n                                      empty-widgets empty-layout)\n               :label \"Empty\"]\n              [rc/button :on-click #(grid-reset container-id\n                                      default-widgets default-layout)\n               :label \"Default\"]\n              [rc/button :on-click #(grid-update container-id widgets layout\n                                      bar-chart-widget bar-chart-layout)\n               :label \"! Bar Chart\"]\n              [rc/button :on-click #(grid-update container-id widgets layout\n                                      multi-chart-widget multi-chart-layout)\n               :label \"! Multi Chart\"]\n              [rc/button :on-click #(grid-update container-id widgets layout\n                                      multi-chart-2-widget multi-chart-2-layout)\n               :label \"! Multi Chart 2\"]\n              [rc/button :on-click #(grid-update container-id widgets layout\n                                      coverage-plan-widget coverage-plan-layout)\n               :label \"! Coverage Plan\"]]])\n\n\n(defn- ui-grid-container [& {:keys [widgets layout container-id] :as params}]\n  (log/info \"ui-grid-container\" params)\n\n  (let [id (r/atom nil)]\n\n    (fn []\n      (when (nil? @id)\n        (reset! id container-id)\n        (ui-utils/init-container-locals @id config)\n        (ui-utils/dispatch-local @id [:container] container-id)\n        (ui-utils/build-subs container-id config))\n\n      [grid/component\n       :widgets widgets\n       :layout layout\n       :container-id container-id])))\n\n\n(defn example []\n  (let [logged-in?       (re-frame/subscribe [:subs/logged-in?])\n        pub-sub-started? (re-frame/subscribe [:bhui.subs/pub-sub-started?])\n        widgets          [container-id :widgets]\n        layout           [container-id :layout]]\n\n    (if (not @logged-in?)\n      (re-frame/dispatch [:events/login \"test-user\" \"test-pwd\"]))\n\n    (fn []\n      (acu/demo \"Widget Grid (subscription-based)\"\n        \"A grid of widget, which are composed of UI Components using subscription to the data structure that defines a directed graph.\"\n\n        (if (and @logged-in? @pub-sub-started?)\n          [layout/page {:extra-classes :is-fluid}\n\n           [rc/v-box :src (rc/at)\n            :gap \"5px\"\n            :children [[ui-grid-container\n                        :widgets widgets\n                        :layout layout\n                        :container-id container-id]\n                       [widget-tools container-id widgets layout default-widgets default-layout]]]]\n\n          [rc/alert-box :src (rc/at)\n           :alert-type :info\n           :heading \"Waiting for (demo) Log-in\"])\n        '[grid/component\n          :widgets widgets\n          :layout layout\n          :container-id container-id]))))\n\n"]}