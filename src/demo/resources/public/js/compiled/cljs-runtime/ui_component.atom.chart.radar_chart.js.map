{"version":3,"sources":["ui_component/atom/chart/radar_chart.cljs"],"mappings":"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","names":["taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","ui-component.atom.chart.radar-chart/source-code","ui-component.atom.chart.radar-chart/sample-data","ui-component.utils.example-data/meta-tabular-data","ui-component.atom.chart.radar-chart/sample-config-data","ui-component.utils.example-data/tabular-column-config-data","ui-component.atom.chart.radar-chart/random-data","ui-component.utils.example-data/random-meta-positive-tabular-data","ui-component.atom.chart.radar-chart/get-range-across-fields","data","source-data","cljs.core/deref","cljs.core.get_in","all-values","cljs.core.filter","p__58913","vec__58914","cljs.core.nth","k","v","cljs.core._EQ_","cljs.core/keys","cljs.core.map_indexed","idx","a","p1__58912#","cljs.core.map","cljs.core.reduce","cljs.core/into","cljs.core.distinct","domainMax","cljs.core.apply","cljs.core/max","ui-component.atom.chart.radar-chart/get-field-range","field","domainMin","cljs.core/min","p1__58917#","p1__58918#","ui-component.atom.chart.radar-chart/domain-range","domainField","ui-component.atom.chart.radar-chart/local-config","ret","cljs.core.merge","p__58919","vec__58920","ui-component.utils.color/get-color","cljs.core.into","ui-component.atom.chart.radar-chart/config","component-id","ui-component.utils/default-pub-sub","ui-component.atom.chart.utils/default-config","cljs.core.keyword","cljs.core/assoc-in","ui-component.atom.chart.radar-chart/radar-config","label","path","position","re-com.core/v-box","js/goog.DEBUG","ui-component.atom.chart.utils/boolean-config","cljs.core.conj","ui-component.atom.chart.utils/color-config","ui-component.atom.chart.utils/slider-config","ui-component.atom.chart.radar-chart/make-radar-config","p__58927","vec__58928","ui-component.atom.chart.radar-chart/config-panel","re-com.core/h-box","ui-component.utils/h-wrap","ui-component.atom.chart.radar-chart/make-radar-display","subscriptions","isAnimationActive?","p__58935","vec__58936","_","ui-component.utils/resolve-sub","js/shadow.js.shim.module$recharts.Radar","cljs.core.remove","cljs.core/empty?","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","ui-component.atom.chart.radar-chart/component*","p__58942","map__58943","cljs.core/--destructure-map","cljs.core.get","seq58941","self__4852__auto__","cljs.core/seq","container-id","params","d","domain","js/shadow.js.shim.module$recharts.ResponsiveContainer","js/shadow.js.shim.module$recharts.RadarChart","js/shadow.js.shim.module$recharts.PolarGrid","js/shadow.js.shim.module$recharts.PolarAngleAxis","js/shadow.js.shim.module$recharts.PolarRadiusAxis","or__4253__auto__","ui-component.atom.chart.radar-chart/component","p__58947","map__58950","seq58944","input-params","cljs.core.assoc","ui-component.atom.chart.wrapper-2/component-panel","ui-component.atom.chart.wrapper-2/base-chart","ui-component.atom.chart.radar-chart/meta-data","re-frame.core/dispatch-sync"],"sourcesContent":["(ns ui-component.atom.chart.radar-chart\n  (:require [ui-component.atom.chart.utils :as utils]\n            [ui-component.utils.color :as color]\n            [ui-component.utils.helpers :as h]\n            [ui-component.utils.locals :as l]\n            [ui-component.atom.chart.wrapper-2 :as wrapper]\n            [ui-component.utils.example-data :as example-data]\n            [ui-component.atom.chart.wrapper :as c]\n            [ui-component.utils :as ui-utils]\n            [re-frame.core :as rf]\n            [re-com.core :as rc]\n            [reagent.core :as r]\n            [taoensso.timbre :as log]\n\n            [\"recharts\" :refer [ResponsiveContainer RadarChart PolarGrid\n                                PolarAngleAxis PolarRadiusAxis Radar]]))\n\n\n(log/info \"ui-component.atom.chart.radar-chart\")\n\n\n(def source-code '[:> RadarChart {:width 400 :height 400 :outerRadius \"75%\" :data @data}\n                   (utils/non-gridded-chart-components component-id)\n\n                   [:> PolarGrid]\n                   [:> PolarAngleAxis {:dataKey :subject}]\n                   [:> PolarRadiusAxis {:angle \"30\" :domain [0, 150]}]\n                   [:> Radar {:name        \"Mark\"\n                              :dataKey     :A\n                              :fill        \"#8884d8\"\n                              :stroke      \"#8884d8\"\n                              :fillOpacity 0.5}]])\n\n\n(def sample-data example-data/meta-tabular-data)\n(def sample-config-data example-data/tabular-column-config-data)\n(def random-data example-data/random-meta-positive-tabular-data)\n\n\n(defn- get-range-across-fields [data]\n  (let [source-data (get-in @data [:data])\n        all-values  (->> (get-in @data [:metadata :fields])\n                      (filter (fn [[k v]] (= :number v)))\n                      keys\n                      (map-indexed (fn [idx a] (map #(a %) source-data)))\n                      (reduce into)\n                      (distinct))\n        domainMax   (apply max all-values)]\n    ;(log/info \"domain max = \" domainMax)\n\n    {:domain [0 domainMax]}))\n\n\n(defn- get-field-range [field data]\n  (let [source-data (get-in @data [:data])\n        domainMin   (reduce min (map #(field %) source-data))\n        domainMax   (reduce max (map #(field %) source-data))]\n    (if (= domainMin domainMax)\n      {:domain [0 domainMax]}\n      {:domain [domainMin domainMax]})))\n\n\n(defn- domain-range [data]\n  (let [domainField (get-in @data [:metadata :domain])]\n    (if (nil? domainField)\n      (get-range-across-fields data)\n      (get-field-range domainField data))))\n\n\n(defn local-config\n  \"provides both the definition and the initial default values for various properties that\n  allow user to customize the visualization of the chart.\n\n  ---\n\n   - data : (atom) atom containing the data and metadata for this chart\n\n> See Also:\n>\n> [Recharts/line-chart](https://recharts.org/en-US/api/LineChart)\n> [tabular-data]()\n  \"\n  [data]\n  ;(log/info \"local-config\" data)\n  (let [ret (merge (domain-range data)\n              (->> (get-in @data [:metadata :fields])\n                (filter (fn [[k v]] (= :number v)))\n                keys\n                (map-indexed (fn [idx a]\n                               {a {:include     true\n                                   :name        a\n                                   :fill        (color/get-color idx)\n                                   :stroke      (color/get-color idx)\n                                   :fillOpacity 0.6}}))\n                (into {})))]\n    ;(log/info \"local-config\" ret)\n    ret))\n\n\n(defn config\n  \"constructs the configuration panel for the chart's configurable properties. This is specific to\n  this being a radar-chart component (see [[local-config]]).\n\n  Merges together the configuration needed for:\n\n  1. radar charts\n  2. pub/sub between components of a container\n  3. `default-config` for all Rechart-based types\n  4. the `tab-panel` for view/edit configuration properties and data\n  5. sets properties of the default-config (local config properties are just set inside [[local-config]])\n  6. sets meta-data for properties this component publishes (`:pub`) or subscribes (`:sub`)\n\n  ---\n\n  - component-id : (string) unique id of the chart\n  - data : (atom) metadata wrapped data  to display\n  \"\n  [component-id data]\n  ;(log/info \"configgg : \" @data)\n  (-> ui-utils/default-pub-sub\n    (merge\n      utils/default-config\n      {:tab-panel {:value     (keyword component-id \"config\")\n                   :data-path [:containers (keyword component-id) :tab-panel]}}\n\n      (local-config data))\n    (assoc-in [:fullMark :include] false)))\n\n\n(defn- radar-config [component-id label path position]\n  ;(log/info \"radar-config\" component-id label path position)\n  [rc/v-box :src (rc/at)\n   :gap \"5px\"\n   :children [[utils/boolean-config component-id label (conj path :include)]\n              [utils/color-config component-id \":fill\" (conj path :fill) position]\n              [utils/color-config component-id \":stroke\" (conj path :stroke) position]\n              [utils/slider-config component-id 0 1 0.1 (conj path :fillOpacity)]]])\n\n\n(defn- make-radar-config [component-id data]\n  ;(log/info \"make-radar-config\" @data)\n  (let [ret (->> (get-in @data [:metadata :fields])\n              (filter (fn [[k v]] (= :number v)))\n              keys\n              (map-indexed (fn [idx a]\n                             ^{:key (str \"radar-config-\" a)}\n                             [radar-config component-id a [a] :below-right]))\n              (into []))]\n\n    ;(log/info \"make-radar-config\" ret)\n    ret))\n\n\n(defn config-panel\n  \"the panel of configuration controls\n\n  ---\n\n  - data : (atom) data to display (may be used by the standard configuration components for thins like axes, etc.\\n  - config : (atom) holds all the configuration settings made by the user\n  \"\n  [data component-id]\n  ;(log/info \"radar config panel\")\n\n  [rc/v-box :src (rc/at)\n   :gap \"10px\"\n   :width \"100%\"\n   :height \"100%\"\n   :style {:padding          \"15px\"\n           :border-top       \"1px solid #DDD\"\n           :background-color \"#f7f7f7\"}\n   :children [;[utils/non-gridded-chart-config component-id]\n              ;[rc/line :src (rc/at) :size \"2px\"]\n              [rc/h-box :src (rc/at)\n               :width \"100%\"\n               :height \"100%\"\n               :style ui-utils/h-wrap\n               :gap \"10px\"\n               :children (make-radar-config component-id data)]]])\n\n\n(defn- make-radar-display [data subscriptions isAnimationActive?]\n  ;(log/info \"make-radar-display\" data \"//\" subscriptions)\n  (let [ret (->> (get-in data [:metadata :fields])\n              (filter (fn [[_ v]] (= :number v)))\n              keys\n              (map (fn [a]\n                     (if (ui-utils/resolve-sub subscriptions [a :include])\n                       [:> Radar {:name        (ui-utils/resolve-sub subscriptions [a :name])\n                                  :dataKey     a\n                                  :fill        (ui-utils/resolve-sub subscriptions [a :fill])\n                                  :stroke      (ui-utils/resolve-sub subscriptions [a :stroke])\n                                  :fillOpacity (ui-utils/resolve-sub subscriptions [a :fillOpacity])}]\n                       [])))\n              (remove empty?)\n              (into [:<>]))]\n    ;(log/info \"make-radar-display (ret)\" ret)\n    ret))\n\n\n(defn- component*\n  \"the chart to draw, taking cues from the settings of the configuration panel\n\n  ---\n\n  - data : (atom) any data used by the component's ui\n  - component-id : (string) unique identifier for this specific widget\n  \"\n  [& {:keys [data component-id container-id\n             subscriptions isAnimationActive?]\n      :as params}]\n\n  ;(log/info \"radar component*\" data \" // \" subscriptions)\n\n  (let [d (if (empty? data) [] (get data :data))\n        domain (ui-utils/resolve-sub subscriptions [:domain])]\n\n    [:> ResponsiveContainer\n     [:> RadarChart {:data d}\n      [:> PolarGrid]\n      [:> PolarAngleAxis {:dataKey :name}]\n      [:> PolarRadiusAxis {:angle 60 :domain (or domain [0 10000])}]\n\n      ;(utils/non-gridded-chart-components component-id {})\n\n      (make-radar-display data subscriptions isAnimationActive?)]]))\n\n\n(defn component [& {:keys [component-id] :as params}]\n\n  ;(log/info \"Radar component-2\" params)\n\n  (let [input-params (assoc params :component* component*\n                                   :component-panel wrapper/component-panel\n                                   :config config\n                                   :local-config local-config)]\n\n    (reduce into [wrapper/base-chart] (seq input-params))))\n\n\n(def meta-data {:rechart/radar {:component component\n                                ;:configurable-component configurable-component\n                                :ports     {:data   :port/sink\n                                            :config :port/sink}}})\n\n\n(rf/dispatch-sync [:register-meta meta-data])\n\n\n\n\n\n\n; explore the data fields\n(comment\n  (def domainField :fullMark)\n  (def source-data (get-in sample-data [:data]))\n  (reduce max (map #(domainField %) source-data))\n  (let [source-data (get-in @sample-data [:data])])\n\n  (def fields (get-in @sample-data [:metadata :fields]))\n  (filter (fn [[k v]] (= :number v)) fields)\n  keys\n\n\n  (def numValues nil)\n  (concat numValues '(1 2 3))\n  (concat numValues '(3 4 5))\n\n  (def source-data (get-in @sample-data [:data]))\n  (->> (get-in @sample-data [:metadata :fields])\n    (filter (fn [[k v]] (= :number v)))\n    keys\n    (map-indexed (fn [idx a] (map #(a %) source-data)))\n    (reduce into)\n    (distinct))\n\n  (def fieldNames (get-in @sample-data [:metadata :fields]))\n  (def numFieldsOnly (filter (fn [[k v]] (= :number v)) fieldNames))\n  (def keysOnly (keys numFieldsOnly))\n  (def res (map-indexed (fn [idx a] (a source-data)) keysOnly))\n  ())\n\n\n; compute the range for the domain (scale of the axis)\n(comment\n  (def data sample-data)\n  (def source-data (get-in @data [:data]))\n  (def all-values (->> (get-in @data [:metadata :fields])\n                    (filter (fn [[k v]] (= :number v)))\n                    keys\n                    (map-indexed (fn [idx a] (map #(a %) source-data)))\n                    (reduce into)\n                    (distinct)))\n  (def domainMin (apply min all-values))\n  (def domainMax (apply max all-values))\n\n  (->> (get-in @data [:metadata :fields])\n    (filter (fn [[k v]] (= :number v)))\n    keys\n    (map-indexed (fn [idx a] (map #(a %) source-data)))\n    (reduce into)\n    (distinct))\n  ())\n\n\n; defs for repl testing\n(comment\n  (def component-id \"radar-chart-demo/radar-chart\")\n  (def data sample-data)\n  (def subscriptions (ui-utils/build-subs component-id (local-config data)))\n  ())\n\n\n"]}