{"version":3,"sources":["ui_component/atom/resium/globe.cljs"],"mappings":"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","names":["taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","ui-component.atom.resium.globe/sample-data","ui-component.utils.helpers/component-id","ui-component.utils.bounding-box/make-bounding-box","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","ui-component.atom.resium.globe/globe","p__59411","map__59412","cljs.core/--destructure-map","cljs.core.get","seq59410","self__4852__auto__","cljs.core/seq","shapes","current-time","component-id","container-id","js/shadow.js.shim.module$cesium.Ion","s","ui-component.utils.helpers/resolve-value","t","js/shadow.js.shim.module$resium.Viewer","js/shadow.js.shim.module$resium.Globe","js/shadow.js.shim.module$resium.Clock","js/shadow.js.shim.module$cesium.JulianDate","or__4253__auto__","cljs.core/deref","cljs-time.coerce/to-date","cljs-time.core/now","cljs.core.into","cljs.core.doall","cljs.core.map","ui-component.atom.resium.shape/make-shape","ui-component.atom.resium.globe/meta-data","re-frame.core/dispatch-sync"],"sourcesContent":["(ns ui-component.atom.resium.globe\n  (:require [\"resium\" :refer (Viewer Globe Clock)]\n            [\"cesium\" :refer (Cartesian3 Ion JulianDate)]\n            [ui-component.atom.resium.shape :as s]\n            [ui-component.utils.helpers :as h]\n            [ui-component.utils.bounding-box :as bound]\n            [taoensso.timbre :as log]\n            [cljs-time.coerce :as coerce]\n            [cljs-time.core :as cljs-time]\n            [re-frame.core :as rf]))\n\n\n(log/info \"ui-component.atom.resium.globe\")\n\n\n(def sample-data [\n                  {:shape      :shape/polygon :id \"square\"\n                   :locations [[30.0 -130.0] [30.0 -100.0]\n                               [0.0 -100.0] [0.0 -130.0]]\n                   :fill-color [1 0 0 0.3] :outline-color [1 0 0 1] :width 2}\n                  {:shape      :shape/polygon :id \"5-sided\"\n                   :locations [[37 -115.0] [32.0 -115.0] [33.0 -107.0]\n                               [31.0 -102.0] [35.0 -102.0] [37.0 -115.0]]\n                   :fill-color [1 0 0 0.6] :outline-color [1 0 0 1] :width 2}\n                  {:shape :shape/polyline :id \"line1\" :locations [[35 -75] [35 -125]]\n                   :outline-color [1 1 0 1.0] :width 5}\n                  {:shape      :shape/circle :id \"circle\"\n                   :location [28.538336 -81.379234] :radius 1000000\n                   :fill-color [0 1 0 0.5] :outline-color [1 1 1 1] :width 2 :height 2}\n                  {:shape :shape/polyline :id \"line2\" :locations [[22 -55] [45 -105] [36 -125.7]]\n                   :outline-color [1 0.5 0.78 1.0] :width 5}\n                  {:shape :shape/label :id \"orlando\" :location [28.538336 -81.379234] :label \"Orlando\"\n                   :fill-color [1 0.9 0.0 1.0] :outline-color [1 0.9 0.0 1.0] :width 1}\n\n                  {:shape :shape/image, :id \"image-15\",\n                   :url   \"data/a.png\",\n                   :locations [[22.229767 -93.016231]\n                               [33.344622 -95.433292]\n                               [33.082839 -83.694864]\n                               [22.074653 -82.723547]]}\n\n                  {:shape :shape/image\n                   :id (h/component-id)\n                   :url \"images/lightning/Lightning3png.png\"\n                   :bounding-box (bound/make-bounding-box -26.076 -85.876 0.5)}\n                  {:shape :shape/image\n                   :id (h/component-id)\n                   :url \"images/lightning/Lightning3png.png\"\n                   :bounding-box (bound/make-bounding-box -25.9087 -84.9876 0.5)}\n                  {:shape :shape/image\n                   :id (h/component-id)\n                   :url \"images/lightning/Lightning3png.png\"\n                   :bounding-box (bound/make-bounding-box -25.0987 -86.09 0.5)}\n                  {:shape :shape/image\n                   :id (h/component-id)\n                   :url \"images/lightning/Lightning3png.png\"\n                   :bounding-box (bound/make-bounding-box -26 -85 0.5)}])\n\n\n(defn globe [& {:keys [shapes current-time component-id container-id]}]\n  ;(log/info \"resium Globe\" shapes)\n\n  (set! (.-defaultAccessToken Ion) \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJkYWNiMDFiNy1iYzFiLTQ2NDMtYmJlNC0zMjRiNTIzMjM5ODQiLCJpZCI6ODQ1MDAsImlhdCI6MTY0NjMyODY1Mn0.Nax1YEWqQzM_eOqHPhblhU9TO9U42VJn4wCcolAkuhM\")\n\n  (let [s (h/resolve-value shapes)\n        t (h/resolve-value current-time)]\n    ;(log/info \"globe OUTER\" shapes component-id)\n    (fn []\n      [:> Viewer {:style {:width \"100%\" :height \"100%\"}}\n       [:> Globe {:enableLighting true}\n        [:> Clock {:currentTime (.fromDate JulianDate (or @t (coerce/to-date (cljs-time/now))))}]\n        (into [:<>]\n          (doall (map s/make-shape @s)))]])))\n\n\n\n(def meta-data {:r/globe {:component globe\n                          :ports     {:shapes :port/sink\n                                      :current-time :port/sink}}})\n\n\n(rf/dispatch-sync [:register-meta meta-data])\n\n\n(comment\n  (def shapes sample-data)\n\n  (s/make-shape (first shapes))\n\n\n  [:> Globe\n   (into [:<>]\n     (doall (map-indexed (fn [idx shape]\n                           ^{:keys idx}(make-shape shape))\n              shapes)))]\n\n  (def v [:a :b :c])\n\n  (v 0)\n\n  {:a 1 :b 2}\n\n  (defn lister [items]\n        [:ul\n         (for [item items]\n           ^{:key item} [:li \"Item \" item])])\n\n  (defn lister-user []\n          [:div\n           \"Here is a list:\"\n           [lister (range 3)]])\n\n\n  ())"]}