{"version":3,"sources":["rccst_ui_component/molecule/example/composite/coverage_plan.cljs"],"mappings":"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","names":["taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","rccst-ui-component.molecule.example.composite.coverage-plan/ww-example","container-id","logged-in?","re_frame.core.subscribe","pub-sub-started?","cljs.core/deref","cljs.core/not","re-frame.core/dispatch","and__4251__auto__","woolybear.ad.demo.src.catalog.utils.demo","woolybear.ad.layout/frame","ui-component.molecule.grid-container/component","reagent.core.atom","ui-component.molecule.composite.coverage-plan/ui-definition","ui_component.utils.helpers.path__GT_keyword","re-com.core/alert-box","js/goog.DEBUG","rccst-ui-component.molecule.example.composite.coverage-plan/r-example","cljs.core/assoc-in","rccst-ui-component.molecule.example.composite.coverage-plan/twoD-example"],"sourcesContent":["(ns rccst-ui-component.molecule.example.composite.coverage-plan\n  (:require [subs :as subs]\n            [ui-component.molecule.composite.coverage-plan :as coverage-plan]\n            [ui-component.molecule.grid-container :as grid]\n            [ui-component.utils.helpers :as h]\n            [re-com.core :as rc]\n            [re-frame.core :as re-frame]\n            [reagent.core :as r]\n            [taoensso.timbre :as log]\n            [woolybear.ad.demo.src.catalog.utils :as acu]\n            [woolybear.ad.layout :as layout]))\n\n\n(log/info \"rccst-ui-component.molecule.example.composite.coverage-plan\")\n\n\n(defn ww-example []\n  (let [container-id     \"coverage-plan-demo-ww\"\n        logged-in?       (re-frame/subscribe [:subs/logged-in?])\n        pub-sub-started? (re-frame/subscribe [:bhui.subs/pub-sub-started?])]\n\n    (if (not @logged-in?)\n      (re-frame/dispatch [:events/login \"test-user\" \"test-pwd\"]))\n\n    (fn []\n      (if (and @logged-in? @pub-sub-started?)\n        (acu/demo \"Coverage Plan using a Grid for layout (Worldwind globe) WIP\"\n          \"This experiment uses a GRID to layout the various UI components that make up the 'composite'.\n          Constructs 'coverage-plan', drawing the layout from `:grid-layout` which provides X/Y/W/H for each\n          component on the widget's internal grid.\"\n          [layout/frame\n           ;;\n           ;; NOTE: the :height MUST be specified here since the ResponsiveContainer down in bowels of the chart needs a height\n           ;; in order to actually draw the Recharts components. just saying \"100%\" doesn't work, since the\n           ;; that really means \"be as big as you need\" and ResponsiveContainer then doesn't know what to do.\n           ;;\n           [:div {:style {:width \"100%\" :min-height \"400px\"}}\n            [grid/component\n             :data (r/atom coverage-plan/ui-definition)\n             :component-id (h/path->keyword container-id \"grid-widget\")\n             :container-id container-id\n             :resizable true\n             :tools true]]])\n        (acu/demo\n          \"Coverage Plan\"\n          [rc/alert-box :src (rc/at)\n           :alert-type :info\n           :heading \"Waiting for (demo) Log-in\"])))))\n\n\n(defn r-example []\n  (let [container-id     \"coverage-plan-demo-r\"\n        logged-in?       (re-frame/subscribe [:subs/logged-in?])\n        pub-sub-started? (re-frame/subscribe [:bhui.subs/pub-sub-started?])]\n\n    (if (not @logged-in?)\n      (re-frame/dispatch [:events/login \"test-user\" \"test-pwd\"]))\n\n    (fn []\n      (if (and @logged-in? @pub-sub-started?)\n        (acu/demo \"Coverage Plan using a Grid for layout (Resium globe)\"\n          \"This experiment uses a GRID to layout the various UI components that make up the 'composite'.  Constructs\n          'coverage-plan', drawing the layout from `:grid-layout` which provides X/Y/W/H for each component\n          on the widget's internal grid.\n\n> This example differs from the Worldwind version only by replacing the `:ww/globe` reference with `:r/globe`\n\"\n          [layout/frame\n           ;;\n           ;; NOTE: the :height MUST be specified here since the ResponsiveContainer down in bowels of the chart needs a height\n           ;; in order to actually draw the Recharts components. just saying \"100%\" doesn't work, since the\n           ;; that really means \"be as big as you need\" and ResponsiveContainer then doesn't know what to do.\n           ;;\n           [:div {:style {:width \"100%\" :min-height \"400px\"}}\n            [grid/component\n             :data (r/atom\n                     (assoc-in coverage-plan/ui-definition\n                       [:components :ui/globe :name] :r/globe))\n             :component-id (h/path->keyword container-id \"grid-widget\")\n             :container-id container-id\n             :resizable true\n             :tools true]]])\n        (acu/demo\n          \"Coverage Plan\"\n          [rc/alert-box :src (rc/at)\n           :alert-type :info\n           :heading \"Waiting for (demo) Log-in\"])))))\n\n\n(defn twoD-example []\n  (let [container-id     \"coverage-plan-demo-2D\"\n        logged-in?       (re-frame/subscribe [:subs/logged-in?])\n        pub-sub-started? (re-frame/subscribe [:bhui.subs/pub-sub-started?])]\n\n    (if (not @logged-in?)\n      (re-frame/dispatch [:events/login \"test-user\" \"test-pwd\"]))\n\n    (fn []\n      (if (and @logged-in? @pub-sub-started?)\n        (acu/demo \"Coverage Plan using a Grid for layout (Leaflet globe)\"\n          \"This experiment uses a GRID to layout the various UI components that make up the 'composite'.  Constructs\n          'coverage-plan', drawing the layout from `:grid-layout` which provides X/Y/W/H for each component\n          on the widget's internal grid.\n\n> This example differs from the Worldwind version only by replacing the `:ww/globe` reference with `:l/globe`\n\"\n          [layout/frame\n           ;;\n           ;; NOTE: the :height MUST be specified here since the ResponsiveContainer down in bowels of the chart needs a height\n           ;; in order to actually draw the Recharts components. just saying \"100%\" doesn't work, since the\n           ;; that really means \"be as big as you need\" and ResponsiveContainer then doesn't know what to do.\n           ;;\n           [:div {:style {:width \"100%\" :min-height \"400px\"}}\n            [grid/component\n             :data (r/atom\n                     (assoc-in coverage-plan/ui-definition\n                       [:components :ui/globe :name] :l/globe))\n             :component-id (h/path->keyword container-id \"grid-widget\")\n             :container-id container-id\n             :resizable true\n             :tools true]]])\n        (acu/demo\n          \"Coverage Plan\"\n          [rc/alert-box :src (rc/at)\n           :alert-type :info\n           :heading \"Waiting for (demo) Log-in\"])))))\n\n\n(comment\n  (def logged-in? (re-frame/subscribe [:subs/logged-in?]))\n\n  (if (not @logged-in?)\n    (re-frame/dispatch [:events/login \"test-user\" \"test-pwd\"]))\n\n  ())\n\n"]}