{"version":3,"sources":["ui_component/atom/chart/area_chart.cljs"],"mappings":"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","names":["taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","ui-component.atom.chart.area-chart/source-code","ui-component.atom.chart.area-chart/sample-data","ui-component.utils.example-data/meta-tabular-data","ui-component.atom.chart.area-chart/sample-config-data","ui-component.utils.example-data/tabular-column-config-data","ui-component.atom.chart.area-chart/random-data","ui-component.utils.example-data/random-meta-tabular-data","ui-component.atom.chart.area-chart/local-config","data","ret","cljs.core.merge","cljs.core/deref","cljs.core.get_in","cljs.core.filter","p__58602","vec__58603","cljs.core.nth","k","v","cljs.core._EQ_","cljs.core/keys","cljs.core.map_indexed","idx","a","ui-component.utils.color/get-color","cljs.core.into","ui-component.atom.chart.area-chart/config","component-id","ui-component.utils/default-pub-sub","ui-component.atom.chart.utils/default-config","cljs.core.keyword","cljs.core/assoc-in","ui-component.atom.chart.area-chart/area-config","label","path","position","re-com.core/v-box","js/goog.DEBUG","ui-component.atom.chart.utils/boolean-config","cljs.core.conj","ui-component.atom.chart.utils/color-config","ui-component.atom.chart.utils/text-config","ui-component.atom.chart.area-chart/make-area-config","p__58607","vec__58608","ui-component.atom.chart.area-chart/config-panel","ui-component.atom.chart.utils/standard-chart-config","re-com.core/line","re-com.core/h-box","ui-component.utils/h-wrap","ui-component.atom.chart.area-chart/make-area-display","subscriptions","isAnimationActive?","p__58611","vec__58613","_","cljs.core.map","ui-component.utils/resolve-sub","js/shadow.js.shim.module$recharts.Area","cljs.core/seq","cljs.core.remove","cljs.core/empty?","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","ui-component.atom.chart.area-chart/component*","p__58617","map__58618","cljs.core/--destructure-map","cljs.core.get","seq58616","self__4852__auto__","container-id","params","d","js/shadow.js.shim.module$recharts.ResponsiveContainer","js/shadow.js.shim.module$recharts.AreaChart","ui-component.atom.chart.utils/standard-chart-components","js/shadow.js.shim.module$recharts.Brush","ui-component.atom.chart.area-chart/component","p__58620","map__58621","seq58619","input-params","cljs.core.assoc","ui-component.atom.chart.wrapper-2/component-panel","cljs.core.reduce","cljs.core/into","ui-component.atom.chart.wrapper-2/base-chart","ui-component.atom.chart.area-chart/meta-data","re-frame.core/dispatch-sync"],"sourcesContent":["(ns ui-component.atom.chart.area-chart\n  (:require [ui-component.atom.chart.utils :as utils]\n            [ui-component.atom.re-com.configure-toggle :as ct]\n            [ui-component.utils :as ui-utils]\n            [ui-component.utils.color :as color]\n            [ui-component.utils.example-data :as example-data]\n            [ui-component.utils.helpers :as h]\n            [ui-component.utils.locals :as l]\n            [ui-component.atom.chart.wrapper-2 :as wrapper]\n            [re-com.core :as rc]\n            [reagent.core :as r]\n            [re-frame.core :as rf]\n            [taoensso.timbre :as log]\n            [woolybear.ad.layout :as layout]\n            [\"recharts\" :refer [ResponsiveContainer AreaChart Area Brush]]))\n\n(log/info \"ui-component.atom.chart.area-chart\")\n\n\n(def source-code '[:> AreaChart {:data d}\n                   (utils/standard-chart-components component-id {})\n                   [:> Area (merge {:type              \"monotone\" :dataKey a\n                                    :isAnimationActive @isAnimationActive?\n                                    :stroke            (ui-utils/resolve-sub subscriptions [a :stroke])\n                                    :fill              (ui-utils/resolve-sub subscriptions [a :fill])}\n                                   (when (seq (ui-utils/resolve-sub subscriptions [a :stackId]))\n                                     {:stackId (ui-utils/resolve-sub subscriptions [a :stackId])}))]])\n\n\n(def sample-data example-data/meta-tabular-data)\n(def sample-config-data example-data/tabular-column-config-data)\n(def random-data example-data/random-meta-tabular-data)\n\n\n(defn local-config [data]\n\n  ;(log/info \"local-config\" @data)\n\n  (let [ret (merge\n              {:brush false}\n              (->> (get-in @data [:metadata :fields])\n                   (filter (fn [[k v]] (= :number v)))\n                   keys\n                   (map-indexed (fn [idx a]\n                                  {a {:include true\n                                      :fill    (color/get-color idx)\n                                      :stroke  (color/get-color idx)\n                                      :stackId \"\"}}))\n                   (into {})))]\n    ;(log/info \"local-config\" ret)\n    ret))\n\n\n(defn config [component-id data]\n  (-> ui-utils/default-pub-sub\n      (merge\n        utils/default-config\n        {:tab-panel {:value     (keyword component-id \"config\")\n                     :data-path [:containers (keyword component-id) :tab-panel]}}\n        (local-config data))\n      (assoc-in [:x-axis :dataKey] :name)))\n\n\n(defn- area-config [component-id label path position]\n  [rc/v-box :src (rc/at)\n   :gap \"5px\"\n   :children [[utils/boolean-config component-id label (conj path :include)]\n              [utils/color-config component-id \":fill\" (conj path :fill) position]\n              [utils/color-config component-id \":stroke\" (conj path :stroke) :right-above]\n              [utils/text-config component-id \":stackId\" (conj path :stackId)]]])\n\n\n(defn- make-area-config [component-id data]\n  ;(log/info \"make-area-config\" component-id \"//\" @data)\n\n  (->> (get-in @data [:metadata :fields])\n       (filter (fn [[k v]] (= :number v)))\n       keys\n       (map-indexed (fn [idx a]\n                      [area-config component-id a [a] :above-right]))\n       (into [])))\n\n\n(defn config-panel [data component-id]\n  ;(log/info \"config-panel\" component-id \"//\" @data)\n\n  [rc/v-box :src (rc/at)\n   :gap \"10px\"\n   :width \"100%\"\n   :height \"100%\"\n   :style {:padding          \"5px\"\n           :border-top       \"1px solid #DDD\"\n           :background-color \"#f7f7f7\"}\n   :children [[utils/standard-chart-config data component-id]\n              [rc/line :src (rc/at) :size \"2px\"]\n              [rc/h-box :src (rc/at)\n               :width \"100%\"\n               :height \"100%\"\n               :style ui-utils/h-wrap\n               :gap \"10px\"\n               :children (make-area-config component-id data)]\n              [rc/line :src (rc/at) :size \"2px\"]\n              [utils/boolean-config component-id \":brush?\" [:brush]]]])\n\n\n(defn- make-area-display [data subscriptions isAnimationActive?]\n  ;(log/info \"make-area-display\" data \"//\" subscriptions)\n\n  (let [ret (->> (get-in data [:metadata :fields])\n                 (filter (fn [[_ v]] (= :number v)))\n                 keys\n                 (map (fn [a]\n                        (if (ui-utils/resolve-sub subscriptions [a :include])\n                          [:> Area (merge {:type              \"monotone\" :dataKey a\n                                           :isAnimationActive @isAnimationActive?\n                                           :stroke            (ui-utils/resolve-sub subscriptions [a :stroke])\n                                           :fill              (ui-utils/resolve-sub subscriptions [a :fill])}\n                                          (when (seq (ui-utils/resolve-sub subscriptions [a :stackId]))\n                                            {:stackId (ui-utils/resolve-sub subscriptions [a :stackId])}))]\n                          [])))\n                 (remove empty?)\n                 (into [:<>]))]\n    ;(log/info \"ret\" ret)\n\n    ret))\n\n\n(defn- component* [& {:keys [data component-id container-id\n                             subscriptions isAnimationActive?]\n                      :as   params}]\n  (let [d (if (empty? data) [] (get data :data))]\n\n    [:> ResponsiveContainer\n     [:> AreaChart {:data d}\n\n      (utils/standard-chart-components component-id {})\n\n      (when (ui-utils/resolve-sub subscriptions [:brush]) [:> Brush])\n\n      (make-area-display data subscriptions isAnimationActive?)]]))\n\n\n(defn component [& {:keys [component-id ] :as params}]\n\n  ;(log/info \"component-2\" params)\n\n  (let [input-params (assoc params :component* component*\n                                   :component-panel wrapper/component-panel\n                                   :config config\n                                   :local-config local-config)]\n\n    (reduce into [wrapper/base-chart] (seq input-params))))\n\n\n\n(def meta-data {:rechart/area {:component component\n                               ;:configurable-component configurable-component\n                               :ports     {:data   :port/sink\n                                           :config :port/sink}}})\n\n(rf/dispatch-sync [:register-meta meta-data])\n"]}