{"version":3,"sources":["rccst/db.cljs"],"mappings":";AAEA,sBAAA,2CAAA,qDAAA,QAAA,0DAAA,GAAA,iEAAA,MAAA,6EAAA,MAAA,sEAAA,2CAAA,0EAAA,2CAAA,iEAAA,qEAAA,uEAAA,2GAAA,sFAAA,yCAAA,4EAAA,2CAAA,iEAAA,qEAAA,uEAAA,2GAAA,sFAAA,yCAAA,qEAAA,2CAAA,iEAAA,qEAAA,uEAAA,2GAAA,sFAAA,yCAAA,gFAAA,2CAAA,iEAAA,qEAAA,uEAAA,2GAAA,sFAAA,iDAAA,2DAAA,5rFAAKA","names":["db/default-db"],"sourcesContent":["(ns db)\n\n(def default-db\n  {:name             \"RCCST\"\n   :version          \"\"\n   :logged-in?       false\n   :pub-sub-started? false\n\n   ; this data comes from the server upon successful login\n   ;\n   ; provides meta-data about all the data-services the server can provide for subscriptions\n   ;\n   ; need to know the \"name\" for the subscription vector (the keys), also provides\n   ;\n   ;    :source/returns - what kind of data is returned (vector? hash-map? integer?)\n   ;    :source/entity-contents - description of the contents of the collection that is returned\n   ;\n   :avail-sources {:source/coverages {:source/type :source/remote\n                                      :source/returns :source/vector-of-entity-meta-coc\n                                      :source/entity-contents []}\n                   :source/satellites {:source/type :source/remote\n                                       :source/returns :source/vector-of-entity-meta-coc\n                                       :source/entity-contents []}\n                   :source/targets {:source/type :source/remote\n                                    :source/returns :source/vector-of-entity-meta-coc\n                                    :source/entity-contents []}\n                   :source/measurements {:source/type :source/remote\n                                         :source/returns :source/vector-of-entity-meta-coc\n                                         :source/entity-contents []}}\n   :sources          {}})\n\n\n"]}