{"version":3,"sources":["ui_component/molecule/composite/with_fn.cljs"],"mappings":";AAMA,AAAAA,0DAAAC,mCAAA,qDAAA,0CAAA,KAAA,EAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA;GAAA,OAAA,KAAA,WAAA;AAGA,AAAKC,sDAAYC;AAGjB,sDAAA,AAAA,tDAAKC;AAgBL,2DAAA,mEAAAC,9HAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;WAAA,AAAAE,4CAAAF,eAAA,lEAAgCI;eAAhC,AAAAF,4CAAAF,eAAA,tEAAqCK;AAArC,AACE,8IAAA,vIAACC,2DACC,AAACC,gBAAMF,4GACHD,KACJ,WAAKI,EAAEC;AAAP,AACE,IAAMC,IAAE,AAAA,2FAAWF;IACbG,oHAAW,AAAA,wFAASD,9IACX,iJAAA,oGAAA,+CAAA,kDAAA,tVAACE,rDACD,qcAAA,sDAAA,2GAAA,yDAAA,/pBAACC;IACVC,WAAS,gDAAA,hDAACD,8CAAMH,4DAAUC;AAJhC,4QAOI,AAACI,4CAAI,WAAAC,nUAKL,4DAAA,mCAAA,wHAAA,hNAACH,qJAAmBC;AALf,AAAA,IAAAG,aAAAD;IAAAC,iBAAA,AAAAhB,4BAAAgB;UAAAA,NAA+BK;SAA/B,AAAApB,4CAAAe,eAAA,hEAAaC;SAAb,AAAAhB,4CAAAe,eAAA,hEAAgBE;SAAhB,AAAAjB,4CAAAe,eAAA,hEAAmBG;UAAnB,AAAAlB,4CAAAe,eAAA,jEAAsBI;AAAtB,kHACMC,rDACF,yDAAA,6HAAA,tLAACT,+GAAa,aAAA,ZAAG,CAAGK,KAAGC,yHACR,cAAA,bAAG,CAAGC,KAAGC,nTACxB,wUAAA,oGAAA,+CAAA,kDAAA,tgBAACT;sFANPJ,nFAEH,AAAA;;;AAQV,4BAAA,mFAAA,uEAAA,2CAAA,yFAAA,2CAAA,uHAAA,wDAAA,2CAAA,qDAAA,2DAAA,8DAAA,7uBAACe,maAA6EpB;AAI9E,wDAAA,2CAAA,kEAAA,2CAAA,iEAAA,2CAAA,qDAAA,kEAAA,qDAAA,+EAAA,mEAAA,2CAAA,oEAAA,2CAAA,qDAAA,kEAAA,qDAAA,kEAAA,mEAAA,2CAAA,6DAAA,2CAAA,qDAAA,kEAAA,qDAAA,6DAAA,wHAAA,uEAAA,2CAAA,qDAAA,kEAAA,qDAAA,+EAAA,6DAAA,2CAAA,qDAAA,4DAAA,qDAAA,yGAAA,uDAAA,2CAAA,6DAAA,2CAAA,qDAAA,2CAAA,oEAAA,qDAAA,6DAAA,qEAAA,6DAAA,2CAAA,8DAAA,2CAAA,uEAAA,qEAAA,uEAAA,2CAAA,qDAAA,2CAAA,iEAAA,6EAAA,mEAAA,mFAAA,2CAAA,gDAAA,oEAAA,+CAAA,IAAA,gDAAA,IAAA,8CAAA,KAAA,+CAAA,KAAA,yDAAA,aAAA,2CAAA,gDAAA,iEAAA,+CAAA,KAAA,gDAAA,IAAA,8CAAA,KAAA,+CAAA,KAAA,yDAAA,5+IAAKqB,6/CAK4E5B","names":["taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","ui-component.molecule.composite.with-fn/sample-data","ui-component.utils.example-data/meta-tabular-data","ui-component.molecule.composite.with-fn/source-code","p__61090","map__61091","cljs.core/--destructure-map","cljs.core.get","ui-component.molecule.composite.with-fn/compute-new-data","data","computed","re_frame.core.reg_sub","cljs.core/first","d","_","m","fields","cljs.core.dissoc","cljs.core.assoc","metadata","cljs.core.map","p__61092","map__61093","uv","pv","tv","amt","all","re-frame.core/dispatch-sync","ui-component.molecule.composite.with-fn/ui-definition"],"sourcesContent":["(ns ui-component.molecule.composite.with-fn\n  (:require [ui-component.utils.example-data :as example-data]\n            [re-frame.core :as re-frame]\n            [taoensso.timbre :as log]))\n\n\n(log/info \"ui-component.molecule.composite.with-fn\")\n\n\n(def sample-data example-data/meta-tabular-data)\n\n\n(def source-code '{:components  {:ui/bar-chart   {:type        :ui/component :name :rechart/bar\n                                                  :config-data []}\n                                 :ui/line-chart  {:type        :ui/component :name :rechart/line\n                                                  :config-data []}\n                                 :topic/data     {:type :source/local :name :topic/data :default sample-data}\n                                 :topic/computed {:type :source/local :name :topic/computed}\n                                 :fn/data-fn     {:type  :source/fn :name compute-new-data\n                                                  :ports {:data :port/sink :computed :port/source}}}\n                   :links       {:topic/data      {:data {:ui/line-chart :data\n                                                          :fn/data-fn    :data}}\n                                 :fn/data-fn      {:computed {:topic/computed :data}}\n                                 :topic/computed {:data {:ui/bar-chart :data}}}\n                   :grid-layout [{:i :ui/line-chart :x 0 :y 0 :w 10 :h 11 :static true}\n                                 {:i :ui/bar-chart :x 10 :y 0 :w 10 :h 11 :static true}]})\n\n\n(defn compute-new-data [{:keys [data computed]}]\n  (re-frame/reg-sub\n    (first computed)\n    :<- data\n    (fn [d _]\n      (let [m (:metadata d)\n            fields (-> (:fields m)\n                     (dissoc :uv :pv :tv :amt)\n                     (assoc :uv*pv :number :tv*amt :number))\n            metadata (assoc m :fields fields)]\n        (->> d\n          :data\n          (map (fn [{:keys [uv pv tv amt] :as all}]\n                 (-> all\n                   (assoc :uv*pv (/ (* uv pv) 1000)\n                          :tv*amt (/ (* tv amt) 1000))\n                   (dissoc :uv :pv :tv :amt))))\n          (assoc {} :metadata metadata :data))))))\n\n\n(re-frame/dispatch-sync [:register-meta {:with-fn/compute-new-data {:function compute-new-data\n                                                                    :ports {:data :port/sink :computed :port/source}}}])\n\n\n(def ui-definition\n  {:components  {:ui/pie-chart   {:type        :ui/component :name :rechart/colored-pie\n                                  :config-data {}}\n                 :ui/line-chart  {:type        :ui/component :name :rechart/line\n                                  :config-data {}}\n                 :topic/data     {:type :source/local :name :topic/data :default sample-data}\n                 :topic/computed {:type :source/local :name :topic/computed}\n                 :fn/data-fn     {:type  :source/fn :name :with-fn/compute-new-data}}\n   :links       {:topic/data      {:data {:ui/line-chart :data\n                                          :fn/data-fn    :data}}\n                 :fn/data-fn      {:computed {:topic/computed :data}}\n                 :topic/computed {:data {:ui/pie-chart :data}}}\n   :grid-layout [{:i :ui/line-chart :x 0 :y 0 :w 10 :h 11 :static true}\n                 {:i :ui/pie-chart :x 10 :y 0 :w 10 :h 11 :static true}]})\n\n"]}