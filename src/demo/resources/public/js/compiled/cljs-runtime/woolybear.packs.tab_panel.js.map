{"version":3,"sources":["woolybear/packs/tab_panel.cljs"],"mappings":"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","names":["var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","woolybear.packs.tab-panel/mk-tab-panel-data","p__70908","vec__70910","cljs.core.nth","seq70903","G__70904","cljs.core/first","cljs.core/next","self__4851__auto__","path-in-db","default-value","day8.re-frame.tracing/is-trace-enabled?","p__70918","vec__70919","+debux-dbg-opts+","day8.re-frame.debux.common.util/send-form!","result__64397__auto__","day8.re-frame.debux.common.util/send-trace!","e","e70922","p__70924","vec__70925","woolybear.packs.tab-panel/tab-panel-on-click-handler","db","_","data-path","new-value","cljs.core/assoc-in","cljs.core.conj","re_frame.core.reg_event_db","woolybear.tools.interceptors/throw-on-nil-db","cljs.spec.alpha/def-impl","cljs.spec.alpha/map-spec-impl","G__70928","cljs.core/map?","cljs.core/contains?","woolybear.packs.tab-panel/prep-buttons","child","cljs.core._EQ_","woolybear.ad.buttons/tab-button","vec__70938","seq__70939","cljs.core/seq","first__70940","tag","opts","more","cljs.core.ex_info","panel-id","or__4253__auto__","on-click","woolybear.ad.utils.append_to_dispatcher","woolybear.ad.utils/mk-dispatcher","cljs.core.assoc","cljs.core.into","woolybear.packs.tab-panel/tab-bar","seq70944","G__70945","children","map__70947","cljs.core/--destructure-map","cljs.core.get","subscribe-to-component-data","extra-classes","subscribe-to-classes","data-sub","woolybear.ad.utils/subscribe-to","cljs.core/deref","buttons","cljs.core.mapv","cljs.core.partial","data","current-panel-id","woolybear.ad.containers/bar","woolybear.ad.utils.css_PLUS_css","iter__4652__auto__","s__70949","cljs.core/LazySeq","temp__5753__auto__","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__70951","cljs.core/chunk-buffer","i__70950","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__70948","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","button","active?","woolybear.ad.utils/get-option","woolybear.ad.utils/add-option","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl","cljs.core/any?","cljs.spec.alpha/cat-impl","cljs.spec.alpha/rep+impl","cljs.core/keyword?","G__70962","woolybear.packs.tab-panel/sub-panel","seq70967","G__70968","map__70969","classes-sub","dynamic-classes","woolybear.ad.utils.css__GT_str","woolybear.ad.containers/v-scroll-pane","cljs.spec.alpha/maybe-impl","cljs.core/vector?","woolybear.packs.tab-panel/attach-subpanel","m","panel","temp__5751__auto__","id","cljs.core/second","G__70984","woolybear.packs.tab-panel/tab-panel","seq70986","G__70987","map__70988","subscribe-to-selected-tab","selected-tab-sub","panels","cljs.core.reduce","selected-tab","cljs.core/keys","current-panel","cljs.core/chunk-first"],"sourcesContent":["(ns woolybear.packs.tab-panel\n  (:require [re-frame.core :as re-frame]\n            [day8.re-frame.tracing :refer-macros [defn-traced]]\n            [cljs.spec.alpha :as s]\n            [woolybear.ad.utils :as adu]\n            [woolybear.ad.buttons :as buttons]\n            [woolybear.ad.containers :as containers]\n            [woolybear.tools.interceptors :as interceptors]))\n\n;;; Factory Functions\n\n(defn mk-tab-panel-data\n  \"\n  Set up the data map for a tab-panel/tab-bar combination.\n  \"\n  [path-in-db & [default-value]]\n  {:value     default-value\n   :data-path path-in-db})\n\n;;; Event Handlers\n;; Generic event handlers for \"self-aware\" components that know how\n;; to handle their own internal events.\n\n(defn-traced tab-panel-on-click-handler\n  \"Given the data path to the component data for the tab panel,\n  and a new value, update the component data with the new value.\"\n  [db [_ data-path new-value]]\n  (assoc-in db (conj data-path :value) new-value))\n\n(re-frame/reg-event-db\n  :tab-panel/on-click\n  [interceptors/throw-on-nil-db]\n  tab-panel-on-click-handler)\n\n\n;;; Views\n\n(s/def :tab-bar/options (s/keys :req-un [:ad/subscribe-to-component-data]\n                                :opt-un [:ad/extra-classes\n                                         :ad/subscribe-to-classes]))\n\n(defn prep-buttons\n  \"Used to map over the buttons in a tab bar, setting up the on-click dispatchers\n  appropriately.\"\n  [data-path child]\n  (if-not (= (first child) buttons/tab-button)\n    child                     ;; if not a tab-button, just pass thru\n    (let [[tag opts & more] child\n          _ (if-not (map? opts)\n              (throw (ex-info \"Missing opts map on tab button\" child)))\n          panel-id (or (:panel-id opts)\n                       (throw (ex-info \"Missing panel-id on tab button\" child)))\n          on-click (:on-click child)\n          on-click (if on-click\n                     (adu/append-to-dispatcher on-click data-path panel-id)\n                     [:tab-panel/on-click data-path panel-id])\n          on-click (adu/mk-dispatcher on-click)\n          opts (assoc opts :on-click on-click)]\n      (into [tag opts] more))))\n\n(defn tab-bar\n  \"\n  A component used with a tab-panel to display the row of tabs/buttons above\n  the panel.\n  \"\n  [opts & children]\n  (let [{:keys [subscribe-to-component-data extra-classes subscribe-to-classes]} opts\n        data-sub (adu/subscribe-to subscribe-to-component-data)\n        ;; NOTE subscribe-to-classes just gets passed through to the containers/bar component for rendering\n        data-path (:data-path @data-sub)\n        buttons (mapv (partial prep-buttons data-path) children)]\n    (fn [_ & _]\n      (let [data @data-sub\n            current-panel-id (:value data)]\n        (into [containers/bar {:extra-classes           (adu/css+css :wb-tab-bar extra-classes)\n                               :ad/subscribe-to-classes subscribe-to-classes}]\n              (for [button buttons :let [active? (= current-panel-id\n                                                    (adu/get-option button :panel-id))]]\n                (if active?\n                  ^{:key (str \"tab-bar-button-\" (adu/get-option :key button) \"-\" active?)}\n                  (adu/add-option button :active? true)\n                  button)))))))\n\n(s/fdef tab-bar\n  :args (s/cat :opts :tab-bar/options\n               :children (s/+ any?)))\n\n(s/def :tab-sub-panel/panel-id keyword?)\n(s/def :tab-sub-panel/options (s/keys :req-un [:tab-sub-panel/panel-id]\n                                      :opt-un [:ad/extra-classes\n                                               :ad/subscribe-to-classes]))\n\n(defn sub-panel\n  \"\n  Child component to be used inside a tab-panel. The `opts` argument must contain\n  a :panel-id key whose value is used to distinguish this sub-panel from other\n  sub-panels in the same tab-panel. Also accepts the standard options for extra-events\n  and subscribe-to-events.\n  \"\n  [opts & _]\n  ;; NOTE: the :panel-id value is not used by the sub-panel component directly;\n  ;; it is managed by the parent tab-panel.\n  (let [{:keys [extra-classes subscribe-to-classes]} opts\n        classes-sub (adu/subscribe-to subscribe-to-classes)]\n    (fn [_ & children]\n      (let [dynamic-classes @classes-sub]\n        [:div {\n               :class (adu/css->str :wb-tab-sub-panel\n                                    extra-classes\n                                    dynamic-classes)}\n         (into [containers/v-scroll-pane {:height \"100%\"}]\n               children)]))))\n\n(s/fdef sub-panel\n  :args (s/cat :opts (s/? :tab-sub-panel/options)\n               :children (s/+ any?))\n  :ret vector?)\n\n(defn- attach-subpanel\n  \"Internal reducing panel used to add sub-panels to a map keyed by :panel-id\"\n  [m panel]\n  (if-not (= (first panel) sub-panel)\n    (throw (ex-info \"All children of a tab-panel must be sub-panels\" panel)))\n  (if-let [id (:panel-id (second panel))]\n    (assoc m id panel)\n    (throw (ex-info \"Missing :panel-id in sub-panel\" panel))))\n\n(s/def :tab-panel/subscribe-to-selected-tab :ad/subscription)\n(s/def :tab-panel/options (s/keys :req-un [:tab-panel/subscribe-to-selected-tab]\n                                  :opt-un [:ad/extra-classes\n                                           :ad/subscribe-to-classes]))\n\n(defn tab-panel\n  \"\n  A panel component that contains multiple panels, only one of which is visible at any given\n  time. Takes the standard :extra-classes and :subscribe-to-classes keys, plus a specific\n  :subscribe-to-selected-tab key used to select the sub-panel to display. Each sub-panel must\n  have a :panel-id key whose value is unique relative to other sub-panels in the same tab-panel.\n  Setting the :subscribe-to-selected-tab subscription value to this :panel-id key will cause\n  that sub-panel to be the one that is displayed in the tab panel.\n  \"\n  [opts & children]\n  (let [{:keys [extra-classes subscribe-to-classes\n                subscribe-to-selected-tab]} opts\n        classes-sub (adu/subscribe-to subscribe-to-classes)\n        selected-tab-sub (adu/subscribe-to subscribe-to-selected-tab)\n        panels (reduce attach-subpanel {} children)]\n\n    (fn [_ & _]\n      (let [dynamic-classes @classes-sub\n            ;; If selected-tab-sub returns a nil, use arbitrary key\n            selected-tab (or @selected-tab-sub\n                             (first (keys panels)))\n            current-panel (get panels selected-tab)]\n        [:div {:class (adu/css->str :wb-tab-panel\n                                    :container\n                                    extra-classes\n                                    dynamic-classes)}\n         ^{:key selected-tab}\n         current-panel]))))\n\n(s/fdef tab-panel\n  :args (s/cat :opts (s/? :tab-panel/options)\n               :children (s/+ any?))\n  :ret vector?)\n\n"]}