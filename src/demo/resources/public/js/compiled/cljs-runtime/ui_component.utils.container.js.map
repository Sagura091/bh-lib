{"version":3,"sources":["ui_component/utils/container.cljs"],"mappings":"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","names":["taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","ui-component.utils.container/default-composite","re_frame.core.reg_event_db","day8.re-frame.tracing/is-trace-enabled?","p__51059","vec__51060","cljs.core.nth","+debux-dbg-opts+","day8.re-frame.debux.common.util/send-form!","result__35734__auto__","day8.re-frame.debux.common.util/send-trace!","e","e51066","p__51067","vec__51068","db","_","container","cljs.core.get_in","cljs.core/assoc-in","ui-component.utils.container/init-container","container-id","id","ui_component.utils.helpers.path__GT_keyword","c","blackboard","re_frame.core.reg_sub","containers","cljs.core.get","p__51071","vec__51072","w","path","p__51075","vec__51076","bb","component-path","new-val","cljs.core.update_in","cljs.core/assoc","p__51079","vec__51080","seq__51081","cljs.core/seq","first__51082","cljs.core/first","cljs.core/next","ui-component.utils.container/subscribe-to-container","a","more","p","ui-component.utils.locals/compute-container-path","re_frame.core.subscribe","ui-component.utils.container/publish-to-container","re-frame.core/dispatch","ui-component.utils.container/build-container-subs","local-config","ui-component.utils.locals/process-locals","cljs.core.map","cljs.core.into","ui-component.utils.container/override-subs","override-source","local-subs","subs","overrides","s","cljs.core.apply","cljs.core/merge"],"sourcesContent":["(ns ui-component.utils.container\n  (:require [ui-component.utils.helpers :as h]\n            [ui-component.utils.locals :as l]\n            [day8.re-frame.tracing :refer-macros [fn-traced]]\n            [re-frame.core :as re-frame]\n            [taoensso.timbre :as log]))\n\n\n(log/info \"ui-component.utils.container\")\n\n\n(def default-composite {:blackboard {}})\n\n;; *****TO DO****\n;; why is reframe in here?\n(re-frame/reg-event-db\n  :events/init-container\n  (fn-traced [db [_ container]]\n    ;(log/info \":events/init-container\" container)\n    (if (get-in db [:containers container])\n      (do\n        ;(log/info \":events/init-container // already exists\")\n        db)\n      (do\n        ;(log/info \":events/init-container // adding\")\n        (assoc-in db [:containers container] default-composite)))))\n\n\n(defn init-container [container-id]\n  (let [id         (h/path->keyword container-id)\n        c          (h/path->keyword :containers container-id)\n        blackboard (h/path->keyword container-id \"blackboard\")]\n\n    ;(log/info \"init-container\" container-id id c blackboard)\n\n    (re-frame/reg-sub\n      c\n      :<- [:containers]\n      (fn [containers _]\n        ;(log/info \"sub\" c id)\n        (get containers id)))\n\n    (re-frame/reg-sub\n      blackboard\n      :<- [c]\n      (fn [w [_ path]]\n        ;(log/info \"blackboard sub\" w blackboard)\n        (get-in w path)))\n\n    (re-frame/reg-event-db\n      blackboard\n      (fn [bb [_ id component-path new-val]]\n        ;(log/info \"container-event blackboard\" id component-path new-val)\n        (update-in bb [:containers id :blackboard]\n          assoc component-path new-val)))))\n\n;(re-frame/dispatch-sync [:events/init-container id])))\n\n\n(defn subscribe-to-container [container-id [a & more :as component-path]]\n  (let [p (l/compute-container-path container-id a more)]\n    ;(log/info \"subscribe-to-container\" container-id component-path p)\n    (re-frame/subscribe [p])))\n\n\n(defn publish-to-container\n  \"\n> NOTE: the re-frame event-handlers ***MUST*** be created beforehand, using [[init-container-locals]]\n\n  ---\n\n  - `container-id` : (string) name of the widget, typically a guid, but it can be any string you'd like\n  - `component-path : (vector of keys [keywords or string]) the 'key' for the item that is being publised\n  - `new-val` : (any) the new value to store at the given path\n\n  `value-path` functions exactly like any other re-frame subscription, but relative to the\n  `[:containers <component-id>]` in the overall `app-db`\n\n  It is destructured as follows:\n\n  | var        | type       | description                         |\n  |:-----------|:----------:|:------------------------------------|\n  | `a`        | keyword    | the (primary) value to subscribe to |\n  | `& more`   | keyword(s) | any additional parts to the path    |\n\n   ---\n\n   #### EXAMPLES\n\n  \"\n  [container-id component-path new-val]\n\n  ;(log/info \"publish-to-container-local\" container-id component-path new-val)\n\n  (let [p (h/path->keyword container-id \"blackboard\")]\n    ;(log/info \"publish-to-container\" container-id component-path new-val p)\n    (re-frame/dispatch [p component-path new-val])))\n\n\n(defn build-container-subs\n  \"build the subscription needed to access all the container's configuration\n  properties\n\n  1. process-locals\n  2. map over the result and call ui-utils/subscribe-to-container\n  3. put the result into a hash-map\n  \"\n  [container-id local-config]\n\n  (->> (l/process-locals [] nil local-config)\n    (map (fn [path]\n           ;(log/info \"build-container-subs\" container-id path)\n           {path (subscribe-to-container container-id path)}))\n    (into {})))\n\n\n(defn override-subs [override-source local-subs subs]\n  ;(log/info \"override-subs\" override-source \"//\" local-subs \"//\" subs)\n  (let [overrides (->> subs\n                    (map (fn [path]\n                           (let [s (get-in override-source path)]\n                             ;(log/info \"override-subs map\" path \"//\" s)\n                             (when (not (nil? s)) {path s})))))]\n\n    ;(log/info \"override-subs\" override-source\n    ;  \"// (local-subs)\" local-subs\n    ;  \"// (subs)\" subs\n    ;  \"// (overrides)\" overrides)\n\n    (apply merge local-subs overrides)))\n\n\n\n; revise override-subs\n(comment\n  (do\n    (def data-source {:brush false\n                      :uv    {:include true, :fill \"#ff0000\", :stackId \"\"}\n                      :pv    {:include true, :fill \"#00ff00\", :stackId \"\"}\n                      :tv    {:include true, :fill \"#0000ff\", :stackId \"\"}\n                      :amt   {:include true, :fill \"#f0f0f0\", :stackId \"\"}})\n    (def local-subs {[:tv :fill]     {:val \"#82ca9d\"},\n                     [:uv :fill]     {:val \"#8884d8\"},\n                     [:pv]           {:val {:include true, :fill \"#ffc107\", :stackId \"\"}},\n                     [:pv :stackId]  {:val \"\"},\n                     [:tv]           {:val {:include true, :fill \"#82ca9d\", :stackId \"\"}},\n                     [:amt :stackId] {:val \"\"},\n                     [:pv :include]  {:val true},\n                     [:amt :fill]    {:val \"#ff00ff\"},\n                     [:uv :include]  {:val true},\n                     [:brush]        {:val nil},\n                     [:tv :include]  {:val true}\n                     [:amt]          {:val {:include true, :fill \"#ff00ff\", :stackId \"\"}}\n                     [:pv :fill]     {:val \"#ffc107\"}\n                     [:uv :stackId]  {:val \"\"}\n                     [:tv :stackId]  {:val \"\"}\n                     [:uv]           {:val {:include true, :fill \"#8884d8\", :stackId \"\"}}\n                     [:amt :include] {:val true}})\n    (def my-subs (l/process-locals [] nil data-source)))\n\n\n  (->> my-subs\n    (map (fn [path]\n           ;(log/info \"override-subs map\" container-id path)\n           (let [s (get-in data-source path)]\n             (when s {path s}))))\n    (apply merge local-subs))\n\n\n  ())\n"]}