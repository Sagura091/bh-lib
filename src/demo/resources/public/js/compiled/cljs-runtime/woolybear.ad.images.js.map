{"version":3,"sources":["woolybear/ad/images.cljs"],"mappings":";AAOA,AAAAA,yBAAA,AAAA,6DAAA,AAAA,iFAAkBC;AAElB,AAAAD,yBAAA,AAAA,mEAAA,AAAA,2mBAAsB,AAAAE,8BAAA,wCAAA,yDAAA,wDAAA,kDAAA,iEAAA,8DAAA,6DAAA,8DAAA,mDAAA,4DAAA,+DAAA,gEAAA,qDAAA,AAAA,wJAAA,AAAA,4PAAA,KAAA,mFAAA,WAAAC;AAAA,AAAA,OAAAC,qBAAAD;GAAA,WAAAA;AAAA,AAAA,OAAAE,0BAAAF,SAAA;WAAA,WAAAA;AAAA,AAAA,SAAA,AAAAC,qBAAAD,eAAA,AAAAE,0BAAAF,SAAA;GAAA,AAAA,sPAAA,AAAA,wJAAA,AAAA,KAAA,AAAA,+IAAA,AAAA,4PAAA,AAAA,83BAAA,AAAA;AAItB;;;;;;;;;;4BAAA,5BAAMG,gEASHC;AATH,AAUE,IAAAC,aAAuDD;IAAvDC,iBAAA,AAAAC,4BAAAD;UAAA,AAAAE,4CAAAF,eAAA,jEAAcG;oBAAd,AAAAD,4CAAAF,eAAA,3EAAkBI;2BAAlB,AAAAF,4CAAAF,eAAA,lFAAgCK;IAC1BC,cAAY,AAACC,gCAAiBF;AADpC,AAEE,kBAAKG;AAAL,AACE,sBAAA,AAAAC,lBAAMC,kCAAiBJ;AAAvB,AAAA,0FAAA,yDAAA,2CAAA,4UAAA,mFAAA,mDAAA,2CAAA,rcACmB,sHAAA,sDAAA,5KAACK,wOACaP,cACAM,mQAClBP","names":["cljs.spec.alpha/def-impl","cljs.core/string?","cljs.spec.alpha/map-spec-impl","G__50711","cljs.core/map?","cljs.core/contains?","woolybear.ad.images/image","opts","map__50712","cljs.core/--destructure-map","cljs.core.get","src","extra-classes","subscribe-to-classes","classes-sub","woolybear.ad.utils/subscribe-to","_","cljs.core/deref","dynamic-classes","woolybear.ad.utils.css__GT_str"],"sourcesContent":["(ns woolybear.ad.images\n  \"\n  Simple images, including images with placeholders for display while loading.\n  \"\n  (:require [cljs.spec.alpha :as s]\n            [woolybear.ad.utils :as adu]))\n\n(s/def :image/src string?)\n\n(s/def :image/options (s/keys :req-un [:image/src]\n                              :opt-un [:ad/extra-classes\n                                       :ad/subscribe-to-classes]))\n\n(defn image\n  \"\n  Standard image component with support for placeholder graphics to display while\n  image is loading. Pass the source URL via the :src key in the opts argument.\n  Supports the standard :extra-classes and :subscribe-to-classes. For Bulma classes\n  that control image sizes and ratios, see\n\n     https://bulma.io/documentation/elements/image/\n  \"\n  [opts]\n  (let [{:keys [src extra-classes subscribe-to-classes]} opts\n        classes-sub (adu/subscribe-to subscribe-to-classes)]\n    (fn [_]\n      (let [dynamic-classes @classes-sub]\n        [:figure {:class (adu/css->str :image :wb-image\n                                       extra-classes\n                                       dynamic-classes)}\n         [:img {:src src}]]))))\n"]}