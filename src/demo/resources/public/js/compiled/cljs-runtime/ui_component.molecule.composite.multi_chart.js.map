{"version":3,"sources":["ui_component/molecule/composite/multi_chart.cljs"],"mappings":"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","names":["taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","ui-component.molecule.composite.multi-chart/sample-data","ui-component.atom.chart.bar-chart/sample-data","ui-component.molecule.composite.multi-chart/compute-data-config","data","ret","cljs.core.merge","cljs.core.get_in","cljs.core.filter","p__61106","vec__61107","cljs.core.nth","k","v","cljs.core._EQ_","cljs.core/keys","cljs.core.map_indexed","idx","a","ui-component.utils.color/get-color","cljs.core.into","p__61110","map__61111","cljs.core/--destructure-map","cljs.core.get","ui-component.molecule.composite.multi-chart/fn-make-config","config-data","container-id","params","re_frame.core.reg_sub","cljs.core/first","d","_","cljs.core.doall","ui-component.utils.locals/update-local-path-values","re-frame.core/dispatch-sync","ui-component.molecule.composite.multi-chart/data-config","config-data-path","item","position","re-com.core/v-box","js/goog.DEBUG","re-com.core/line","re-com.core/h-box","ui-component.atom.chart.utils/boolean-config","ui-component.atom.chart.utils/color-config","ui-component.atom.chart.utils/text-config","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","ui-component.molecule.composite.multi-chart/config-panel","p__61113","map__61114","seq61112","self__4852__auto__","cljs.core/seq","component-id","c","ui-component.utils.helpers/resolve-value","data-only","cljs.core/deref","cljs.core.dissoc","item-controls","p__61115","vec__61116","re-com.core/scroller","cljs.core.apply","cljs.core/merge","ui-component.molecule.composite.multi-chart/ui-definition","ui-component.molecule.composite.multi-chart/source-code"],"sourcesContent":["(ns ui-component.molecule.composite.multi-chart\n  (:require [ui-component.atom.chart.bar-chart :as chart]\n            [ui-component.atom.chart.utils :as utils]\n            [ui-component.utils :as ui-utils]\n            [ui-component.utils.color :as color]\n            [ui-component.utils.helpers :as h]\n            [ui-component.utils.locals :as l]\n            [re-com.core :as rc]\n            [re-frame.core :as re-frame]\n            [taoensso.timbre :as log]))\n\n\n(log/info \"ui-component.molecule.composite.multi-chart\")\n\n\n(def sample-data chart/sample-data)\n\n\n(declare config-panel)\n\n\n;; region ; create and handle subscription to :topic/config\n\n(defn- compute-data-config [data]\n  ;(log/info \"compute-data-config\" data)\n\n  (let [ret (merge {:brush false}\n              (->> (get-in data [:metadata :fields])\n                (filter (fn [[k v]] (= :number v)))\n                keys\n                (map-indexed (fn [idx a]\n                               {a {:include true\n                                   :stroke  (color/get-color idx)\n                                   :fill    (color/get-color idx)\n                                   :stackId \"\"}}))\n                (into {})))]\n    ;(log/info \"compute-data-config (ret)\" ret)\n    ret))\n\n\n(defn fn-make-config [{:keys [data config-data container-id] :as params}]\n  (re-frame/reg-sub\n    (first config-data)\n    :<- data\n    (fn [d _]\n      (doall\n        ; TODO: need a way to have :topic.config passed in somehow...\n        (l/update-local-path-values container-id [:blackboard :topic.config] (compute-data-config d))))))\n\n\n(re-frame/dispatch-sync [:register-meta {:multi-chart/fn-make-config {:function fn-make-config\n                                                                      :ports {:data :port/sink\n                                                                              :config-data :port/sink}}}])\n\n;; endregion\n\n\n;; region ; create the UI panel for showing/changing the shared chart configuration\n\n(defn- data-config [config-data-path item position]\n  [rc/v-box :src (rc/at)\n   :gap \"5px\"\n   :children [[rc/line :size \"2px\"]\n              [rc/h-box :src (rc/at)\n               :gap \"5px\"\n               :children [[utils/boolean-config config-data-path item [item :include]]\n                          [utils/color-config config-data-path \":stroke\" [item :stroke] position]\n                          [utils/color-config config-data-path \":fill\" [item :fill] position]]]\n              [utils/text-config config-data-path \":stackId\" [item :stackId]]]])\n\n\n(defn- config-panel [& {:keys [config-data component-id container-id] :as params}]\n  (let [c             (h/resolve-value config-data)\n        data-only     (dissoc @c :brush)\n        item-controls (map-indexed (fn [idx [item _]]\n                                     (data-config config-data item (if (= 0 idx)\n                                                                     :below-right\n                                                                     :right-center)))\n                        data-only)]\n\n    ;(log/info \"config-panel\" params\n    ;  \"//\" config-data \"//\" @c)\n\n    [:div.card {:style {:width      \"100%\" :height \"90%\"\n                        :margin     \"10px\" :padding \"5px\"\n                        :background \"#fff8dc\"\n                        :box-shadow \"5px 5px 5px #888888\"}}\n     [rc/scroller\n      :v-scroll :auto\n      :height \"90%\"\n      :child [rc/v-box :src (rc/at)\n              :class \"scroller-child\"\n              :width \"100%\"\n              :height \"100%\"\n              :gap \"2px\"\n              :children (apply merge\n                          [[utils/boolean-config config-data \":brush?\" [:brush]]]\n                          item-controls)]]]))\n\n\n(re-frame/dispatch-sync [:register-meta {:multi-chart/config-panel {:component config-panel\n                                                                    :port {:config-data :port/source-sink}}}])\n\n;; endregion\n\n\n(def ui-definition\n  {:components  {:ui/line        {:type :ui/component :name :rechart/line}\n                 :ui/bar         {:type :ui/component :name :rechart/bar}\n                 :ui/area        {:type :ui/component :name :rechart/area}\n                 :ui/config      {:type :ui/component :name :multi-chart/config-panel}\n                 :topic/data     {:type :source/local :name :topic/data :default sample-data}\n                 :topic/config   {:type :source/local :name :topic/config :default {}}\n                 :fn/make-config {:type  :source/fn :name :multi-chart/fn-make-config}}\n                                  ;:ports {:data :port/sink :config-data :port/source-sink}}}\n\n   :links       {:ui/config      {:config-data {:topic/config :data}}\n                 :topic/data     {:data {:ui/line        :data\n                                         :ui/bar         :data\n                                         :ui/area        :data\n                                         :fn/make-config :data}}\n                 :topic/config   {:data {:ui/line   :config-data\n                                         :ui/bar    :config-data\n                                         :ui/area   :config-data\n                                         :ui/config :config-data}}\n                 :fn/make-config {:config-data {:topic/config :data}}}\n\n   :grid-layout [{:i :ui/config :x 0 :y 0 :w 20 :h 5 :static true}\n                 {:i :ui/line :x 0 :y 5 :w 7 :h 11 :static true}\n                 {:i :ui/bar :x 7 :y 5 :w 6 :h 11 :static true}\n                 {:i :ui/area :x 13 :y 5 :w 7 :h 11 :static true}]})\n\n\n(def source-code '(let [def {:components  {:ui/line        {:type :ui/component :name :rechart/bar}\n                                           :ui/bar         {:type :ui/component :name :rechart/bar}\n                                           :ui/area        {:type :ui/component :name :rechart/bar}\n                                           :ui/config      {:type :ui/component :name config-panel}\n                                           :topic/data     {:type :source/local :name :topic/data :default @sample-data}\n                                           :topic/config   {:type :source/local :name :topic/config :default {}}\n                                           :fn/make-config {:type  :source/fn :name fn-make-config\n                                                            :ports {:data :port/sink :config-data :port/source-sink}}}\n\n                             :links       {:ui/config      {:config-data {:topic/config :data}}\n                                           :topic/data     {:data {:ui/line        :data\n                                                                   :ui/bar         :data\n                                                                   :ui/area        :data\n                                                                   :fn/make-config :data}}\n                                           :topic/config   {:data {:ui/line   :config-data\n                                                                   :ui/bar    :config-data\n                                                                   :ui/area   :config-data\n                                                                   :ui/config :config-data}}\n                                           :fn/make-config {:config-data {:topic/config :data}}}\n\n                             :grid-layout [{:i :ui/config :x 0 :y 0 :w 12 :h 5 :static true}\n                                           {:i :ui/line :x 0 :y 5 :w 4 :h 11 :static true}\n                                           {:i :ui/bar :x 4 :y 5 :w 4 :h 11 :static true}\n                                           {:i :ui/area :x 8 :y 5 :w 4 :h 11 :static true}]}]\n                    [grid-widget/component\n                     :data def\n                     :component-id (h/path->keyword container-id \"widget\")]))\n\n\n\n\n; testing for setting up subs/events to support widgets\n(comment\n  @(re-frame/subscribe [:multi-chart-widget.widget.blackboard])\n  @(re-frame/subscribe [:multi-chart-widget.widget.blackboard.topic.data])\n  @(re-frame/subscribe [:multi-chart-widget.widget.blackboard.topic.config])\n\n\n  @(re-frame/subscribe [:multi-chart-widget.widget.blackboard.topic.config.uv])\n  @(re-frame/subscribe [:multi-chart-widget.widget.blackboard.topic.config.uv.include])\n  @(re-frame/subscribe [:multi-chart-widget.widget.blackboard.topic.config.uv.fill])\n  @(re-frame/subscribe [:multi-chart-widget.widget.blackboard.topic.config.uv.stroke])\n  @(re-frame/subscribe [:multi-chart-widget.widget.blackboard.topic.config.uv.stackId])\n\n\n  (re-frame/dispatch [:multi-chart-widget.widget.blackboard.topic.config.uv.include false])\n  (re-frame/dispatch [:multi-chart-widget.widget.blackboard.topic.config.uv.include true])\n\n\n  (get-in @re-frame.db/app-db [:containers :multi-chart-widget.widget])\n  (get-in @re-frame.db/app-db [:containers :multi-chart-widget.widget :blackboard])\n  (get-in @re-frame.db/app-db [:containers :multi-chart-widget.widget\n                               :blackboard (ui-utils/path->keyword :topic/config)])\n  (get-in @re-frame.db/app-db [:containers :multi-chart-widget.widget.blackboard])\n\n\n  (reduce conj [:containers :dummy] [:blackboard :topic.config])\n\n  (reduce conj [:containers] [:dummy])\n  (reduce conj [:containers] [[:blackboard :topic.config]])\n\n  (def container :multi-chart-widget.widget)\n  (def container [:multi-chart-widget.widget :blackboard :topic.config])\n  (def values \"\")\n  (let [data-path (cond\n                    (coll? container) (reduce conj [:containers] container)\n                    :else [:containers container])]\n    (get-in @re-frame/app-db data-path values))\n\n\n  ())\n\n\n"]}