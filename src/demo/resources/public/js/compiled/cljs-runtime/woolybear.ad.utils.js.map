{"version":3,"sources":["woolybear/ad/utils.cljs"],"mappings":"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","names":["cljs.spec.alpha/def-impl","cljs.spec.alpha/or-spec-impl","p1__70532#","p1__70533#","cljs.core._EQ_","cljs.core/type","reagent.ratom/RAtom","cljs.core/Atom","cljs.core/fn?","cljs.core/vector?","cljs.core/set?","cljs.core/coll?","cljs.core/keyword?","cljs.core/string?","cljs.core/boolean?","cljs.spec.alpha.every_impl","G__70543","woolybear.ad.utils/extract-args","args","cljs.core/map?","cljs.core/first","cljs.core/rest","woolybear.ad.utils/get-option","elem","k","cljs.core.get","cljs.core/second","woolybear.ad.utils/add-option","v","vec__70544","cljs.core.nth","opts","kids","or__4253__auto__","result","cljs.core.assoc","cljs.core.into","woolybear.ad.utils/replace-children","new-kids","vec__70547","_","woolybear.ad.utils/function-type","woolybear.ad.utils/always-nil","cljs.core.atom","woolybear.ad.utils/subscribe-to","sub","pred__70550","expr__70551","cljs.core/=","re_frame.core.subscribe","woolybear.ad.utils/mk-dispatcher","dispatcher","e","with-e","cljs.core.conj","re-frame.core/dispatch","cljs.core.ex_info","woolybear.ad.utils/mk-no-default-dispatcher","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","woolybear.ad.utils/append-to-dispatcher","seq70553","G__70554","cljs.core/next","self__4851__auto__","more","cljs.core.apply","cljs.core/partial","woolybear.ad.utils/mk-keydown-dispatcher","dispatchers","has-key?","cljs.core/keys","cljs.core/reduce-kv","d","c","fexpr__70555","woolybear.ad.utils/to-name","cljs.core/Keyword","cljs.core/name","cljs.core/Symbol","woolybear.ad.utils/css->str","seq70557","self__4852__auto__","cljs.core/seq","classes","p1__70556#","cljs.core.mapv","cljs.core/flatten","cljs.core.remove","cljs.core/nil?","cljs.core.map","clojure.string.join","woolybear.ad.utils/css+css","seq70558","cs","cljs.core.reduce","css","clojure.set.union","woolybear.ad.utils/unique-id","counter","cljs.core.swap_BANG_","cljs.core/inc","woolybear.ad.utils/js-event-val","G__70559"],"sourcesContent":["(ns woolybear.ad.utils\n  \"Specs and utility functions for use with AD components.\"\n  (:require [cljs.spec.alpha :as s]\n            [clojure.string :as string]\n            [re-frame.core :as re-frame]\n            [clojure.set :as set]))\n\n;; A subscription argument can be passed in via one of three ways:\n;; as an atom/ratom directly, as a function that returns a subscription,\n;; or as a vector that can be passed to a re-frame/subscribe call. Use\n;; the subscribe-to function, below, to convert this value into a valid\n;; ratom/subscription that can be dereferenced at runtime.\n(s/def :ad/subscription (s/or :ratom #(= (type %) reagent.ratom/RAtom)\n                              :atom #(= (type %) cljs.core/Atom)\n                              :fn fn?\n                              :vec vector?))\n\n;; An event dispatcher argument can be passed in as either a standard\n;; re-frame event vector, or as a function (i.e. for running tests\n;; and/or for display in the AD catalog). Call the adu/mk-dispatcher fn,\n;; below, to convert this into a dispatcher function as follows: if the\n;; value is a vector, make a function that appends the JS event to\n;; the vector and dispatches the event, or if the value is a function,\n;; just return the function, which is assumed to take the JS event as\n;; its sole argument. SEE ALSO the adu/mk-no-default-dispatcher function\n;; below to make an event dispatcher that calls stopPropagation and\n;; preventDefault on the event before passing it to the event dispatcher.\n(s/def :ad/event-dispatcher (s/or :vec vector?\n                                  :fn fn?))\n\n;; Some components let you pass in extra classes. By convention, we\n;; specify CSS classes as either keywords or sets of keywords, but\n;; they can also be strings or sets of strings or collections of either\n;; strings or keywords. (The reason for preferring keywords is sheer\n;; laziness--one less character to type!)\n(s/def :ad/extra-classes (s/or :set set?\n                               :coll coll?\n                               :kw keyword?\n                               :str string?))\n\n;; Some components let you pass in CSS classes that can change at\n;; render time. Pass in a subscription that returns the current\n;; class or set of classes to render\n(s/def :ad/subscribe-to-classes :ad/subscription)\n\n;; Some components are meant to be used as a direct subcomponent of\n;; a parent that controls whether or not they are visible, enabled,\n;; or otherwise active. The parent will pass in a boolean value to\n;; the :ad/active? option to either enable or disable it.\n(s/def :ad/active? boolean?)\n\n;; Some components have internal data that they need to track and manage\n;; without \"manual intervention\". The :subscribe-to-component-data\n;; option lets you tell the component what to subscribe to in order to\n;; retrieve its current state\n(s/def :ad/subscribe-to-component-data :ad/subscription)\n\n;; Self-aware components need a \"path\" to their own data so they can\n;; update themselves in the built-in handlers. The path will be just\n;; a vector of keywords to be used in a call to `assoc-in` or `update-in`.\n(s/def :ad/component-path (s/coll-of keyword? :kind vector?))\n\n(defn extract-args\n  \"Given a vector of arguments, checks to see if the first argument is a map of options.\n  Returns a 2-element vector containing the options (if any) and a vector of the remaining\n  arguments.\n\n  Example:\n      (defn foo [& args]\n        (let [[opts children] (extract-opts args)\n              ...]\n          ...))\"\n  [args]\n  (if (map? (first args))\n    [(first args) (rest args)]\n    [nil args]))\n\n(defn get-option\n  \"Given a hiccup-style vector representing a DOM element, and a key,\n  return the value (if any) from the opts map of the element. Returns\n  woolybear.ad.utils/not-found if the key does not exist in the options.\"\n  [elem k]\n  (get (second elem) k ::not-found))\n\n(defn add-option\n  \"Given a hiccup-style vector representing a DOM element, and a key/value pair,\n  add the k/v pair to the element's opts map, creating that map if needed\"\n  [elem k v]\n  (let [[opts kids] (extract-args (rest elem))\n        opts (or opts {})\n        result [(first elem) (assoc opts k v)]]\n    (into result kids)))\n\n(defn replace-children\n  \"Given a hiccup-style vector representing a DOM element with an optional\n  opts map, and a list of new children, replace the element's children by\n  the new children, preserving any opts value that may be present.\"\n  [elem new-kids]\n  (let [[opts _] (extract-args (rest elem))]\n    (if opts\n      (into [(first elem) opts] new-kids)\n      (into [(first elem)] new-kids))))\n\n(def function-type (type #()))\n(def always-nil (atom nil))\n\n(defn subscribe-to\n  \"Given a value that may be either a re-frame subscription ratom, or a vector\n  specifying a re-frame subscription, return a valid re-frame subscription ratom.\n  If the value is nil, returns an atom that always dereferences to nil.\n  The value can also be a zero-arity function that returns a subscription, in\n  which case subscribe-to will return the result of calling that function.\"\n  [sub]\n  (condp = (type sub)\n    reagent.ratom/RAtom sub\n    cljs.core/Atom sub\n    function-type (sub)\n    nil always-nil\n    ;; else\n    (re-frame/subscribe sub)))\n\n(defn mk-dispatcher\n  \"Given an :ad/:ad/event-dispatcher argument, return a dispatcher function suitable\n  for passing to (for example) the :on-click attribute. If the argument is\n  a function, returns the function (which is assumed to take a single argument,\n  the JS event that triggered the dispatcher). If the :ad/:ad/event-dispatcher is a\n  vector, returns a function that appends the JS event to the vector, and\n  calls the standard re-frame dispatch function.\"\n  [dispatcher]\n  (cond\n    (fn? dispatcher) dispatcher\n    (vector? dispatcher) (fn [e]\n                           (let [with-e (conj dispatcher e)]\n                             (re-frame/dispatch with-e)))\n    :else (throw\n            (ex-info \"First argument to woolybear.ad.utils/mk-dispatcher must be a vector or fn.\"\n                     dispatcher))))\n\n(defn mk-no-default-dispatcher\n  \"Same as mk-dispatcher, except returns a dispatcher that calls stopPropagate and\n  preventDefault on the JS event before dispatching.\"\n  [dispatcher]\n  (let [dispatcher (mk-dispatcher dispatcher)]\n    (fn [e]\n      (.preventDefault e)\n      (.stopPropagation e)\n      (dispatcher dispatcher e))))\n\n(defn append-to-dispatcher\n  \"Given an event dispatcher in the form of either a function or a re-frame event vector,\n  append the extra arguments to the dispatcher in the appropriate way (`partial` for functions,\n  `conj` for vectors). Useful for components that have multiple child components where some\n  extra information needs to be added to each instance of the dispatcher.\"\n  [dispatcher & more]\n  (cond\n    (fn? dispatcher) (apply partial dispatcher more)\n    (vector? dispatcher) (into dispatcher more)\n    :else (throw (ex-info \"First argument to append-to-dispatcher must be a function or a vector.\"\n                          {:handler dispatcher :more more}))))\n\n(defn mk-keydown-dispatcher\n  \"\n  Given a map whose keys are the names of standard keyboard keys, as described in the JS docs at\n  https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values, and whose values\n  are event dispatchers, return an event handler function that dispatches the given event when\n  the corresponding key is pressed. For example, if the map is {\\\"Enter\\\" [:key/enter]}, then\n  mk-keydown-dispatcher will return a function that dispatches [:key/enter] when the Enter key\n  is pressed. Use as the :on-key-down handler for an input field.\n  \"\n  [dispatchers]\n  (let [has-key? (into #{} (keys dispatchers))\n        ;; Use mk-dispatcher on each of the values in the dispatchers map\n        dispatchers (reduce-kv (fn [d k v]\n                                 (assoc d k (mk-dispatcher v)))\n                      {}\n                      dispatchers)]\n    (fn [e]\n      (let [c (..  e -target -char)]\n        (when (has-key? c)\n          ;; retrieve dispatcher and execute it\n          ((get dispatchers c)))))))\n\n(defn- to-name\n  \"Given a value that may be a string, symbol, or keyword, return the\n  name of the value, or the original value if it's not a symbol or keyword.\"\n  [v]\n  (cond\n    (keyword? v) (name v)\n    (symbol? v) (name v)\n    :else v))\n\n(defn css->str\n  \"Given one or more css classes, return a string of space-separated class\n  names suitable for use as the :class value on a hiccup DOM element.\"\n  [& classes]\n  (->> classes\n       (mapv #(if (set? %) (into [] %) %)) ;; flatten doesn't flatten sets\n       flatten\n       (remove nil?)          ;; filter out nils\n       (map to-name)\n       (into #{})             ;; make css classes unique\n       (string/join \" \")))\n\n(defn css+css\n  \"Utility function for combining multiple CSS class specifiers, each of which\n  may be a keyword, string, or set.\"\n  [& cs]\n  (reduce (fn [result css]\n            (cond\n              (nil? css) result\n              (set? css) (set/union result css)\n              :else (conj result css)))\n          #{}\n          cs))\n\n(def unique-id\n  (let [counter (atom 0)]\n    (fn []\n      (swap! counter inc))))\n\n(defn js-event-val\n  \"Given a JS event, get the value of the event target.\"\n  [e]\n  (some-> e .-target .-value))\n"]}