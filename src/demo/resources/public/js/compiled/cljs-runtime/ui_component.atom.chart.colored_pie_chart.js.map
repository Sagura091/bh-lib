{"version":3,"sources":["ui_component/atom/chart/colored_pie_chart.cljs"],"mappings":"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","names":["taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","ui-component.atom.chart.colored-pie-chart/source-code","ui-component.atom.chart.colored-pie-chart/sample-data","ui-component.utils.example-data/meta-tabular-data","ui-component.atom.chart.colored-pie-chart/sample-config-data","ui-component.utils.example-data/tabular-row-config-data","ui-component.atom.chart.colored-pie-chart/random-data","ui-component.utils.example-data/random-meta-positive-tabular-data","ui-component.atom.chart.colored-pie-chart/local-config","data","d","cljs.core/deref","cljs.core.get","fields","cljs.core.get_in","cljs.core.merge","cljs.core.filter","p__58781","vec__58782","cljs.core.nth","k","v","cljs.core._EQ_","cljs.core/keys","m","cljs.core/first","cljs.core.map_indexed","idx","entry","ui_component.utils.path__GT_keyword","cljs.core/cycle","ui-component.utils.color/default-stroke-fill-colors","cljs.core.into","p__58785","vec__58786","ui-component.atom.chart.colored-pie-chart/config","component-id","ui-component.utils/default-pub-sub","ui-component.atom.chart.utils/default-config","ui-component.utils/config-tab-panel","ui-component.atom.chart.colored-pie-chart/cell-config","label","path","position","p","re-com.core/h-box","ui-component.atom.chart.utils/boolean-config","cljs.core.conj","ui-component.atom.chart.utils/color-config-text","ui-component.atom.chart.colored-pie-chart/make-cell-config","p__58789","map__58790","cljs.core/--destructure-map","name","item","ui-component.atom.chart.colored-pie-chart/config-panel","re-com.core/v-box","js/goog.DEBUG","ui-component.atom.chart.utils/non-gridded-chart-config","re-com.core/line","ui-component.atom.chart.utils/option","ui-component.atom.chart.utils/column-picker","re-com.core/label","ui-component.atom.chart.colored-pie-chart/make-cells","subscriptions","ret","p__58791","map__58792","ui-component.utils/resolve-sub","js/shadow.js.shim.module$recharts.Cell","or__4253__auto__","ui-component.utils.color/get-color","cljs.core.remove","cljs.core/empty?","ui-component.atom.chart.colored-pie-chart/included-cells","p__58793","map__58794","ui-component.atom.chart.colored-pie-chart/custom-tooltip","tooltip-map","map__58795","vec__58796","payload","cljs.core.js__GT_clj","_","p-p","dataKey","cljs.core.keyword","reagent.core.as_element","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","ui-component.atom.chart.colored-pie-chart/component*","p__58804","map__58805","seq58799","self__4852__auto__","cljs.core/seq","container-id","isAnimationActive?","params","included","js/shadow.js.shim.module$recharts.ResponsiveContainer","js/shadow.js.shim.module$recharts.PieChart","ui-component.atom.chart.utils/override","js/shadow.js.shim.module$recharts.Pie","js/shadow.js.shim.module$recharts.Legend","js/shadow.js.shim.module$recharts.Tooltip","ui-component.atom.chart.colored-pie-chart/component","p__58811","map__58812","seq58810","input-params","cljs.core.assoc","ui-component.atom.chart.wrapper-2/component-panel","cljs.core.reduce","cljs.core/into","ui-component.atom.chart.wrapper-2/base-chart","ui-component.atom.chart.colored-pie-chart/meta-data","re-frame.core/dispatch-sync"],"sourcesContent":["(ns ui-component.atom.chart.colored-pie-chart\n  (:require [ui-component.atom.chart.utils :as utils]\n            [ui-component.atom.chart.wrapper-2 :as wrapper]\n            [ui-component.utils :as ui-utils]\n            [ui-component.utils.color :as color]\n            [ui-component.utils.example-data :as example-data]\n            [re-com.core :as rc]\n            [re-frame.core :as rf]\n            [reagent.core :as r]\n            [taoensso.timbre :as log]\n            [\"recharts\" :refer [ResponsiveContainer PieChart Pie Cell Tooltip Legend]]))\n\n\n(log/info \"ui-component.atom.chart.colored-pie-chart\")\n\n\n(def source-code '[:> PieChart {:label true} (utils/override true {} :label)\n                   [:> Pie {:dataKey           (ui-utils/resolve-sub subscriptions [:value :chosen])\n                            :nameKey           (ui-utils/resolve-sub subscriptions [:name :chosen])\n                            :data              included\n                            :label             (utils/override true {} :label)\n                            :isAnimationActive @isAnimationActive?}\n                    (make-cells d subscriptions)]\n                   [:> Legend]\n                   [:> Tooltip {:content custom-tooltip}]])\n\n\n(def sample-data example-data/meta-tabular-data)\n(def sample-config-data example-data/tabular-row-config-data)\n(def random-data example-data/random-meta-positive-tabular-data)\n\n\n(defn local-config [data]\n\n  ;(log/info \"local-config\" @data)\n\n  (let [d      (get @data :data)\n        fields (get-in @data [:metadata :fields])]\n\n    (merge\n      ; process options for :name\n      (->> fields\n        (filter (fn [[k v]] (= :string v)))\n        keys\n        ((fn [m]\n           {:name {:keys m :chosen (first m)}})))\n\n      ; process :name to map up the :colors\n      (->> d\n        (map-indexed (fn [idx entry]\n                       ;(log/info \"local-config (:color loop)\" entry)\n                       {(ui-utils/path->keyword (:name entry))\n                        {:name    (:name entry)\n                         :include true\n                         :color   (nth (cycle color/default-stroke-fill-colors) idx)}}))\n        (into {}))\n\n      ; process options for :value\n      (->> fields\n        (filter (fn [[k v]] (= :number v)))\n        keys\n        ((fn [m]\n           {:value {:keys m :chosen (first m)}}))))))\n\n\n(defn config [component-id data]\n  (merge\n    ui-utils/default-pub-sub\n    utils/default-config\n    (ui-utils/config-tab-panel component-id)\n    (local-config data)))\n\n\n(defn- cell-config [component-id label path position]\n  (let [p (ui-utils/path->keyword path)]\n    ;(log/info \"cell-config\" component-id \"//\" label \"//\" p)\n    [rc/h-box\n     :gap \"5px\"\n     :children [[utils/boolean-config component-id \"\" (conj [p] :include)]\n                [utils/color-config-text component-id label (conj [p] :color) :right-above]]]))\n\n\n(defn- make-cell-config [component-id data]\n  (->> (:data @data)\n    (map-indexed (fn [idx {:keys [name] :as item}]\n                   [cell-config component-id name [name] :above-right]))\n    (into [:<>])))\n\n\n(defn config-panel [data component-id]\n  ;(log/info \"config-panel\" component-id \"//\" @data)\n\n  [rc/v-box :src (rc/at)\n   :gap \"10px\"\n   :width \"400px\"\n   :style {:padding          \"15px\"\n           :border-top       \"1px solid #DDD\"\n           :background-color \"#f7f7f7\"}\n   :children [[utils/non-gridded-chart-config @data component-id]\n              [rc/line :src (rc/at) :size \"2px\"]\n              [utils/option component-id \":name\" [:name]]\n              [rc/line :src (rc/at) :size \"2px\"]\n              [utils/column-picker data component-id \":value\" [:value :chosen]]\n              [rc/v-box :src (rc/at)\n               :gap \"5px\"\n               :children [[rc/label :src (rc/at) :label \"Pie Colors\"]\n                          (make-cell-config component-id data)]]]])\n\n\n(defn- make-cells [data subscriptions]\n  ;(log/info \"make-cells\" data\n  ;  \"// (subscriptions)\" subscriptions)\n\n  (let [ret (->> data\n              (map-indexed (fn [idx {:keys [name]}]\n                             (if (ui-utils/resolve-sub subscriptions [name :include])\n                               (do\n                                 [:> Cell {:key  (str \"cell-\" idx)\n                                           :fill (or (ui-utils/resolve-sub subscriptions [name :color])\n                                                   (color/get-color 0))}])\n                               [])))\n              (remove empty?)\n              (into [:<>]))]\n    ;(log/info \"ret\" ret)\n\n    ret))\n\n\n(defn- included-cells [data subscriptions]\n  (->> data\n    (filter (fn [{:keys [name]}] (ui-utils/resolve-sub subscriptions [name :include])))\n    (into [])))\n\n\n(defn- custom-tooltip [tooltip-map]\n  ;(log/info \"custom-tooltip\" (js->clj x))\n  (let [{:keys [payload]} (js->clj tooltip-map :keywordize-keys true)\n        [p _] payload\n        p-p     (:payload p)\n        dataKey (:dataKey p)\n        name    (:name p-p)\n        data    (get p-p (keyword dataKey))]\n\n    (r/as-element\n      [rc/v-box\n       :style {:background \"rgba(255, 255, 255, 0.8)\"\n               :border     \"1px solid\" :border-radius \"3px\"\n               :box-shadow \"5px 5px 5px 2px\"\n               :margin     \"5px\" :padding \"5px\"}\n       :gap \"2px\"\n       :children [[:p.has-text-centered.has-text-weight-bold (str name)]\n                  [rc/line :size \"1px\"]\n                  [:p.has-text-centered (str dataKey \" : \" data)]]])))\n\n\n(defn- component* [& {:keys [data component-id container-id\n                             subscriptions isAnimationActive?]\n                      :as   params}]\n\n\n  (let [d        (if (empty? data) [] (get data :data))\n        included (included-cells d subscriptions)]\n\n    ;(log/info \"colored-pie-chart\" component-id\n    ;\"//\" data \"//\" d\n    ;\"//\" included\n\n    [:> ResponsiveContainer\n     [:> PieChart {:label true} (utils/override true {} :label)\n\n      [:> Pie {:dataKey           (ui-utils/resolve-sub subscriptions [:value :chosen])\n               :nameKey           (ui-utils/resolve-sub subscriptions [:name :chosen])\n               :data              included\n               :label             (utils/override true {} :label)\n               :isAnimationActive @isAnimationActive?}\n       (make-cells d subscriptions)]\n      [:> Legend]                                           ;{:iconSize 10 :width 120 :height 140 :layout \"horizontal\" :verticalAlign \"bottom\" :align \"middle\"}]\n      [:> Tooltip {:content custom-tooltip}]]]))\n\n\n(defn component [& {:keys [component-id] :as params}]\n\n  ;(log/info \"component-2\" params)\n\n  (let [input-params (assoc params :component* component*\n                                   :component-panel wrapper/component-panel\n                                   :config config\n                                   :local-config local-config)]\n\n    (reduce into [wrapper/base-chart] (seq input-params))))\n\n\n(def meta-data {:rechart/colored-pie {:component component\n                                      ;:configurable-component configurable-component\n                                      :ports     {:data   :port/sink\n                                                  :config :port/sink}}})\n\n\n(rf/dispatch-sync [:register-meta meta-data])\n"]}