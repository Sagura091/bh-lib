{"version":3,"sources":["ui_component/atom/chart/line_chart.cljs"],"mappings":"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","names":["ui-component.atom.chart.line-chart/source-code","ui-component.atom.chart.line-chart/sample-data","ui-component.utils.example-data/meta-tabular-data","ui-component.atom.chart.line-chart/sample-config-data","ui-component.utils.example-data/tabular-column-config-data","ui-component.atom.chart.line-chart/random-data","ui-component.utils.example-data/random-meta-tabular-data","ui-component.atom.chart.line-chart/local-config","data","cljs.core.merge","cljs.core/deref","cljs.core.get_in","cljs.core.filter","p__58841","vec__58842","cljs.core.nth","k","v","cljs.core._EQ_","cljs.core/keys","cljs.core.map_indexed","idx","a","ui-component.utils.color/get-color","cljs.core.into","ui-component.atom.chart.line-chart/config","component-id","ui-component.utils/default-pub-sub","ui-component.atom.chart.utils/default-config","cljs.core.keyword","cljs.core/assoc-in","ui-component.atom.chart.line-chart/line-config","label","path","position","re-com.core/v-box","js/goog.DEBUG","ui-component.atom.chart.utils/boolean-config","cljs.core.conj","re-com.core/h-box","ui-component.atom.chart.utils/color-config","ui-component.atom.chart.line-chart/make-line-config","p__58845","vec__58846","ui-component.atom.chart.line-chart/config-panel","ui-component.atom.chart.utils/standard-chart-config","re-com.core/line","ui-component.atom.chart.line-chart/make-line-display","subscriptions","isAnimationActive?","p__58849","vec__58850","_","cljs.core.map","ui-component.utils/resolve-sub","js/shadow.js.shim.module$recharts.Line","cljs.core.remove","cljs.core/empty?","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","ui-component.atom.chart.line-chart/component*","p__58854","map__58855","cljs.core/--destructure-map","cljs.core.get","seq58853","self__4852__auto__","cljs.core/seq","container-id","params","d","js/shadow.js.shim.module$recharts.ResponsiveContainer","js/shadow.js.shim.module$recharts.LineChart","ui-component.atom.chart.utils/standard-chart-components","js/shadow.js.shim.module$recharts.Brush","ui-component.atom.chart.line-chart/component","p__58857","map__58858","seq58856","input-params","cljs.core.assoc","ui-component.atom.chart.wrapper-2/component-panel","cljs.core.reduce","cljs.core/into","ui-component.atom.chart.wrapper-2/base-chart","ui-component.atom.chart.line-chart/meta-data","re-frame.core/dispatch-sync"],"sourcesContent":["(ns ui-component.atom.chart.line-chart\n  (:require [ui-component.atom.chart.utils :as utils]\n            [ui-component.atom.re-com.configure-toggle :as ct]\n            [ui-component.utils :as ui-utils]\n            [ui-component.utils.color :as color]\n            [ui-component.utils.example-data :as example-data]\n            [ui-component.utils.helpers :as h]\n            [ui-component.utils.locals :as l]\n            [ui-component.atom.chart.wrapper-2 :as wrapper]\n            [re-frame.core :as rf]\n            [re-com.core :as rc]\n            [reagent.core :as r]\n            [taoensso.timbre :as log]\n            [woolybear.ad.layout :as layout]\n            [\"recharts\" :refer [ResponsiveContainer LineChart Line Brush]]))\n\n\n(def source-code '[:> LineChart {:data d}\n                   (utils/standard-chart-components component-id {})\n                   [:> Line (merge {:type              \"monotone\" :dataKey a\n                                    :isAnimationActive @isAnimationActive?\n                                    :stroke            (ui-utils/resolve-sub subscriptions [a :stroke])\n                                    :fill              (ui-utils/resolve-sub subscriptions [a :fill])}\n                                   (when (seq (ui-utils/resolve-sub subscriptions [a :stackId]))\n                                     {:stackId (ui-utils/resolve-sub subscriptions [a :stackId])}))]])\n\n\n(def sample-data example-data/meta-tabular-data)\n(def sample-config-data example-data/tabular-column-config-data)\n(def random-data example-data/random-meta-tabular-data)\n\n\n(defn local-config [data]\n  (merge\n    {:brush false}\n    (->> (get-in @data [:metadata :fields])\n         (filter (fn [[k v]] (= :number v)))\n         keys\n         (map-indexed (fn [idx a]\n                        ;(log/info \"line color\" idx a (ui-utils/get-color idx))\n                        {a {:include true\n                            :stroke  (color/get-color idx)\n                            :fill    (color/get-color idx)}}))\n         (into {}))))\n\n\n(defn- config [component-id data]\n  (-> ui-utils/default-pub-sub\n      (merge\n        utils/default-config\n        {:type      \"line-chart\"\n         :tab-panel {:value     (keyword component-id \"config\")\n                     :data-path [:containers (keyword component-id) :tab-panel]}}\n        (local-config data))\n      (assoc-in [:x-axis :dataKey] (get-in @data [:metadata :id]))))\n\n\n(defn- line-config [component-id label path position]\n  [rc/v-box :src (rc/at)\n   :gap \"5px\"\n   :children [[utils/boolean-config component-id label (conj path :include)]\n              [rc/h-box :src (rc/at)\n               :gap \"5px\"\n               :children [[utils/color-config component-id \":stroke\" (conj path :stroke) position]\n                          [utils/color-config component-id \":fill\" (conj path :fill) position]]]]])\n\n\n(defn- make-line-config [component-id data]\n  (->> (get-in @data [:metadata :fields])\n       (filter (fn [[k v]] (= :number v)))\n       keys\n       (map-indexed (fn [idx a]\n                      [line-config component-id a [a] :above-right]))\n       (into [])))\n\n\n(defn config-panel [data component-id]\n\n  ;(log/info \"config-panel\" data component-id)\n\n  [rc/v-box :src (rc/at)\n   :gap \"10px\"\n   :width \"100%\"\n   :style {:padding          \"15px\"\n           :border-top       \"1px solid #DDD\"\n           :background-color \"#f7f7f7\"}\n   :children [[utils/standard-chart-config data component-id]\n              [rc/line :src (rc/at) :size \"2px\"]\n              [rc/h-box :src (rc/at)\n               :gap \"10px\"\n               :children (make-line-config component-id data)]\n              [rc/line :src (rc/at) :size \"2px\"]\n              [utils/boolean-config component-id \":brush?\" [:brush]]]])\n\n\n(defn- make-line-display [component-id data subscriptions isAnimationActive?]\n\n  ;(log/info \"make-line-display\" data)\n  (->> (get-in data [:metadata :fields])\n       (filter (fn [[_ v]] (= :number v)))\n       keys\n       (map (fn [a]\n              (if (ui-utils/resolve-sub subscriptions [a :include])\n                [:> Line {:type              \"monotone\" :dataKey a\n                          :isAnimationActive @isAnimationActive?\n                          :stroke            (ui-utils/resolve-sub subscriptions [a :stroke])\n                          :fill              (ui-utils/resolve-sub subscriptions [a :fill])}]\n                [])))\n       (remove empty?)\n       (into [:<>])))\n\n\n(defn- component* [& {:keys [data component-id container-id\n                             subscriptions isAnimationActive?]\n                      :as   params}]\n\n  (let [d (if (empty? data) [] (get data :data))]\n\n    ;(log/info \"component*\" data \"//\" d)\n    [:> ResponsiveContainer\n     [:> LineChart {:data d}\n\n      (utils/standard-chart-components component-id {})\n\n      (when (ui-utils/resolve-sub subscriptions [:brush]) [:> Brush])\n\n      (make-line-display component-id data subscriptions isAnimationActive?)]]))\n\n\n(defn component [& {:keys [component-id] :as params}]\n\n  ;(log/info \"component-2\" params)\n\n  (let [input-params (assoc params :component* component*\n                                   :component-panel wrapper/component-panel\n                                   :config config\n                                   :local-config local-config)]\n\n    (reduce into [wrapper/base-chart] (seq input-params))))\n\n\n(def meta-data {:rechart/line {:component component\n                               ;:configurable-component configurable-component\n                               :ports     {:data   :port/sink\n                                           :config :port/sink}}})\n\n\n(rf/dispatch-sync [:register-meta meta-data])\n\n"]}