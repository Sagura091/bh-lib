{"version":3,"sources":["ui_component/atom/worldwind/globe/react_support.cljs"],"mappings":"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","names":["taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","ui-component.atom.worldwind.globe.react-support/find-in-children","children","idx","cljs.core/first","p1__59569#","cljs.core.filter","cljs.core._EQ_","ui-component.atom.worldwind.globe.react-support/update-children","this","new-children","old-children","new-keys","cljs.core/set","cljs.core.map","old-keys","added","clojure.set.difference","removed","cljs.core.doall","p1__59570#","ui-component.atom.worldwind.globe.layer/removeLayer","iter__4652__auto__","s__59573","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__59575","cljs.core/chunk-buffer","i__59574","map__59576","cljs.core/-nth","cljs.core/--destructure-map","cljs.core.get","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__59572","cljs.core/chunk-rest","map__59577","cljs.core/cons","cljs.core/rest","id","layer","z","p1__59571#","ui-component.atom.worldwind.globe.layer/addLayer","ui-component.atom.worldwind.globe.react-support/component-did-mount","dom-node","state","node","reagent.dom/dom-node","cljs.core/reset!","canvasId","cljs.core/deref","props","reagent.core/props","js/shadow.js.shim.module$worldwindjs.WorldWindow","cljs.core.swap_BANG_","cljs.core/assoc","ui-component.atom.worldwind.globe.projection/change-projection","s__59588","b__59590","i__59589","map__59591","iter__59587","map__59592","reagent.core/children","ui-component.atom.worldwind.globe.layer.controls/controls","ui-component.atom.worldwind.globe.layer.coordinates/coordinates","ui-component.atom.worldwind.globe.globe-time/change-time","ui-component.atom.worldwind.globe.react-support/component-did-update","old-argv","vec__59593","cljs.core.nth","vec__59596","_","new-props","reagent.core/argv","old-id","old-props","cljs.core.not_EQ_","cljs.core/chunk-first"],"sourcesContent":["(ns ui-component.atom.worldwind.globe.react-support\n  (:require [\"worldwindjs\" :as WorldWind]\n            [reagent.core :as r]\n            [reagent.dom :as rdom]\n            [clojure.set :as set]\n            [ui-component.atom.worldwind.globe.projection :as proj]\n            [ui-component.atom.worldwind.globe.globe-time :as gt]\n            [ui-component.atom.worldwind.globe.layer :as l]\n            [ui-component.atom.worldwind.globe.layer.controls :as controls]\n            [ui-component.atom.worldwind.globe.layer.coordinates :as coords]\n            [taoensso.timbre :as log]))\n\n\n(log/info \"ui-component.atom.worldwind.globe.react-support\")\n\n\n(defn- find-in-children [children idx]\n  (first (filter #(= (:id %) idx) children)))\n\n\n(defn update-children [this new-children old-children]\n  (let [new-keys (set (map :id new-children))\n        old-keys (set (map :id old-children))\n        added    (set/difference new-keys old-keys)\n        removed  (set/difference old-keys new-keys)]\n\n    ; remove old stuff\n    (if removed\n      (do\n        ;(log/info \"component-did-update removing\" removed)\n        (doall (map #(l/removeLayer this %) removed))\n        (.redraw (.-wwd this))))\n\n    ; add new stuff\n    (if added\n      (do\n        ;(log/info \"component-did-update adding\" added)\n        (doall\n          (for [{:keys [id layer z]} (map #(find-in-children new-children %) added)]\n            (do\n              ;(log/info \"adding\" idx child)\n              (l/addLayer this z layer))))\n        (.redraw (.-wwd this))))))\n\n\n(defn component-did-mount [dom-node state this]\n  ;(log/info \"component-did-mount\" @state)\n\n  (let [node (rdom/dom-node this)]\n    ;; This will trigger a re-render of the component.\n    (reset! dom-node node))\n\n  (let [canvasId (.-id @dom-node)\n        props    (r/props this)]\n\n    ;(log/info \"component-did-mount\" (.-id @dom-node)\n      ;\"//// props\" (r/props this)\n    ;  \"//// children\" (r/children this))\n\n    ;Create the WorldWindow using the ID of the canvas\n    (set! (.-wwd this) (WorldWind/WorldWindow. canvasId))\n    (swap! state assoc :wwd (.-wwd this))\n\n    ; Apply projection support\n    (set! (.-roundGlobe this) (.-globe (.-wwd this)))\n\n    (if (:projection props)\n      (do\n        ;(log/info \"set-projection\"  canvasId(:projection props))\n        (proj/change-projection this (:projection props))))\n\n    (doall\n      (for [{:keys [layer z]} (first (r/children this))]\n        (do\n          ;(log/info \"adding layer\" idx child)\n          (l/addLayer this z layer))))\n\n    ; add the controls layer\n    (if (= :max (:min-max props))\n      (l/addLayer this -1 (controls/controls this (str canvasId \" Controls\"))))\n\n    ; add the coordinates layer\n    (if (= :max (:min-max props))\n      (l/addLayer this -1 (coords/coordinates this (str canvasId \" Coordinates\"))))\n\n    (if (:time props)\n      (do\n        ;(log/info \"set-time\" canvasId (:time props))\n        (gt/change-time this (:id @state) (:time props))))\n\n    ;(log/info \"component-did-mount\" (sort (map #(.-displayName %) (.-layers (.-wwd this)))))\n\n    (.redraw (.-wwd this))))\n\n\n(defn component-did-update [dom-node state this old-argv]\n  (let [[_ new-props new-children] (r/argv this)\n        [old-id old-props old-children] old-argv]\n\n    ;(log/info \"component-did-update\"\n     ; \"//// old-children\" (sort (keys old-children))\n     ; \"//// old-props\" old-props\n     ; \"//// new-children\" (sort (keys new-children))\n     ; \"//// new-props\" new-props)\n\n    ;(log/info \"projection\"\n    ;  (:projection old-props)\n    ;  (:projection new-props))\n\n    (if (not= (:projection old-props) (:projection new-props))\n      (proj/change-projection this (:projection new-props)))\n\n    (if (not= (:time old-props) (:time new-props))\n      (do\n        ;(log/info \"update-time\" (:id @state) (:time new-props))\n        (gt/change-time this (:id @state) (:time new-props))))\n\n    (update-children this new-children old-children)\n\n    ;(log/info \"component-did-update\" (sort (map #(.-displayName %) (.-layers (.-wwd this)))))\n\n    (.redraw (.-wwd this))))\n\n\n\n(comment\n  (def children [{:id \":worldwind-globe-demo.ww-globe Blue Marble\", :layer \"dummy\", :z -1}\n                 {:id \":worldwind-globe-demo.ww-globe Night\", :layer \"dummy\", :z -1}\n                 {:id \":worldwind-globe-demo.ww-globe Compass\", :layer \"dummy\", :z -1}\n                 {:id \":worldwind-globe-demo.ww-globe Star Field\", :layer \"dummy\", :z -1}\n                 {:id \"image-15\", :layer \"dummy\", :z 10}\n                 {:id \"image\", :layer \"dummy\", :z 10}\n                 {:id \"image2\", :layer \"dummy\", :z 10}\n                 {:id \"line1\", :layer \"dummy\", :z 5}\n                 {:id \"line3\", :layer \"dummy\", :z 5}\n                 {:id \"circle\", :layer \"dummy\", :z 5}\n                 {:id \"circle2\", :layer \"dummy\", :z 5}\n                 {:id \"line2\", :layer \"dummy\", :z 5}\n                 {:id \"orlando\", :layer \"dummy\", :z 10}\n                 {:id \"square\", :layer \"dummy\", :z 5}\n                 {:id \"5-sided\", :layer \"dummy\", :z 5}])\n\n  (for [{:keys [layer z]} children]\n    {layer z})\n\n\n\n\n  ())\n\n"]}