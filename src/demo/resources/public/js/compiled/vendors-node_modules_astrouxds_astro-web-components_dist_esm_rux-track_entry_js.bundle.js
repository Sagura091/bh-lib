"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkDemo"] = self["webpackChunkDemo"] || []).push([["vendors-node_modules_astrouxds_astro-web-components_dist_esm_rux-track_entry_js"],{

/***/ "./node_modules/@astrouxds/astro-web-components/dist/esm/index-33004084.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@astrouxds/astro-web-components/dist/esm/index-33004084.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"r\": () => (/* binding */ requiredArgs),\n/* harmony export */   \"t\": () => (/* binding */ toDate)\n/* harmony export */ });\nfunction requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nfunction toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}\n\n\n\n\n//# sourceURL=webpack://Demo/./node_modules/@astrouxds/astro-web-components/dist/esm/index-33004084.js?");

/***/ }),

/***/ "./node_modules/@astrouxds/astro-web-components/dist/esm/index-be45298b.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@astrouxds/astro-web-components/dist/esm/index-be45298b.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"a\": () => (/* binding */ differenceInMilliseconds),\n/* harmony export */   \"d\": () => (/* binding */ differenceInHours)\n/* harmony export */ });\n/* harmony import */ var _index_33004084_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-33004084.js */ \"./node_modules/@astrouxds/astro-web-components/dist/esm/index-33004084.js\");\n\n\n/**\n * @name differenceInMilliseconds\n * @category Millisecond Helpers\n * @summary Get the number of milliseconds between the given dates.\n *\n * @description\n * Get the number of milliseconds between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of milliseconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many milliseconds are between\n * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?\n * const result = differenceInMilliseconds(\n *   new Date(2014, 6, 2, 12, 30, 21, 700),\n *   new Date(2014, 6, 2, 12, 30, 20, 600)\n * )\n * //=> 1100\n */\n\nfunction differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) {\n  (0,_index_33004084_js__WEBPACK_IMPORTED_MODULE_0__.r)(2, arguments);\n  var dateLeft = (0,_index_33004084_js__WEBPACK_IMPORTED_MODULE_0__.t)(dirtyDateLeft);\n  var dateRight = (0,_index_33004084_js__WEBPACK_IMPORTED_MODULE_0__.t)(dirtyDateRight);\n  return dateLeft.getTime() - dateRight.getTime();\n}\n\nvar MILLISECONDS_IN_HOUR = 3600000;\n/**\n * @name differenceInHours\n * @category Hour Helpers\n * @summary Get the number of hours between the given dates.\n *\n * @description\n * Get the number of hours between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of hours\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many hours are between 2 July 2014 06:50:00 and 2 July 2014 19:00:00?\n * var result = differenceInHours(\n *   new Date(2014, 6, 2, 19, 0),\n *   new Date(2014, 6, 2, 6, 50)\n * )\n * //=> 12\n */\n\nfunction differenceInHours(dirtyDateLeft, dirtyDateRight) {\n  (0,_index_33004084_js__WEBPACK_IMPORTED_MODULE_0__.r)(2, arguments);\n  var diff = differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) / MILLISECONDS_IN_HOUR;\n  return diff > 0 ? Math.floor(diff) : Math.ceil(diff);\n}\n\n\n\n\n//# sourceURL=webpack://Demo/./node_modules/@astrouxds/astro-web-components/dist/esm/index-be45298b.js?");

/***/ }),

/***/ "./node_modules/@astrouxds/astro-web-components/dist/esm/index-f52e2c8a.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@astrouxds/astro-web-components/dist/esm/index-f52e2c8a.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"d\": () => (/* binding */ differenceInMinutes)\n/* harmony export */ });\n/* harmony import */ var _index_be45298b_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-be45298b.js */ \"./node_modules/@astrouxds/astro-web-components/dist/esm/index-be45298b.js\");\n/* harmony import */ var _index_33004084_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-33004084.js */ \"./node_modules/@astrouxds/astro-web-components/dist/esm/index-33004084.js\");\n\n\n\nvar MILLISECONDS_IN_MINUTE = 60000;\n/**\n * @name differenceInMinutes\n * @category Minute Helpers\n * @summary Get the number of minutes between the given dates.\n *\n * @description\n * Get the signed number of full (rounded towards 0) minutes between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of minutes\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many minutes are between 2 July 2014 12:07:59 and 2 July 2014 12:20:00?\n * var result = differenceInMinutes(\n *   new Date(2014, 6, 2, 12, 20, 0),\n *   new Date(2014, 6, 2, 12, 7, 59)\n * )\n * //=> 12\n *\n * @example\n * // How many minutes are from 10:01:59 to 10:00:00\n * var result = differenceInMinutes(\n *   new Date(2000, 0, 1, 10, 0, 0),\n *   new Date(2000, 0, 1, 10, 1, 59)\n * )\n * //=> -1\n */\n\nfunction differenceInMinutes(dirtyDateLeft, dirtyDateRight) {\n  (0,_index_33004084_js__WEBPACK_IMPORTED_MODULE_1__.r)(2, arguments);\n  var diff = (0,_index_be45298b_js__WEBPACK_IMPORTED_MODULE_0__.a)(dirtyDateLeft, dirtyDateRight) / MILLISECONDS_IN_MINUTE;\n  return diff > 0 ? Math.floor(diff) : Math.ceil(diff);\n}\n\n\n\n\n//# sourceURL=webpack://Demo/./node_modules/@astrouxds/astro-web-components/dist/esm/index-f52e2c8a.js?");

/***/ }),

/***/ "./node_modules/@astrouxds/astro-web-components/dist/esm/rux-track.entry.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@astrouxds/astro-web-components/dist/esm/rux-track.entry.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"rux_track\": () => (/* binding */ RuxTrack)\n/* harmony export */ });\n/* harmony import */ var _index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-b64764b4.js */ \"./node_modules/@astrouxds/astro-web-components/dist/esm/index-b64764b4.js\");\n/* harmony import */ var _index_f52e2c8a_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-f52e2c8a.js */ \"./node_modules/@astrouxds/astro-web-components/dist/esm/index-f52e2c8a.js\");\n/* harmony import */ var _index_be45298b_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-be45298b.js */ \"./node_modules/@astrouxds/astro-web-components/dist/esm/index-be45298b.js\");\n/* harmony import */ var _index_33004084_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./index-33004084.js */ \"./node_modules/@astrouxds/astro-web-components/dist/esm/index-33004084.js\");\n\n\n\n\n\nconst ruxTrackCss = \".rux-track{background:var(--color-background-surface-default);width:fit-content;border-bottom:2px solid var(--color-background-base-default)}.rux-track__header{box-sizing:border-box;padding:11px 8px 13px 8px;background:var(--color-background-surface-default);border-right:2px solid var(--color-background-base-default);display:flex;align-items:center;font-family:var(--font-body-1-font-family);font-size:var(--font-body-1-font-size);font-weight:var(--font-body-1-font-weight);letter-spacing:var(--font-body-1-letter-spacing);position:sticky;left:0;min-width:184px;z-index:2}.rux-timeline{scrollbar-color:var(--color-border-interactive-muted);position:relative;display:grid;grid-template-rows:auto;background:var(--color-background-surface-default)}\";\n\nconst RuxTrack = class {\n  constructor(hostRef) {\n    (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);\n    /**\n     * @internal - The grid's width. Set automatically from the parent Timeline component.\n     */\n    this.width = 0;\n    /**\n     * @internal - The number of grid columns to display. Set automatically from the parent Timeline component.\n     */\n    this.columns = 0;\n    /**\n     * @internal - The Track's start date. Set automatically from the parent Timeline component.\n     */\n    this.start = '';\n    /**\n     * @internal - The Track's end date. Set automatically from the parent Timeline component.\n     */\n    this.end = '';\n    /**\n     * @internal - The Track's time zone. Set automatically from the parent Timeline component.\n     */\n    this.timezone = 'UTC';\n  }\n  handleUpdate(_newValue, old) {\n    if (old) {\n      this.initializeRows();\n    }\n  }\n  handleTimezoneUpdate() {\n    this.initializeRows();\n  }\n  handleTimeRegionChange(e) {\n    this.initializeRows();\n    e.stopPropagation();\n  }\n  connectedCallback() {\n    this._handleSlotChange = this._handleSlotChange.bind(this);\n  }\n  /**\n   * Tracks are displayed as a (CSS) grid of cells.\n   * Each cell can represent a minute or hour depending on the interval.\n   */\n  _calculateGridColumnFromTime(time) {\n    if (this.start) {\n      const timelineStart = new Date(this.start);\n      if (this.interval === 'hour') {\n        const difference = Math.abs((0,_index_f52e2c8a_js__WEBPACK_IMPORTED_MODULE_1__.d)(timelineStart, new Date(time)));\n        return difference + 2;\n      }\n      if (this.interval === 'day') {\n        const difference = Math.abs((0,_index_be45298b_js__WEBPACK_IMPORTED_MODULE_2__.d)(timelineStart, new Date(time)));\n        return difference + 2;\n      }\n    }\n    return 0;\n  }\n  _validateTimeRegion(start, end) {\n    if (!start) {\n      return {\n        success: false,\n        error: 'Time Region must have a start date provided',\n      };\n    }\n    if (!end) {\n      return {\n        success: false,\n        error: 'Time Region must have a end date provided',\n      };\n    }\n    if (new Date(start) > new Date(end)) {\n      return {\n        success: false,\n        error: `The Time Region start date must be before the end date: ${start} - ${end}`,\n      };\n    }\n    if (new Date(start) > new Date(this.end)) {\n      return {\n        success: false,\n        error: `The Time Region start date does not fall within the Timeline's range: ${start} - ${this.start}/${this.end}`,\n      };\n    }\n    if (new Date(start) < new Date(this.start) &&\n      new Date(end) < new Date(this.start)) {\n      return {\n        success: false,\n        error: `The Time Region start and end dates do not fall within the Timeline's range: ${start} - ${end}`,\n      };\n    }\n    return {\n      success: true,\n    };\n  }\n  /**\n   * Time Regions are dumb and don't know anything about the grid.\n   * The Track is responsible for lining up the Time Regions with the grid.\n   */\n  initializeRows() {\n    const children = [...this.el.children].filter((el) => el.tagName.toLowerCase() === 'rux-time-region');\n    children.forEach((el) => {\n      const isHidden = el.style.visibility === 'hidden';\n      const isValid = this._validateTimeRegion(el.start, el.end);\n      /**\n       * Store temp vars to use for calculating a Time Region's position in the grid\n       * If a Time Region's range is outside the Timeline's range (a partial event),\n       * visually it is treated as if its start/end dates = the timeline's.\n       * */\n      let start = el.start;\n      let end = el.end;\n      if (isValid.success) {\n        if (el.start < this.start && el.end > this.end) {\n          el.partial = 'ongoing';\n          start = this.start;\n          end = this.end;\n        }\n        else if (el.start < this.start) {\n          el.partial = 'start';\n          start = this.start;\n        }\n        else if (el.end > this.end) {\n          el.partial = 'end';\n          end = this.end;\n        }\n        else {\n          el.partial = 'none';\n        }\n        el.timezone = this.timezone;\n        el.style.gridRow = '1';\n        el.style.display = 'block';\n        const gridColumn = `${this._calculateGridColumnFromTime(start)} / ${this._calculateGridColumnFromTime(end)}`;\n        el.style.gridColumn = gridColumn;\n      }\n      else {\n        if (!isHidden) {\n          el.style.display = 'none';\n          console.log(isValid.error);\n        }\n      }\n    });\n  }\n  _handleSlotChange() {\n    this.initializeRows();\n  }\n  render() {\n    return ((0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"rux-timeline rux-track\", style: {\n        gridTemplateColumns: `[header] 200px repeat(${this.columns}, ${this.width}px)`,\n      }, part: \"container\" }, (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"rux-track__header\", part: \"track-header\", style: {\n        gridRow: '1',\n      } }, (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"slot\", { name: \"label\" })), (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"slot\", { onSlotchange: this._handleSlotChange }))));\n  }\n  get el() { return (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }\n  static get watchers() { return {\n    \"start\": [\"handleUpdate\"],\n    \"end\": [\"handleUpdate\"],\n    \"interval\": [\"handleUpdate\"],\n    \"timezone\": [\"handleTimezoneUpdate\"]\n  }; }\n};\nRuxTrack.style = ruxTrackCss;\n\n\n\n\n//# sourceURL=webpack://Demo/./node_modules/@astrouxds/astro-web-components/dist/esm/rux-track.entry.js?");

/***/ })

}]);