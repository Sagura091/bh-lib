"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkDemo"] = self["webpackChunkDemo"] || []).push([["node_modules_astrouxds_astro-web-components_dist_esm_rux-switch_entry_js"],{

/***/ "./node_modules/@astrouxds/astro-web-components/dist/esm/rux-switch.entry.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@astrouxds/astro-web-components/dist/esm/rux-switch.entry.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"rux_switch\": () => (/* binding */ RuxSwitch)\n/* harmony export */ });\n/* harmony import */ var _index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-b64764b4.js */ \"./node_modules/@astrouxds/astro-web-components/dist/esm/index-b64764b4.js\");\n/* harmony import */ var _utils_73490106_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils-73490106.js */ \"./node_modules/@astrouxds/astro-web-components/dist/esm/utils-73490106.js\");\n\n\n\nconst ruxSwitchCss = \".rux-help-text{margin-top:0.625rem;color:var(--color-text-primary);font-size:var(--font-body-2-font-size);font-family:var(--font-body-2-font-family);font-weight:var(--font-body-2-font-weight);letter-spacing:var(--font-body-2-letter-spacing)}.rux-error-text{display:flex;align-items:center;text-align:left;width:fit-content;-webkit-order:3;order:3;margin-top:0.625rem;color:var(--color-text-error);font-size:var(--font-body-2-bold-font-size);font-family:var(--font-body-2-bold-font-family);font-weight:var(--font-body-2-bold-font-weight);letter-spacing:var(--font-body-2-bold-letter-spacing)}.rux-error-text svg{margin-right:0.625rem}:host{display:block;--switch-background-color:var(--color-background-base-default);--switch-hover-on-color:var(--color-background-interactive-default);--switch-hover-off-color:var(--color-background-interactive-default);--switch-on-color:var(--color-background-interactive-default);--switch-off-border-color:var(--color-border-interactive-muted);padding-left:1%}.rux-switch{position:relative;display:flex;height:22px;white-space:nowrap}.rux-switch__button{display:flex;align-items:center;cursor:pointer}.rux-switch__button::before{position:relative;display:flex;content:\\\"\\\";border-radius:var(--switch-radius-track);border:1px solid;border-color:var(--switch-off-border-color);background-color:var(--switch-background-color);height:10px;width:30px;z-index:2;transition:0.1s background-color linear}.rux-switch__button::after{position:absolute;content:\\\"\\\";top:1px;left:-4px;z-index:3;height:18px;width:18px;border-radius:var(--radius-circle);border:1px solid var(--switch-hover-off-color);background-color:var(--switch-background-color);transition:0.1s left linear, 0.1s border-color linear}.rux-switch__input{appearance:none;-webkit-appearance:none;margin:0}.rux-switch__input:checked+.rux-switch__button::before{border-color:var(--switch-on-color);background-color:var(--switch-on-color)}.rux-switch__input:checked+.rux-switch__button::after{left:16px;background-color:var(--switch-background-color);border-color:var(--switch-hover-off-color)}.rux-switch__input:disabled+.rux-switch__button{cursor:not-allowed;opacity:var(--disabled-opacity)}.rux-switch:hover .rux-switch__input:not(:disabled)+.rux-switch__button::before,.rux-switch:hover .rux-switch__input:checked:not(:disabled)+.rux-switch__button::before{border-color:var(--switch-hover-off-color)}.rux-switch:hover .rux-switch__input:not(:disabled)+.rux-switch__button::after,.rux-switch:hover .rux-switch__input:checked:not(:disabled)+.rux-switch__button::after{border-color:var(--color-background-interactive-hover)}.rux-switch:hover .rux-switch__input:not(:disabled)+.rux-switch__button::before{background-color:var(--switch-background-color)}.rux-switch:hover .rux-switch__input:checked:not(:disabled)+.rux-switch__button::before{background-color:var(--switch-hover-on-color)}.rux-switch__label{margin-left:0.75rem}.rux-form-field{display:flex;flex-direction:column;color:var(--color-text-primary)}.hidden,:host([hidden]){display:none}\";\n\nlet id = 0;\nconst RuxSwitch = class {\n  constructor(hostRef) {\n    (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);\n    this.ruxChange = (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, \"ruxchange\", 7);\n    this.ruxInput = (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, \"ruxinput\", 7);\n    this.ruxBlur = (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, \"ruxblur\", 7);\n    this.switchId = `rux-switch-${++id}`;\n    this.hasLabelSlot = false;\n    /**\n     * The switch name\n     */\n    this.name = '';\n    /**\n     * The switch value\n     */\n    this.value = '';\n    /**\n     * Toggles checked state of a switch\n     */\n    this.checked = false;\n    /**\n     * Disables the switch via HTML disabled attribute. Switch takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored.\n     */\n    this.disabled = false;\n    this._onBlur = () => {\n      this.ruxBlur.emit();\n    };\n  }\n  handleLabelChange() {\n    this._handleSlotChange();\n  }\n  componentWillLoad() {\n    this._handleSlotChange();\n  }\n  connectedCallback() {\n    this._onChange = this._onChange.bind(this);\n    this._onInput = this._onInput.bind(this);\n    this._handleSlotChange = this._handleSlotChange.bind(this);\n  }\n  disconnectedCallback() {\n    this.el.shadowRoot.removeEventListener('slotchange', this._handleSlotChange);\n  }\n  get hasLabel() {\n    return this.label ? true : this.hasLabelSlot;\n  }\n  _handleSlotChange() {\n    this.hasLabelSlot = (0,_utils_73490106_js__WEBPACK_IMPORTED_MODULE_1__.h)(this.el, 'label');\n  }\n  _onChange(e) {\n    const target = e.target;\n    this.checked = target.checked;\n    this.ruxChange.emit(this.checked);\n  }\n  _onInput(e) {\n    const target = e.target;\n    this.value = target.value;\n    this.ruxInput.emit();\n  }\n  render() {\n    const { switchId, checked, disabled, name, value } = this;\n    (0,_utils_73490106_js__WEBPACK_IMPORTED_MODULE_1__.r)(true, this.el, this.name, this.value ? this.value : 'on', this.disabled, this.checked);\n    return ((0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: \"rux-form-field\", \"aria-checked\": `${checked}`, \"aria-hidden\": disabled ? 'true' : null, role: \"switch\" }, (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: {\n        'rux-switch': true,\n      } }, (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"input\", { role: \"switch\", type: \"checkbox\", class: \"rux-switch__input\", name: name, id: switchId, disabled: disabled, checked: checked, value: value, \"aria-checked\": `${checked}`, onChange: this._onChange, onInput: this._onInput, onBlur: this._onBlur }), (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"label\", { class: \"rux-switch__button\", htmlFor: switchId, part: \"switch\" }, (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"span\", { class: {\n        'rux-switch__label': true,\n        hidden: !this.hasLabel,\n      }, part: \"label\" }, (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"slot\", { onSlotchange: this._handleSlotChange, name: \"label\" }, this.label))))));\n  }\n  get el() { return (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }\n  static get watchers() { return {\n    \"label\": [\"handleLabelChange\"]\n  }; }\n};\nRuxSwitch.style = ruxSwitchCss;\n\n\n\n\n//# sourceURL=webpack://Demo/./node_modules/@astrouxds/astro-web-components/dist/esm/rux-switch.entry.js?");

/***/ }),

/***/ "./node_modules/@astrouxds/astro-web-components/dist/esm/utils-73490106.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@astrouxds/astro-web-components/dist/esm/utils-73490106.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"a\": () => (/* binding */ renderHiddenSelect),\n/* harmony export */   \"b\": () => (/* binding */ hasShadowDom),\n/* harmony export */   \"h\": () => (/* binding */ hasSlot),\n/* harmony export */   \"r\": () => (/* binding */ renderHiddenInput)\n/* harmony export */ });\nconst hasShadowDom = (el) => {\n  return !!el.shadowRoot && !!el.attachShadow;\n};\nfunction hasSlot(el, name) {\n  // Look for a named slot\n  if (name) {\n    return el.querySelector(`[slot=\"${name}\"]`) !== null;\n  }\n  // Look for a default slot\n  return [...el.childNodes].some((node) => {\n    var _a;\n    //If node is text and not an empty string return true\n    if (node.nodeType === node.TEXT_NODE &&\n      ((_a = node === null || node === void 0 ? void 0 : node.textContent) === null || _a === void 0 ? void 0 : _a.trim()) !== '') {\n      return true;\n    }\n    //If node is an element with a slot attribute return true\n    if (node.nodeType === node.ELEMENT_NODE) {\n      const el = node;\n      if (!el.hasAttribute('slot') &&\n        /*\n         * This condition is specifically for checkbox because\n         * the hidden input becomes slotted content\n         */\n        el.getAttribute('type') !== 'hidden') {\n        return true;\n      }\n    }\n    return false;\n  });\n}\n/**\n* This method is used to add a hidden input to a host element that contains\n* a Shadow DOM. It does not add the input inside of the Shadow root which\n* allows it to be picked up inside of forms. It should contain the same\n* values as the host element.\n* https://github.com/ionic-team/ionic-framework/blob/ae96563fb3c4612cb8585292b389ee746f5759f7/core/src/utils/helpers.ts#L198\n\n*\n* @param always Add a hidden input even if the container does not use Shadow\n* @param container The element where the input will be added\n* @param name The name of the input\n* @param value The value of the input\n* @param disabled If true, the input is disabled\n* @param checked Optional. If true, the input is checked\n*/\nconst renderHiddenInput = (always, container, name, value, disabled, checked) => {\n  let input = container.querySelector('input.aux-input');\n  if (always || hasShadowDom(container)) {\n    if (checked || checked == undefined) {\n      if (!input) {\n        input = container.ownerDocument.createElement('input');\n        input.type = 'hidden';\n        input.classList.add('aux-input');\n        container.appendChild(input);\n      }\n      input.disabled = disabled;\n      input.name = name;\n      input.value = value || '';\n    }\n    else {\n      if (input) {\n        input.remove();\n      }\n    }\n  }\n};\n/**\n * Renders multiple hidden inputs from an array of values\n * Used in multiselect\n * @param always\n * @param container\n * @param name\n * @param value\n * @param disabled\n */\nconst renderHiddenSelect = (always, container, name, value, disabled) => {\n  // Clear any existing hidden options. May be more performant to edit their values instead though.\n  let inputs = container.querySelectorAll('input.aux-select');\n  if (inputs) {\n    for (const elem of inputs) {\n      elem.remove();\n    }\n  }\n  if (always || hasShadowDom(container)) {\n    if (Array.isArray(value)) {\n      for (const el in value) {\n        let input = container.ownerDocument.createElement('input');\n        input.type = 'hidden';\n        input.classList.add('aux-select');\n        input.classList.add(`aux-select-${el}`);\n        input.disabled = disabled;\n        input.name = name;\n        if (value[el]) {\n          input.value = value[el];\n        }\n        container.appendChild(input);\n      }\n    }\n    else {\n      let input = container.ownerDocument.createElement('input');\n      input.type = 'hidden';\n      input.classList.add('aux-select');\n      input.classList.add(`aux-select-0`);\n      input.disabled = disabled;\n      input.name = name;\n      if (value) {\n        input.value = value;\n      }\n      container.appendChild(input);\n    }\n  }\n};\n\n\n\n\n//# sourceURL=webpack://Demo/./node_modules/@astrouxds/astro-web-components/dist/esm/utils-73490106.js?");

/***/ })

}]);