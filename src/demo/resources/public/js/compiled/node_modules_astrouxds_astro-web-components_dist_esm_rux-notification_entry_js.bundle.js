"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkDemo"] = self["webpackChunkDemo"] || []).push([["node_modules_astrouxds_astro-web-components_dist_esm_rux-notification_entry_js"],{

/***/ "./node_modules/@astrouxds/astro-web-components/dist/esm/rux-notification.entry.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@astrouxds/astro-web-components/dist/esm/rux-notification.entry.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"rux_notification\": () => (/* binding */ RuxNotification)\n/* harmony export */ });\n/* harmony import */ var _index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-b64764b4.js */ \"./node_modules/@astrouxds/astro-web-components/dist/esm/index-b64764b4.js\");\n\n\nconst ruxNotificationCss = \":host{--notification-text-color:var(--color-palette-neutral-1000);display:flex;justify-content:space-between;flex-wrap:nowrap;flex-grow:1;align-items:center;align-content:center;top:-4.375rem;left:0;height:4.375rem;width:100%;position:absolute;background-color:var(--notification-banner-color-background-standby);border:1px solid var(--notification-banner-color-border-standby);transition:top 0.5s ease;box-sizing:border-box;font-family:var(--font-heading-5-font-family);font-size:var(--font-heading-5-font-size);font-weight:var(--font-heading-5-font-weight);letter-spacing:var(--font-heading-5-letter-spacing);color:var(--notification-text-color)}:host rux-icon{align-items:center;justify-content:flex-end;padding:0 1.25rem 0 0.625rem}:host .rux-notification__message{padding:1.063rem 1.25rem;white-space:nowrap;overflow:hidden}:host([hidden]){display:none}:host(.rux-notification-banner-0ba5409c--open){top:0}:host(.rux-notification-banner--small){height:2rem;font-family:var(--font-body-1-font-family);font-weight:var(--font-body-1-font-weight);font-size:var(--font-body-1-font-size);letter-spacing:var(--font-body-1-letter-spacing);line-height:var(--font-body-1-line-height);font-weight:var(--font-body-1-font-weight)}:host(.rux-notification-banner--small) .rux-notification__message{padding:0.406rem 0.625rem}.rux-notification__message{padding:1.063rem 0}:host([status=off]){background-color:var(--notification-banner-color-background-off);border-color:var(--notification-banner-color-border-off)}:host([status=off]) rux-icon{color:var(--notification-banner-icon-color-fill-off)}:host([status=standby]){background-color:var(--notification-banner-color-background-standby);border-color:var(--notification-banner-color-border-standby)}:host([status=standby]) rux-icon{color:var(--notification-banner-icon-color-fill-standby)}:host([status=normal]){background-color:var(--notification-banner-color-background-normal);border-color:var(--notification-banner-color-border-normal)}:host([status=normal]) rux-icon{color:var(--notification-banner-icon-color-fill-normal)}:host([status=caution]){background-color:var(--notification-banner-color-background-caution);border-color:var(--notification-banner-color-border-caution)}:host([status=caution]) rux-icon{color:var(--notification-banner-icon-color-fill-caution)}:host([status=serious]){background-color:var(--notification-banner-color-background-serious);border-color:var(--notification-banner-color-border-serious)}:host([status=serious]) rux-icon{color:var(--notification-banner-icon-color-fill-serious)}:host([status=critical]){background-color:var(--notification-banner-color-background-critical);border-color:var(--notification-banner-color-border-critical)}:host([status=critical]) rux-icon{color:var(--notification-banner-icon-color-fill-critical)}\";\n\nconst RuxNotification = class {\n  constructor(hostRef) {\n    (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);\n    this.ruxClosed = (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, \"ruxclosed\", 7);\n    /**\n     *  Set to true to display the Banner and begin countdown to close (if a close-after Number value is provided).\n     */\n    this.open = false;\n    /**\n     *  Message for the notification banner.\n     */\n    this.message = '';\n    /**\n     *  The background color. Possible values include 'off', 'standby', 'normal', 'caution', 'serious' and 'critical'. See [Astro UXDS Status System](https://astrouxds.com/patterns/status-system/).\n     */\n    this.status = 'standby';\n    /**\n     * Changes the size of the banner to a small variant.\n     */\n    this.small = false;\n    this._timeoutRef = null;\n  }\n  watchHandler() {\n    this._updated();\n    if (!this.open) {\n      this.ruxClosed.emit();\n    }\n  }\n  connectedCallback() {\n    this._updated();\n  }\n  _updated() {\n    if (this._closeAfter && this.open) {\n      this._timeoutRef = window.setTimeout(() => {\n        this.open = false;\n      }, this._closeAfter);\n    }\n  }\n  _onClick() {\n    if (this._timeoutRef) {\n      clearTimeout(this._timeoutRef);\n    }\n    this.open = false;\n  }\n  get _closeAfter() {\n    //* as long as it's less than 1000, they put in seconds. Convert that here.\n    if (this.closeAfter && this.closeAfter <= 999) {\n      //it's in seconds\n      this.closeAfter *= 1000; // change into ms\n    }\n    if ((this.closeAfter && this.closeAfter > 10000) ||\n      (this.closeAfter && this.closeAfter < 2000)) {\n      // if this number is larger than 10s or smaller than 2s, enforce minimum 2s delay\n      this.closeAfter = 2000;\n    }\n    return this.closeAfter;\n  }\n  render() {\n    return (\n    /**\n     * Add a randomly generated class name when the banner is open\n     * so that we can achieve backwards compatibility if anybody is\n     * styling the host element.\n     *\n     * We shouldn't be changing the component's class because the developer\n     * has full control of it and can easily override it. But by using\n     * a random string, we reduce the chances of that happening unknowingly.\n     */\n    (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: {\n        'rux-notification-banner-0ba5409c--open': this.open,\n        'rux-notification-banner--small': this.small,\n      } }, (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { part: \"message\", class: \"rux-notification__message\" }, `${this.message}`), (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"rux-icon\", { role: \"button\", label: \"Close notification\", onClick: () => this._onClick(), icon: \"clear\", size: this.small ? '16px' : '36px', exportparts: \"icon\" })));\n  }\n  static get watchers() { return {\n    \"open\": [\"watchHandler\"],\n    \"closeAfter\": [\"watchHandler\"]\n  }; }\n};\nRuxNotification.style = ruxNotificationCss;\n\n\n\n\n//# sourceURL=webpack://Demo/./node_modules/@astrouxds/astro-web-components/dist/esm/rux-notification.entry.js?");

/***/ })

}]);