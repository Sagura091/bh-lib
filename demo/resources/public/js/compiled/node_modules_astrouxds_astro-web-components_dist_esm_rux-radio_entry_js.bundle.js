"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkDemo"] = self["webpackChunkDemo"] || []).push([["node_modules_astrouxds_astro-web-components_dist_esm_rux-radio_entry_js"],{

/***/ "./node_modules/@astrouxds/astro-web-components/dist/esm/rux-radio.entry.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@astrouxds/astro-web-components/dist/esm/rux-radio.entry.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   rux_radio: () => (/* binding */ RuxRadio)\n/* harmony export */ });\n/* harmony import */ var _index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-b64764b4.js */ \"./node_modules/@astrouxds/astro-web-components/dist/esm/index-b64764b4.js\");\n/* harmony import */ var _utils_73490106_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils-73490106.js */ \"./node_modules/@astrouxds/astro-web-components/dist/esm/utils-73490106.js\");\n\n\n\nconst ruxRadioCss = \":host{display:inline-block;box-sizing:border-box;--radio-hover-border-color:var(--color-background-interactive-hover);--radio-border-color:var(--color-border-interactive-muted);--radio-label-color:var(--color-text-primary);--radio-background-color:var(--color-background-base-default);--radio-selected-color:var(--color-background-interactive-default)}:host *,:host *::before,:host *::after{box-sizing:inherit}.rux-form-field{display:flex;flex-direction:column;font-family:var(--font-body-1-font-family);font-size:var(--font-body-1-font-size);letter-spacing:var(--font-body-1-letter-spacing);font-weight:var(--font-body-1-font-weight);color:var(--color-text-primary)}.rux-radio{display:flex;position:relative;line-height:1.2}.rux-radio input[type=radio]{-webkit-appearance:none;appearance:none}.rux-radio input[type=radio]+label{position:relative;display:flex;align-items:center;justify-content:flex-start;margin-left:-8px;color:var(--radio-label-color);letter-spacing:0.5px;cursor:pointer}.rux-radio input[type=radio]+label::before{box-sizing:border-box;display:flex;flex-shrink:0;flex-grow:0;content:\\\"\\\";align-self:start;height:1.125rem;width:1.125rem;margin:0 0.625rem 0 0;border:1px solid var(--radio-border-color);border-radius:var(--radius-circle);background-color:var(--radio-background-color)}.rux-radio input[type=radio]+label::after{position:absolute;top:5px;display:flex;content:\\\"\\\"}.rux-radio input[type=radio]+.rux-radio--no-label::before{margin:0}.rux-radio input[type=radio]:checked+label::before{background-color:var(--radio-background-color);border-color:var(--radio-border-color)}.rux-radio input[type=radio]:checked+label::after{position:absolute;top:5px;display:flex;content:\\\"\\\";left:5px;height:8px;width:8px;border-radius:var(--radius-circle);background-color:var(--color-background-interactive-default)}.rux-radio input[type=radio]:disabled+label{cursor:not-allowed;opacity:var(--disabled-opacity)}.rux-radio input[type=radio]:not(:disabled):hover+label::before,.rux-radio input[type=radio]:not(:disabled):checked:hover+label::before{border-color:var(--radio-hover-border-color)}.rux-radio input[type=radio]:not(:disabled):hover+label::after,.rux-radio input[type=radio]:not(:disabled):checked:hover+label::after{background-color:var(--radio-selected-color)}:host([hidden]){display:none}\";\n\nlet id = 0;\nconst RuxRadio = class {\n  constructor(hostRef) {\n    (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);\n    this.ruxBlur = (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, \"ruxblur\", 7);\n    this.radioId = `rux-radio-${++id}`;\n    this.radioGroup = null;\n    this.hasLabelSlot = false;\n    /**\n     * The radio name\n     */\n    this.name = '';\n    /**\n     * The radio value\n     */\n    this.value = '';\n    /**\n     * Toggles checked state of a radio\n     */\n    this.checked = false;\n    /**\n     * Disables the radio via HTML disabled attribute. Radio takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored.\n     */\n    this.disabled = false;\n    this._onBlur = () => {\n      this.ruxBlur.emit();\n    };\n  }\n  handleLabelChange() {\n    this._handleSlotChange();\n  }\n  connectedCallback() {\n    this._onChange = this._onChange.bind(this);\n    this._handleSlotChange = this._handleSlotChange.bind(this);\n    this.radioGroup = this.el.closest('rux-radio-group');\n    this._syncFromGroup = this._syncFromGroup.bind(this);\n    if (this.radioGroup) {\n      this._syncFromGroup();\n      this.radioGroup.addEventListener('ruxchange', this._syncFromGroup);\n    }\n  }\n  componentWillLoad() {\n    this._handleSlotChange();\n  }\n  disconnectedCallback() {\n    if (this.radioGroup) {\n      this.radioGroup.removeEventListener('ruxchange', this._syncFromGroup);\n    }\n  }\n  _handleSlotChange() {\n    this.hasLabelSlot = (0,_utils_73490106_js__WEBPACK_IMPORTED_MODULE_1__.h)(this.el);\n  }\n  /**\n   * Sets checked property when the parent Radio Group value changes.\n   */\n  _syncFromGroup() {\n    if (this.radioGroup && this.radioGroup.value) {\n      this.checked = this.radioGroup.value === this.value;\n    }\n  }\n  _onChange(e) {\n    const target = e.target;\n    this.checked = target.checked;\n  }\n  get hasLabel() {\n    return this.label ? true : this.hasLabelSlot;\n  }\n  render() {\n    const { label, radioId, checked, disabled, name, value, _onChange, _onBlur, hasLabel, } = this;\n    return ((0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"rux-form-field\", part: \"form-field\" }, (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { class: \"rux-radio\" }, (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"input\", { type: \"radio\", name: name, id: radioId, disabled: disabled, checked: checked, value: value, onChange: _onChange, onBlur: _onBlur }), (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"label\", { htmlFor: radioId, part: \"label\", class: {\n        'rux-radio--no-label': !hasLabel,\n      } }, (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"slot\", null, label)))));\n  }\n  get el() { return (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }\n  static get watchers() { return {\n    \"label\": [\"handleLabelChange\"]\n  }; }\n};\nRuxRadio.style = ruxRadioCss;\n\n\n\n\n//# sourceURL=webpack://Demo/./node_modules/@astrouxds/astro-web-components/dist/esm/rux-radio.entry.js?");

/***/ }),

/***/ "./node_modules/@astrouxds/astro-web-components/dist/esm/utils-73490106.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@astrouxds/astro-web-components/dist/esm/utils-73490106.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ renderHiddenSelect),\n/* harmony export */   b: () => (/* binding */ hasShadowDom),\n/* harmony export */   h: () => (/* binding */ hasSlot),\n/* harmony export */   r: () => (/* binding */ renderHiddenInput)\n/* harmony export */ });\nconst hasShadowDom = (el) => {\n  return !!el.shadowRoot && !!el.attachShadow;\n};\nfunction hasSlot(el, name) {\n  // Look for a named slot\n  if (name) {\n    return el.querySelector(`[slot=\"${name}\"]`) !== null;\n  }\n  // Look for a default slot\n  return [...el.childNodes].some((node) => {\n    var _a;\n    //If node is text and not an empty string return true\n    if (node.nodeType === node.TEXT_NODE &&\n      ((_a = node === null || node === void 0 ? void 0 : node.textContent) === null || _a === void 0 ? void 0 : _a.trim()) !== '') {\n      return true;\n    }\n    //If node is an element with a slot attribute return true\n    if (node.nodeType === node.ELEMENT_NODE) {\n      const el = node;\n      if (!el.hasAttribute('slot') &&\n        /*\n         * This condition is specifically for checkbox because\n         * the hidden input becomes slotted content\n         */\n        el.getAttribute('type') !== 'hidden') {\n        return true;\n      }\n    }\n    return false;\n  });\n}\n/**\n* This method is used to add a hidden input to a host element that contains\n* a Shadow DOM. It does not add the input inside of the Shadow root which\n* allows it to be picked up inside of forms. It should contain the same\n* values as the host element.\n* https://github.com/ionic-team/ionic-framework/blob/ae96563fb3c4612cb8585292b389ee746f5759f7/core/src/utils/helpers.ts#L198\n\n*\n* @param always Add a hidden input even if the container does not use Shadow\n* @param container The element where the input will be added\n* @param name The name of the input\n* @param value The value of the input\n* @param disabled If true, the input is disabled\n* @param checked Optional. If true, the input is checked\n*/\nconst renderHiddenInput = (always, container, name, value, disabled, checked) => {\n  let input = container.querySelector('input.aux-input');\n  if (always || hasShadowDom(container)) {\n    if (checked || checked == undefined) {\n      if (!input) {\n        input = container.ownerDocument.createElement('input');\n        input.type = 'hidden';\n        input.classList.add('aux-input');\n        container.appendChild(input);\n      }\n      input.disabled = disabled;\n      input.name = name;\n      input.value = value || '';\n    }\n    else {\n      if (input) {\n        input.remove();\n      }\n    }\n  }\n};\n/**\n * Renders multiple hidden inputs from an array of values\n * Used in multiselect\n * @param always\n * @param container\n * @param name\n * @param value\n * @param disabled\n */\nconst renderHiddenSelect = (always, container, name, value, disabled) => {\n  // Clear any existing hidden options. May be more performant to edit their values instead though.\n  let inputs = container.querySelectorAll('input.aux-select');\n  if (inputs) {\n    for (const elem of inputs) {\n      elem.remove();\n    }\n  }\n  if (always || hasShadowDom(container)) {\n    if (Array.isArray(value)) {\n      for (const el in value) {\n        let input = container.ownerDocument.createElement('input');\n        input.type = 'hidden';\n        input.classList.add('aux-select');\n        input.classList.add(`aux-select-${el}`);\n        input.disabled = disabled;\n        input.name = name;\n        if (value[el]) {\n          input.value = value[el];\n        }\n        container.appendChild(input);\n      }\n    }\n    else {\n      let input = container.ownerDocument.createElement('input');\n      input.type = 'hidden';\n      input.classList.add('aux-select');\n      input.classList.add(`aux-select-0`);\n      input.disabled = disabled;\n      input.name = name;\n      if (value) {\n        input.value = value;\n      }\n      container.appendChild(input);\n    }\n  }\n};\n\n\n\n\n//# sourceURL=webpack://Demo/./node_modules/@astrouxds/astro-web-components/dist/esm/utils-73490106.js?");

/***/ })

}]);