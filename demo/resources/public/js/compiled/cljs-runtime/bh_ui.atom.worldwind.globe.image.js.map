{"version":3,"sources":["bh_ui/atom/worldwind/globe/image.cljs"],"mappings":";AAQA,AAAAA,0DAAAC,mCAAA,qDAAA,mCAAA,KAAA,EAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA;GAAA,OAAA,KAAA,YAAA;AAGA,AAAAC,wFAAA,gEAAA,WAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;SAAA,AAAAE,4CAAAF,eAAA,hEAAkDG;UAAlD,AAAAD,4CAAAF,eAAA,jEAAqDI;mBAArD,AAAAF,4CAAAF,eAAA,1EAAyDK;gBAAzD,AAAAH,4CAAAF,eAAA,vEAAsEM;QAAtE,AAAAJ,4CAAAF,eAAA,/DAAgFO;AAAhF,AAGE,GAEE,EAAK,AAACC,cAAIF,gBACR,AAACG,cAAI,AAACD,cAAIH;AAAgB,IAAMA,mBAAa,AAACK,oDAA8BJ;IAC5CK,eAAa,KAAAC,+CAAyB,AAACC,uEAAcR,kBAAcD;AADzE,AAEE,CAAM,AAAkBO,8BAAc,AAAkBG;;AAExD,sDAAA,/CAACC,4CAAiBZ,sFAAIQ,qBAAc,iBAAAK,mBAAIT;AAAJ,AAAA,oBAAAS;AAAAA;;AAAA;;;;AAPpE,GAUE,EAAK,AAACP,cAAI,AAACD,cAAIF,iBACb,AAACE,cAAIH;AAAe,IAAMM,eAAa,KAAAC,+CAAyB,AAACC,uEAAcR,cAAcD;AAAzE,AACE,CAAM,AAAkBO,8BAAc,AAAkBG;;AACxD,sDAAA,/CAACC,4CAAiBZ,sFAAIQ,qBAAc,iBAAAK,mBAAIT;AAAJ,AAAA,oBAAAS;AAAAA;;AAAA;;;;AAb9D,GAgBE,AAACR,cAAIH;AAAc,IAAMM,eAAa,KAAAC,+CAAyB,AAACC,uEAAcR,cAAcD;AAAzE,AACE,CAAM,AAAkBO,8BAAc,AAAkBG;;AACxD,sDAAA,/CAACC,4CAAiBZ,sFAAIQ,qBAAc,iBAAAK,mBAAIT;AAAJ,AAAA,oBAAAS;AAAAA;;AAAA;;;;AAlB3D,AAAA,0FAAA,mDAAA;;;;;;AAyBF","names":["taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","bh-ui.atom.worldwind.globe.shape/make-shape","p__59581","map__59582","cljs.core/--destructure-map","cljs.core.get","id","url","bounding-box","locations","z","cljs.core/seq","cljs.core/not","bh-ui.utils.bounding-box/locations->bounding-box","surfaceImage","js/shadow.js.shim.module$worldwindjs.SurfaceImage","bh_ui.atom.worldwind.globe.sector.sector","js/shadow.js.shim.module$worldwindjs","bh-ui.atom.worldwind.globe.shape/wrap-shape","or__4253__auto__"],"sourcesContent":["(ns bh-ui.atom.worldwind.globe.image\n  (:require [\"worldwindjs\" :as WorldWind]\n            [bh-ui.atom.worldwind.globe.shape :as shape]\n            [bh-ui.atom.worldwind.globe.sector :as sector]\n            [bh-ui.utils.bounding-box :as bound]\n            [taoensso.timbre :as log]))\n\n\n(log/info \"bh-ui.atom.worldwind.globe.image\")\n\n\n(defmethod shape/make-shape :shape/image [{:keys [id url bounding-box locations z]}]\n  ;(log/info \"shape/make-shape :shape/image\" id url sector locations)\n\n  (cond\n    ; locations, but NOT bounding-box\n    (and (seq locations)\n      (not (seq bounding-box))) (let [bounding-box (bound/locations->bounding-box locations)\n                                      surfaceImage (WorldWind/SurfaceImage. (sector/sector bounding-box) url)]\n                                  (set! (.-resamplingMode surfaceImage) (.-FILTER_NEAREST WorldWind))\n\n                                  (shape/wrap-shape id [surfaceImage] (or z 10)))\n\n    ; bounding-box, but NOT locations\n    (and (not (seq locations))\n      (seq bounding-box)) (let [surfaceImage (WorldWind/SurfaceImage. (sector/sector bounding-box) url)]\n                            (set! (.-resamplingMode surfaceImage) (.-FILTER_NEAREST WorldWind))\n                            (shape/wrap-shape id [surfaceImage] (or z 10)))\n\n    ; default to bounding-box, if it exists\n    (seq bounding-box) (let [surfaceImage (WorldWind/SurfaceImage. (sector/sector bounding-box) url)]\n                         (set! (.-resamplingMode surfaceImage) (.-FILTER_NEAREST WorldWind))\n                         (shape/wrap-shape id [surfaceImage] (or z 10)))\n\n    ; if BOTH are missing, \"fail\"\n    :else [:div \":shape/image is missing both :bounding-box AND :locations parameters\"]))\n\n\n\n(comment\n  (def bounding-box)\n\n\n\n  ())"]}