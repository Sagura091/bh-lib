{"version":3,"sources":["bh_ui/utils/locals.cljs"],"mappings":";AASA,AAAAA,0DAAAC,mCAAA,qDAAA,qBAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA;GAAA,OAAA,KAAA,YAAA;AAGA,AAAA,AACA,AAAA,AACA,AAAA,AACA,AAAA,AACA,AAAA,AAGA,yDAAA,zDAACC,2JAEC,EAAA,AAAAC,iDAAA,cAAAC,HAAYW;AAAZ,AAAA,IAAAV,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAAgBW;gBAAhB,AAAAV,4CAAAD,WAAA,IAAA,vEAAkBY;aAAlB,AAAAX,4CAAAD,WAAA,IAAA,pEAA4Ba;AAA5B,AAAA,IAAAX,6BAAA;AAAA,AAAA,IAAA,AAAA,AAAAC,gDAAA,AAAA;;AAAA,IAAAC,wBAAA,EAAA,iBAAAA,wBAAA,6CAAA,iBAAAA,wBAAA,+CAAA,iBAAAA,tJAEOU,sFAAGC,wFAAOL;AAFjB,AAAA,AAAAL,iDAAA,2CAAA,8DAAA,EAAA,qEAAA,IAAA,yDAAAD,sBAAA,sDAAA,AAAA,sDAAA,qEAAA;;AAAAA;KAAA,iBAAAA,wBAAA,mFAAA,kEAAA,iBAAAA,wBAEiCQ;AAFjC,AAAA,AAAAP,iDAAA,2CAAA,8DAAA,EAAA,qEAAA,IAAA,yDAAAD,sBAAA,sDAAA,AAAA,kEAAA,qEAAA;;AAAAA;;AAAA,AAAA,AAAAC,iDAAA,2CAAA,8DAAA,EAAA,qEAAA,IAAA,yDAAAD,sBAAA,sDAAA,AAAA,+NAAA,qEAAA;;AAAAA;;AAAA,AAAA,AAAAC,iDAAA,2CAAA,8DAAA,EAAA,qEAAA,IAAA,yDAAAD,sBAAA,sDAAA,AAAA,mWAAA,qEAAA;;AAAAA;KAAA,iBAAAA,wBAE6CS;AAF7C,AAAA,AAAAR,iDAAA,2CAAA,8DAAA,EAAA,qEAAA,IAAA,yDAAAD,sBAAA,sDAAA,AAAA,6DAAA,qEAAA;;AAAAA;;AAAA,AAAA,AAAAC,iDAAA,2CAAA,8DAAA,EAAA,qEAAA,IAAA,yDAAAD,sBAAA,sDAAA,AAAA,oeAAA,qEAAA;;AAAAA;MAAA,iBAAAA,wBAAA,AAAA,iBAAAA,wBAKMM;AALN,AAAA,AAAAL,iDAAA,2CAAA,8DAAA,EAAA,qEAAA,KAAA,yDAAAD,sBAAA,sDAAA,AAAA,sDAAA,qEAAA;;AAAAA;;AAAA,AAAA,AAAAC,iDAAA,2CAAA,8DAAA,EAAA,qEAAA,IAAA,yDAAAD,sBAAA,sDAAA,AAAA,2HAAA,qEAAA;;AAAAA;KAAA,iBAAAA,wBAAA,AAAA,iBAAAA,wBAAA,mBAAA,iBAAAA,pCAQOY,4DAASN;AARhB,AAAA,AAAAL,iDAAA,2CAAA,8DAAA,EAAA,qEAAA,KAAA,yDAAAD,sBAAA,sDAAA,AAAA,sDAAA,qEAAA;;AAAAA;KAAA,iBAAAA,wBAAA,mFAAA,kEAAA,iBAAAA,wBAQgCQ;AARhC,AAAA,AAAAP,iDAAA,2CAAA,8DAAA,EAAA,qEAAA,KAAA,yDAAAD,sBAAA,sDAAA,AAAA,kEAAA,qEAAA;;AAAAA;;AAAA,AAAA,AAAAC,iDAAA,2CAAA,8DAAA,EAAA,qEAAA,KAAA,yDAAAD,sBAAA,sDAAA,AAAA,+NAAA,qEAAA;;AAAAA;KAAA,iBAAAA,wBAQ2CS;AAR3C,AAAA,AAAAR,iDAAA,2CAAA,8DAAA,EAAA,qEAAA,KAAA,yDAAAD,sBAAA,sDAAA,AAAA,6DAAA,qEAAA;;AAAAA;;AAAA,AAAA,AAAAC,iDAAA,2CAAA,8DAAA,EAAA,qEAAA,KAAA,yDAAAD,sBAAA,sDAAA,AAAA,maAAA,qEAAA;;AAAAA;;AAAA,AAAA,AAAAC,iDAAA,2CAAA,8DAAA,EAAA,qEAAA,KAAA,yDAAAD,sBAAA,sDAAA,AAAA,weAAA,qEAAA;;AAAAA;;AAAA,AAAA,AAAAC,iDAAA,2CAAA,8DAAA,EAAA,qEAAA,IAAA,yDAAAD,sBAAA,sDAAA,AAAA,4oCAAA,qEAAA;;AAAAA;gBAAA,IAAAE,IAAAC;AAAA,AAAA,MAAAD;IAAA,cAAAE,HAAYE;AAAZ,AAAA,IAAAD,aAAAD;QAAA,AAAAP,4CAAAQ,WAAA,IAAA,/DAAgBE;gBAAhB,AAAAV,4CAAAQ,WAAA,IAAA,vEAAkBG;aAAlB,AAAAX,4CAAAQ,WAAA,IAAA,pEAA4BI;AAA5B,AAEE,GAAI,AAACC,6CAAE,kDAAA,mFAAA,rIAACC,+CAAOL,wJAAgBE,mBAAYC;AACzC,AAEEH;;AACF,AAEE,6BAAA,mFAAA,zGAACM,mBAASN,wJAAgBE,kBAAWC;;;AAG7C,yDAAA,zDAAChB,8IAEC,EAAA,AAAAC,iDAAA,cAAAmB,HAAYP;AAAZ,AAAA,IAAAQ,aAAAD;QAAA,AAAAhB,4CAAAiB,WAAA,IAAA,/DAAgBP;iBAAhB,AAAAV,4CAAAiB,WAAA,IAAA,xEAAkBI;aAAlB,AAAArB,4CAAAiB,WAAA,IAAA,pEAA6BL;AAA7B,AAAA,IAAAX,6BAAA;AAAA,AAAA,IAAA,AAAA,AAAAC,gDAAA,AAAA;;AAAA,IAAAC,wBAAA,EAAA,iBAAAA,wBAAA,6CAAA,iBAAAA,wBAAA,+CAAA,iBAAAA,tJAEOU,sFAAGC,wFAAOL;AAFjB,AAAA,AAAAL,iDAAA,2CAAA,8DAAA,EAAA,qEAAA,IAAA,yDAAAD,sBAAA,sDAAA,AAAA,sDAAA,qEAAA;;AAAAA;KAAA,iBAAAA,wBAEoBkB;AAFpB,AAAA,AAAAjB,iDAAA,2CAAA,8DAAA,EAAA,qEAAA,IAAA,yDAAAD,sBAAA,sDAAA,AAAA,sEAAA,qEAAA;;AAAAA;;AAAA,AAAA,AAAAC,iDAAA,2CAAA,8DAAA,EAAA,qEAAA,IAAA,yDAAAD,sBAAA,sDAAA,AAAA,0MAAA,qEAAA;;AAAAA;KAAA,iBAAAA,wBAEgCS;AAFhC,AAAA,AAAAR,iDAAA,2CAAA,8DAAA,EAAA,qEAAA,IAAA,yDAAAD,sBAAA,sDAAA,AAAA,6DAAA,qEAAA;;AAAAA;;AAAA,AAAA,AAAAC,iDAAA,2CAAA,8DAAA,EAAA,qEAAA,IAAA,yDAAAD,sBAAA,sDAAA,AAAA,2UAAA,qEAAA;;AAAAA;MAAA,iBAAAA,wBAAA,AAAA,iBAAAA,wBAKMM;AALN,AAAA,AAAAL,iDAAA,2CAAA,8DAAA,EAAA,qEAAA,IAAA,yDAAAD,sBAAA,sDAAA,AAAA,sDAAA,qEAAA;;AAAAA;;AAAA,AAAA,AAAAC,iDAAA,2CAAA,8DAAA,EAAA,qEAAA,IAAA,yDAAAD,sBAAA,sDAAA,AAAA,2HAAA,qEAAA;;AAAAA;KAAA,iBAAAA,wBAAA,AAAA,iBAAAA,wBAAA,mBAAA,iBAAAA,pCAQOY,4DAASN;AARhB,AAAA,AAAAL,iDAAA,2CAAA,8DAAA,EAAA,qEAAA,KAAA,yDAAAD,sBAAA,sDAAA,AAAA,sDAAA,qEAAA;;AAAAA;KAAA,iBAAAA,wBAQmBkB;AARnB,AAAA,AAAAjB,iDAAA,2CAAA,8DAAA,EAAA,qEAAA,KAAA,yDAAAD,sBAAA,sDAAA,AAAA,sEAAA,qEAAA;;AAAAA;KAAA,iBAAAA,wBAQ8BS;AAR9B,AAAA,AAAAR,iDAAA,2CAAA,8DAAA,EAAA,qEAAA,KAAA,yDAAAD,sBAAA,sDAAA,AAAA,6DAAA,qEAAA;;AAAAA;;AAAA,AAAA,AAAAC,iDAAA,2CAAA,8DAAA,EAAA,qEAAA,KAAA,yDAAAD,sBAAA,sDAAA,AAAA,0QAAA,qEAAA;;AAAAA;;AAAA,AAAA,AAAAC,iDAAA,2CAAA,8DAAA,EAAA,qEAAA,IAAA,yDAAAD,sBAAA,sDAAA,AAAA,+UAAA,qEAAA;;AAAAA;;AAAA,AAAA,AAAAC,iDAAA,2CAAA,8DAAA,EAAA,qEAAA,IAAA,yDAAAD,sBAAA,sDAAA,AAAA,01BAAA,qEAAA;;AAAAA;gBAAA,IAAAE,IAAAa;AAAA,AAAA,MAAAb;IAAA,cAAAc,HAAYV;AAAZ,AAAA,IAAAW,aAAAD;QAAA,AAAAnB,4CAAAoB,WAAA,IAAA,/DAAgBV;iBAAhB,AAAAV,4CAAAoB,WAAA,IAAA,xEAAkBC;aAAlB,AAAArB,4CAAAoB,WAAA,IAAA,pEAA6BR;AAA7B,AAEE,GAAI,AAACC,6CAAE,AAACC,+CAAOL,GAAGY,YAAYT;AAC5B,AAEEH;;AACF,AAEE,OAACM,mBAASN,GAAGY,WAAWT;;;AAGhC;;;;;;;;;;;;;;;;uCAAA,vCAAMU,sFAeHC,aAAaX;AAfhB,AAgBE,IAAMY,SAAO,AAACC,gDAAQF;WAAtB,mFAAA,1FACMG,4LAAsCF,OAAOZ;AADnD,AAGE,OAACe,4BAAuBD;;AAG5B,yCAAA,zCAAME,0FAAqBL,aAAaX;AAAxC,AACE,IAAMY,SAAe,AAACC,gDAAQF;IACxBM,MAAe,+CAAA,AAAAC,oCAAA,mFAAA,tKAAChB,+DAAQiB,yKAAgCP;IACxDQ,0FAEiB,+CAAA,WAAAK,1DAACC,/EACD,6CAAA,7CAACE;AADD,AAAS,oDAAA,7CAAC3B,iDAAI,gBAAAwB,hBAACE;GADf,iBAAAN,WAAA;IAAAC,WAAA;eADGL,XACHM;AAAA,AAAA,0IAAAF,SAAAC,SAAAC,wDAAAF,SAAAC,SAAAC,9NAACC,kEAAAA,8FAAAA;;IAGlBK,iBAAe,iBAAAC,WAAA;IAAAC,WAAA;IAAAC,WAAuBhC;AAAvB,AAAA,0IAAA8B,SAAAC,SAAAC,wDAAAF,SAAAC,SAAAC,9NAACR,kEAAAA,8FAAAA;;IAChBS,0FACiB,+CAAA,WAAAC,1DAACR,/EACD,6CAAA,7CAACE;AADD,AAAS,oDAAA,7CAAC3B,iDAAI,gBAAAiC,hBAACP;GADZE;IAGpBM,OAAe,AAACC,qDAAuBH,SAASb;IAChDiB,gBAAe,AAACC,uGAAMrB,oFAEH,AAACsB,4CAAI,WAAAC,vIAEL,6CAAA,7CAACZ;AAFI,AAAA,IAAAa,aAAAD;WAAA,AAAApD,4CAAAqD,WAAA,IAAA,lEAAM3B;AAAN,AAAA,uDACGA,KAAK,AAAC4B,4CAAI1C,OAAOc;GAFtBqB;AAZ5B,AAmBE,GAAM,GAAK,AAACQ,uBAAOR;AAAnB,AACE,4BAAA,mFAAA,/GAACpB,iNACgCH,OAAOyB;;AAExC,AAACO,8CAEC,4CAAA,WAAAC,vDAACN;AAAD,AAAM,+KAAAM,iBAAA,6EAAAA,iBAAA,tRAACC,8EAAAA,kHAAAA,tCAA2BnC,8FAAAA;GAAoBkB;;AAExD,OAACe,8CACC,4CAAA,WAAAG,vDAACR;AAAD,AAAM,mLAAAQ,2FAAAA,tQAACC,gFAAAA,+GAAAA,jCAA6BrC,2FAAAA;GAAgBkB;;AATxD;;;AAYJ,8CAAA,9CAAMoB,oGAA0BtC,aAAauC,YAAYlD;AAAzD,AAKE,IAAMmD,YAAe,8DAAA,9DAACC,+CAAOC,kGAAM,AAACC,4HAAgB3C,2BAAeuC;IAC7DK,iBAAkB,8DAAA,mFAAA,jJAACH,+CAAOC,oKAAkB,AAACC,4HAAgB3C,2BAAeuC;IAC5EjC,MAAe,+CAAA,AAAAC,/CAAChB,+DAAQiB,oBAAmBoC;IAC3CnC,0FAEiB,+CAAA,WAAAuC,1DAACjC,/EACD,6CAAA,7CAACE;AADD,AAAS,oDAAA,7CAAC3B,iDAAI,gBAAA0D,hBAAChC;GADf,iBAAA6B,WAAA;IAAAC,WAAA;eADGxC,XACHyC;AAAA,AAAA,0IAAAF,SAAAC,SAAAC,wDAAAF,SAAAC,SAAAC,9NAAClC,kEAAAA,8FAAAA;;IAGlBK,iBAAe,iBAAA+B,WAAA;IAAAC,WAAA;IAAAC,WAAuB9D;AAAvB,AAAA,0IAAA4D,SAAAC,SAAAC,wDAAAF,SAAAC,SAAAC,9NAACtC,kEAAAA,8FAAAA;;IAChBS,0FACiB,+CAAA,WAAA8B,1DAACrC,/EACD,6CAAA,7CAACE;AADD,AAAS,oDAAA,7CAAC3B,iDAAI,gBAAA8D,hBAACpC;GADZE;IAGpBM,OAAe,AAACC,qDAAuBH,SAASb;IAChDiB,gBAAe,AAACC,uGAAMrB,oFAEH,AAACsB,4CAAI,WAAAyB,vIAEL,6CAAA,7CAACpC;AAFI,AAAA,IAAAqC,aAAAD;WAAA,AAAA5E,4CAAA6E,WAAA,IAAA,lEAAMnD;AAAN,AAAA,uDACGA,KAAK,AAAC4B,4CAAI1C,OAAOc;GAFtBqB;AAb5B,AAoBE,GAAM,GAAK,AAACQ,uBAAOR;AAAnB,AAGE,4BAAA,mFAAA,/GAACpB,oMAC0BwC,eAAelB;;AAE1C,AAACO,8CAGC,4CAAA,WAAAsB,vDAAC3B;AAAD,AAAM,IAAA4B,WAAuB,wEAAAD,xEAACd,+CAAOC,eAAKF;IAApCiB,WAAA;AAAA,AAAA,wJAAAD,SAAAC,+DAAAD,SAAAC,jOAACC,yEAAAA,4FAAAA;GAAqDxC;;AAE9D,AAACe,8CAEC,4CAAA,WAAA0B,vDAAC/B;AAAD,AAAM,IAAAgC,WAAyB,wEAAAD,xEAAClB,+CAAOC,eAAKF;AAAtC,AAAA,4JAAAoB,iEAAAA,rNAACC,2EAAAA,qFAAAA;GAAmD3C;;AAb9D;;AAeAQ;;AAGJ,oCAAA,pCAAMoC,gFAAgBC,MAAMC,KAAKC,EAAEC;AAAnC,AACE,AAEE,QAAMH,JAAMI;IAAAA,QACV,AAACC,6CAAKD,EAAE,iNAAA,/LAAIH,MACF,sFAAA,pFAAI,AAACK,wBAAQL,OACX,AAACI,6CAAKJ,KAAKC,sFACVD,KAAKC,8FACPA;AALb,AAME,OAACK,8CAAM5B,eAAKyB,MAAE,iBAAAI,WAAA;IAAAC,WACE,kBAAIR,MACF,sFAAA,pFAAI,AAACK,wBAAQL,OACX,AAACI,6CAAKJ,KAAKC,sFACVD,KAAKC,WACRA;IALJQ,WAMEP;AANF,AAAA,0IAAAK,SAAAC,SAAAC,wDAAAF,SAAAC,SAAAC,9NAAC5D,kEAAAA,8FAAAA;;;AASrB,kCAAA,lCAAM6D,4EAAcX,MAAMC,KAAKC;AAA/B,AACE,AAEE,OAACG,6CAAKL,MAAM,iNAAA,/LAAIC,MACF,sFAAA,pFAAI,AAACK,wBAAQL,OACX,AAACI,6CAAKJ,KAAKC,sFACVD,KAAKC,8FACPA;;AAGnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oCAAA,pCAAMpD,gFA8BH8D,EAAEC,EAAEC;AA9BP,AAgCE,IAAOd,QAAMY;IAAEX,OAAKY;IAAEE,OAAKD;;AAA3B,AAEE,GAAI,AAAC7C,uBAAO8C;AACV,AAEEf;;AACF,IAAAgB,aAAY,AAACC,gBAAMF;QAAnB,AAAArG,4CAAAsG,WAAA,IAAA,/DAAOd;QAAP,AAAAxF,4CAAAsG,WAAA,IAAA,/DAASb;AAAT,AAEE,eAAO,EAAI,AAACe,qBAAKf,IACR,AAACJ,kCAAeC,MAAMC,KAAKC,EAAEC,GAC7B,AAACQ,gCAAaX,MAAMC,KAAKC;eAChCD;eACA,AAACkB,eAAKJ;;;;;;;;;AAGhB,4CAAA,5CAAMK,gGAAwBC,aAAaT,EAAEU;AAA7C,AACE,gJAAA,zIAAC1C,4HAAgByC,0BAA0BT,EAAEU;;AAG/C,4CAAA,5CAAMC,gGAAwBF,aAAaT,EAAEU;AAA7C,AACE,oBAAIA;AACF,OAAC1C,4HAAgByC,aAAaT,EAAE,AAACY,kDAAUF;;AAC3C,OAAC1C,4HAAgByC;;;AAGrB,kCAAA,lCAAMI,4EAAcb,EAAEU;AAAtB,AACE,oBAAIA;AACF,OAAC1C,4HAAgBgC,EAAE,AAACY,kDAAUF;;AAC9B,OAAC1C,4HAAgBgC;;;AAGrB;;;;;;;;;;0CAAA,1CAAMc,4FASHL;AATH,AAUE,IAAMM,KAAG,AAAC/C,4HAAgByC;AAA1B,AAIE,uHAAA,gDAAA,mFAAA,nPAACO,2DACCD,kQAEA,WAAKE,WAAWzG;AAAhB,AAEE,OAAC4C,4CAAI6D,WAAWF;;;AAGxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAAA,qEAAAG,rHAAM1D,wGA6BHiD,sBAAuCgB;AA7B1C,AAAA,IAAAN,aAAAD;IAAAE,aAAA,AAAAC,cAAAF;IAAAG,eAAA,AAAAjB,gBAAAe;IAAAA,iBAAA,AAAAG,eAAAH;QAAAE,JA6BiBtB;WA7BjBoB,PA6BqBV;iBA7BrBS,bA6B8BK;AA7B9B,AA8BE,IAAME,IAAK,AAAC1D,4HAAgByC,aAAaT,EAAEU;IACrCiB,MAAK,AAAChB,0CAAuBF,aAAaT,EAAEU;IAC5CkB,OAAK,AAAC5D,4HAAgB,EAAI0C,MAAK,AAACmB,eAAKnB,MAAMV;AAFjD,AAQE,sHAAA,gDAAA,/JAACgB,2DACCU,uLACKC,YACL,WAAKlH,UAAUD;AAAf,AAEE,IAAAsH,mBAAI,AAAC1E,4CAAI3C,UAAUmH;AAAnB,AAAA,oBAAAE;AAAAA;;AAAyBL;;;;AAGjC,2CAAA,mDAAAM,9FAAMhD,uGAAiD0C;AAAvD,AAAA,IAAAO,aAAAD;IAAAE,aAAA,AAAAZ,cAAAW;IAAAE,eAAA,AAAA7B,gBAAA4B;IAAAA,iBAAA,AAAAV,eAAAU;QAAAC,JAA8BlC;WAA9BiC,PAAkCvB;iBAAlCsB,bAA2CR;AAA3C,AACE,IAAME,IAAK,AAAC1D,4HAAgBgC,EAAEU;IACxBiB,MAAK,AAACd,gCAAab,EAAEU;IACrBkB,OAAK,AAAC5D,4HAAgB,EAAI0C,MAAK,AAACmB,eAAKnB,MAAMV;AAFjD,AAUE,sHAAA,gDAAA,/JAACgB,2DACCU,uLACKC,YACL,WAAKlH,UAAUD;AAAf,AAEE,IAAAsH,mBAAI,AAAC1E,4CAAI3C,UAAUmH;AAAnB,AAAA,oBAAAE;AAAAA;;AAAyBL;;;;AAGjC;;;;;;;;;;4CAAA,5CAAMU,gGASH1B;AATH,AAUE,IAAMM,KAAG,AAAC/C,4HAAgByC;AAA1B,AAIE,OAAC/G,yDACCqH,GACA,cAAAqB,HAAK7H;AAAL,AAAA,IAAA8H,aAAAD;QAAA,AAAAtI,4CAAAuI,WAAA,IAAA,/DAAS7H;cAAT,AAAAV,4CAAAuI,WAAA,IAAA,rEAAWC;AAAX,AAEE,6BAAA,mFAAA,zGAACzH,mBAASN,wJAAgBwG,WAAIuB;;;AAGtC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kDAAA,uEAAAC,zHAAM7E,4GA6BH+C;AA7BH,AAAA,IAAA+B,aAAAD;IAAAE,aAAA,AAAApB,cAAAmB;IAAAE,eAAA,AAAArC,gBAAAoC;IAAAA,iBAAA,AAAAlB,eAAAkB;QAAAC,JA6BiB1C;WA7BjByC,PA6BqB/B;iBA7BrB8B,bA6B8BhB;AA7B9B,AA8BE,IAAME,IAAE,AAAC1D,4HAAgByC,aAAaT,EAAEU;AAAxC,AAKE,OAAChH,yDACCgI,EACA,cAAAiB,HAAKpI;AAAL,AAAA,IAAAqI,aAAAD;QAAA,AAAA7I,4CAAA8I,WAAA,IAAA,/DAASpI;cAAT,AAAAV,4CAAA8I,WAAA,IAAA,rEAAWN;AAAX,AAME,OAACzH,mBAASN,GACR,6DAAA,mFAAA,hJAACoF,8CAAM5B,oKAAkB,AAACC,4HAAgByC,2BAAe,AAACxD,4CAAI4F,qCAAgBrB,aAC9Ec;;;AAGV,6CAAA,7CAAMpD,kGAAyBsC;AAA/B,AACE,IAAME,IAAE,AAAC1D,4HAAgBwD;AAAzB,AAOE,OAAC9H,yDACCgI,EACA,cAAAoB,HAAKvI;AAAL,AAAA,IAAAwI,aAAAD;QAAA,AAAAhJ,4CAAAiJ,WAAA,IAAA,/DAASvI;cAAT,AAAAV,4CAAAiJ,WAAA,IAAA,rEAAWT;AAAX,AAME,OAACzH,mBAASN,GAER,8DAAA,mFAAA,jJAACuD,+CAAOC,4KAAmB,AAACd,4CAAI4F,qCAAgBrB,aAChDc;;;AAGV;;;;;;;;;;;;;;;;;;2CAAA,3CAAMU,8FAiBHvC,aAAawC;AAjBhB,AAkBE,IAAMC,QAAM,kCAAA,iCAAA,nEAAChH,wEAAsB+G;AAAnC,AAOE,AAAC7H,qCAAkBqF,aAAawC;;AAGhC,AAACnC,wCAAqBL;;AACtB,AAACnD,8CAEC,4CAAA,WAAA6F,vDAAClG;AAAD,AAAM,kEAAAkG,iBAAA,5EAAC3F,8CAA2BiD;GAAoByC;;AAGxD,AAACf,0CAAuB1B;;AACxB,OAACnD,8CACC,4CAAA,WAAA8F,vDAACnG;AAAD,AAAM,oEAAAmG,7DAAC1F,gDAA6B+C;GAAgByC;;AAG1D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qCAAA,0DAAAG,/FAAMI,kFA6CHhD;AA7CH,AAAA,IAAA6C,aAAAD;IAAAE,aAAA,AAAAlC,cAAAiC;IAAAE,eAAA,AAAAnD,gBAAAkD;IAAAA,iBAAA,AAAAhC,eAAAgC;QAAAC,JA6CiBxD;WA7CjBuD,PA6CqB7C;iBA7CrB4C,bA6C8B9B;AA7C9B,AA8CE,IAAME,IAAE,AAAC1D,4HAAgByC,aAAaT,EAAEU;AAAxC,AAEE,6DAAA,tDAACgD,yIAAoBhC;;AAGzB,6CAAA,kEAAAiC,/GAAMI,kGAAyBtD;AAA/B,AAAA,IAAAmD,aAAAD;IAAAE,aAAA,AAAAxC,cAAAuC;IAAAE,eAAA,AAAAzD,gBAAAwD;IAAAA,iBAAA,AAAAtC,eAAAsC;QAAAC,JAA6C9D;WAA7C6D,PAAiDnD;iBAAjDkD,bAA0DpC;AAA1D,AACE,IAAME,IAAU,AAAC1D,4HAAgByC,aAAaT,EAAEU;IAC1CsD,SAAU,sDAAA,tDAACN,yIAAoBhC;IAC/BuC,SAAU,iBAAMzE,IAAE,sDAAA,tDAACkE,yIAAoB,AAAC1F,4HAAgByC,aAAaT;AAA3D,AACE,oBAAIR;AAAE,mDAAA,AAAA5D,5CAACwB,4DAAKoC,GAAEkB;;AAAd;;;IACZwD,YAAU,iBAAM1E,IAAE,sDAAA,tDAACkE,yIAAoB,AAAC1F,4HAAgByC;AAA9C,AACE,oBAAIjB;AAAE,sDAAA,AAAA5D,/CAAChB,+DAAQ4E,GAAEgC;;AAAjB;;;AALlB,AAOE,AAAAjI,0DAAAC,mCAAA,qDAAA,qBAAA,KAAA,IAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,2FAAA,6CAAA,eAAA,YAAA,YAAA,pDAA0CgH,iBAAiBe,gBAAgBwC,YAAYC,YAAYC;GAAnG,OAAA,KAAA,YAAA;;AAEA,oBAAIF;AACFA;;AACA,oBAAIC;AACF,OAAAE,4BAAA;AAAA,AAAUF;;;AACV,oBAAIC;AACF,OAAAC,4BAAA;AAAA,AAAUD;;;AADZ;;;;;AAKR;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oCAAA,yDAAAE,7FAAMI,gFA+BH/D,sBAAuC6B;AA/B1C,AAAA,IAAA+B,aAAAD;IAAAE,aAAA,AAAAjD,cAAAgD;IAAAE,eAAA,AAAAlE,gBAAAiE;IAAAA,iBAAA,AAAA/C,eAAA+C;QAAAC,JA+BiBvE;WA/BjBsE,PA+BqB5D;iBA/BrB2D,bA+B8B7C;AA/B9B,AAmCE,IAAME,IAAE,AAAC1D,4HAAgByC,aAAaT,EAAEU;AAAxC,AAEE,8BAAA,vBAAC+D,0GAAmB/C,EAAEY;;AAG1B;;;;;;;;;;iCAAA,sDAAAoC,vFAAMI,0EASHrE,sBAAuCsE;AAT1C,AAAA,IAAAJ,aAAAD;IAAAE,aAAA,AAAAvD,cAAAsD;IAAAE,eAAA,AAAAxE,gBAAAuE;IAAAA,iBAAA,AAAArD,eAAAqD;QAAAC,JASiB7E;WATjB4E,PASqBlE;iBATrBiE,bAS8BnD;AAT9B,AAWE,IAAME,IAAW,AAAC1D,4HAAgByC,aAAaT,EAAEU;iBAAjD,AAAA9E,bACMoJ,6BAAY,sDAAA,tDAACtB,yIAAoBhC;IACjCuD,YAAW,CAACF,4CAAAA,wDAAAA,dAAYC,oCAAAA;AAF9B,AAOE,sDAAA,/CAACR,kCAAe/D,gGAAce,mBAAYyD;;AAG9C;;;;;;;;;gCAAA,hCAAMC,wEAQH7J,aAAa8J;AARhB,AAYE,IAAMC,sFACM,AAACnI,4CAAI,WAAKzB,vIAEV,6CAAA,7CAACc;AAFI,AAAA,uDACGd,KAAK,AAACiI,mCAAgBpI,aAAaG;GAFxC,kCAAA,iCAAA,nEAACU,wEAAsBiJ;AAAtC,AAMEC;;AAGJ,iCAAA,jCAAMC,0EAAaC,KAAK9J;AAAxB,AACE,IAAM4J,MAAI,AAAChI,4CAAIkI,oKAAU9J,jFACH,AAACyB,4CAAI4F,1HACL,6CAAA,7CAACvG;AAFvB,AAIE,GAAI,4CAAA,1CAAI,gBAAWiJ,fAAoBH,2CACjC,gBAAWI,fAAKJ,oCAChB,gBAAWK,fAAuBL;AAFxC,OAAAxJ,gBAGGwJ;;AACDA;;;AAGN,AAwBA,AAoDA","names":["taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","re_frame.core.reg_event_db","day8.re-frame.tracing/is-trace-enabled?","p__50897","vec__50898","cljs.core.nth","+debux-dbg-opts+","day8.re-frame.debux.common.util/send-form!","result__38107__auto__","day8.re-frame.debux.common.util/send-trace!","e","e50903","p__50908","vec__50909","db","_","container","values","cljs.core._EQ_","cljs.core.get_in","cljs.core/assoc-in","p__50913","vec__50914","e50918","p__50919","vec__50920","local-path","bh-ui.utils.locals/init-local-values","component-id","target","cljs.core.keyword","path","re-frame.core/dispatch-sync","bh-ui.utils.locals/update-local-values","old","cljs.core/deref","re-frame.db/app-db","old-vals","G__50927","G__50928","G__50929","bh-ui.utils.locals/process-locals","p1__50923#","cljs.core.filter","cljs.core/count","cljs.core.into","new-vals-paths","G__50930","G__50931","G__50932","new-vals","p1__50924#","diff","clojure.set.difference","merged-values","cljs.core.merge","cljs.core.map","p__50933","vec__50934","cljs.core.get","cljs.core/empty?","cljs.core.doall","p1__50925#","bh-ui.utils.locals/create-container-local-sub","p1__50926#","bh-ui.utils.locals/create-container-local-event","bh-ui.utils.locals/update-local-path-values","target-path","data-path","cljs.core.reduce","cljs.core/conj","bh_ui.utils.helpers.path__GT_keyword","container-path","G__50941","G__50942","G__50943","p1__50937#","G__50944","G__50945","G__50946","p1__50938#","p__50947","vec__50948","p1__50939#","G__50951","G__50952","bh-ui.utils.locals/create-local-path-sub","p1__50940#","G__50953","bh-ui.utils.locals/create-local-path-event","bh-ui.utils.locals/process-branch","accum","root","k","v","x","cljs.core.conj","cljs.core/vector?","cljs.core.apply","G__50954","G__50955","G__50956","bh-ui.utils.locals/process-leaf","a","r","t","tree","vec__50957","cljs.core/first","cljs.core/map?","cljs.core/rest","bh-ui.utils.locals/compute-container-path","container-id","more","bh-ui.utils.locals/compute-container-deps","cljs.core.drop_last","bh-ui.utils.locals/compute-deps","bh-ui.utils.locals/create-container-sub","id","re_frame.core.reg_sub","containers","p__50960","vec__50961","seq__50962","cljs.core/seq","first__50963","cljs.core/next","value-path","default","p","dep","item","cljs.core/last","or__4253__auto__","p__50964","vec__50965","seq__50966","first__50967","bh-ui.utils.locals/create-container-event","p__50968","vec__50969","new-val","p__50972","vec__50973","seq__50974","first__50975","p__50976","vec__50977","bh-ui.utils.helpers/path->keyword","p__50980","vec__50981","bh-ui.utils.locals/init-container-locals","locals-and-defaults","paths","p1__50984#","p1__50985#","p__50986","vec__50987","seq__50988","first__50989","bh-ui.utils.locals/subscribe-local","re_frame.core.subscribe","p__50990","vec__50991","seq__50992","first__50993","bh-ui.utils.locals/resolve-subscribe-local","sub-ok","get-ok","get-in-ok","reagent.ratom/make-reaction","p__50994","vec__50995","seq__50996","first__50997","bh-ui.utils.locals/dispatch-local","re-frame.core/dispatch","p__50998","vec__50999","seq__51000","first__51001","bh-ui.utils.locals/apply-local","fn-to-apply","orig-value","new-value","bh-ui.utils.locals/build-subs","local-config","ret","bh-ui.utils.locals/resolve-sub","subs","reagent.ratom/RAtom","cljs.core/Atom","reagent.ratom/Reaction"],"sourcesContent":["(ns bh-ui.utils.locals\n  (:require-macros\n    [reagent.ratom :refer [reaction]])\n  (:require [bh-ui.utils.helpers :as h]\n            [day8.re-frame.tracing :refer-macros [fn-traced]]\n            [re-frame.core :as re-frame]\n            [taoensso.timbre :as log]))\n\n\n(log/info \"bh-ui.utils.locals\")\n\n\n(declare process-locals)\n(declare create-container-local-sub)\n(declare create-local-path-sub)\n(declare create-container-local-event)\n(declare create-local-path-event)\n\n\n(re-frame/reg-event-db\n  :events/init-container-locals\n  (fn-traced [db [_ container values]]\n    ;(log/info \"::init-container-locals\" container init-vals)\n    (if (= (get-in db [:containers container]) values)\n      (do\n        ;(log/info \"::init-container-locals // already exists\")\n        db)\n      (do\n        ;(log/info \"::init-container-locals // adding\")\n        (assoc-in db [:containers container] values)))))\n\n\n(re-frame/reg-event-db\n  :events/init-local-path\n  (fn-traced [db [_ local-path values]]\n    ;(log/info \"::init-local-path\" container init-vals)\n    (if (= (get-in db local-path) values)\n      (do\n        ;(log/info \"::init-local-path // already exists\")\n        db)\n      (do\n        ;(log/info \"::init-local-path // adding\")\n        (assoc-in db local-path values)))))\n\n\n(defn init-local-values\n  \"add the given 'tree' of values into the app-db under the `[:containers <container-id as a keyword>] path\n\n  `component-id` is automatically converted into a `keyword`\n\n  In cases where there are multiple containers of the same 'type', using 'locals' keeps each\n  instance's local state away from all the others, so changing the state of one does _not_ change\n  them all.\n\n  ---\n\n  - `component-id` : (string) id of the component, passed as a string so we can use generated values (like guids)\n  - `values` : (hash-map) hash-map (tree) of values specific to _this_ container.\n\n  \"\n  [component-id values]\n  (let [target (keyword component-id)\n        path   [:events/init-container-locals target values]]\n    ;(log/info \"init-local-values\" path)\n    (re-frame/dispatch-sync path)))\n\n\n(defn update-local-values [component-id values]\n  (let [target         (keyword component-id)\n        old            (get-in @re-frame.db/app-db [:containers target])\n        old-vals       (->> old\n                         (process-locals [] nil)\n                         (filter #(= 1 (count %)))\n                         (into #{}))\n        new-vals-paths (process-locals [] nil values)\n        new-vals       (->> new-vals-paths\n                         (filter #(= 1 (count %)))\n                         (into #{}))\n        diff           (clojure.set/difference new-vals old-vals)\n        merged-values  (merge old\n                         (->> diff\n                           (map (fn [[path]]\n                                  {path (get values path)}))\n                           (into {})))]\n\n    ;(log/info \"update-local-values\" diff \"//\" old \"//\" merged-values)\n\n    (when (not (empty? diff))\n      (re-frame/dispatch-sync\n        [:events/init-container-locals target merged-values])\n\n      (doall\n        ; TODO: consider using locals-and-defaults to put the actual default into the subscription rather than 'nil'\n        (map #(create-container-local-sub component-id % nil) new-vals-paths))\n\n      (doall\n        (map #(create-container-local-event component-id %) new-vals-paths)))))\n\n\n(defn update-local-path-values [component-id target-path values]\n\n  ;(log/info \"update-local-path-values\" component-id \"//\" values)\n\n  ; TODO: can this be converted to (apply concat...)? (see https://clojuredesign.club/episode/080-apply-as-needed/)\n  (let [data-path      (reduce conj [(h/path->keyword component-id)] target-path)\n        container-path    (reduce conj [:containers (h/path->keyword component-id)] target-path)\n        old            (get-in @re-frame.db/app-db container-path)\n        old-vals       (->> old\n                         (process-locals [] nil)\n                         (filter #(= 1 (count %)))\n                         (into #{}))\n        new-vals-paths (process-locals [] nil values)\n        new-vals       (->> new-vals-paths\n                         (filter #(= 1 (count %)))\n                         (into #{}))\n        diff           (clojure.set/difference new-vals old-vals)\n        merged-values  (merge old\n                         (->> diff\n                           (map (fn [[path]]\n                                  {path (get values path)}))\n                           (into {})))]\n\n    ;(log/info \"update-local-path-values (merged)\" component-id \"//\" diff \"//\" old \"//\" merged-values)\n\n    (when (not (empty? diff))\n      ;(log/info \"update-local-path-values (target)\" container-path \"//\" data-path \"//\" new-vals-paths)\n\n      (re-frame/dispatch-sync\n        [:events/init-local-path container-path merged-values])\n\n      (doall\n        ; TODO: consider using locals-and-defaults to put the actual default into the subscription rather than 'nil'\n        ; TODO: can this be converted to (apply concat...)? (see https://clojuredesign.club/episode/080-apply-as-needed/)\n        (map #(create-local-path-sub (reduce conj data-path %) nil) new-vals-paths))\n\n      (doall\n        ; TODO: can this be converted to (apply concat...)? (see https://clojuredesign.club/episode/080-apply-as-needed/)\n        (map #(create-local-path-event (reduce conj data-path %)) new-vals-paths)))\n\n    merged-values))\n\n\n(defn process-branch [accum root k v]\n  (do\n    ;(println \"branch\" v [root k] accum)\n    (as-> accum x\n      (conj x (if root\n                (if (vector? root)\n                  (conj root k)\n                  [root k])\n                [k]))\n      (apply conj x (process-locals []\n                      (if root\n                        (if (vector? root)\n                          (conj root k)\n                          [root k])\n                        k)\n                      v)))))\n\n\n(defn process-leaf [accum root k]\n  (do\n    ;(println \"leaf\" root k accum)\n    (conj accum (if root\n                  (if (vector? root)\n                    (conj root k)\n                    [root k])\n                  [k]))))\n\n\n(defn process-locals\n  \"recursively walks through the 'tree' of values and computes the 'path vector' to reach each\n  value.\n\n  For example:\n\n  `{:value-1 \\\"dummy\\\" :value-2 {:nested-value \\\"dummy\\\"}}`\n\n  would have paths:\n\n  `[[:value-1] [:value-2] [:value-2 :nested-value]]`\n\n  This is a preparation step for creating and registering the re-frame\n  [subscription handlers](https://day8.github.io/re-frame/subscriptions/), so we must\n  create a vector for each value in the 'tree' so other code, like a UI 'container', can subscribe to\n  the value and automatically 'update and render'.\n\n  ---\n\n  - a : (vector) the starting value to accumulate the result into, typically `[]`\n  - r : (any) the initial value of the 'root' item, typically `()`\n  - t : (hash-map) the 'tree' of values to process\n\n  Returns a `vector` of `vector`s of `keyword`s, where each is the path (relative to the initial `r`^*^) to\n  the specific value of interest.\n\n> Note: ^*^ typically we sort out the 'base' for the relative paths separately, using\n> [[create-container-local-sub]]\n\n  \"\n  [a r t]\n  ;(println \"process-locals\" a r t)\n  (loop [accum a root r tree t]\n    ;(println \"process\" tree root accum)\n    (if (empty? tree)\n      (do\n        ;(println \"result\" accum)\n        accum)\n      (let [[k v] (first tree)]\n        ;(println \"let\" k v)\n        (recur (if (map? v)\n                 (process-branch accum root k v)\n                 (process-leaf accum root k))\n          root\n          (rest tree))))))\n\n\n(defn compute-container-path [container-id a more]\n  (h/path->keyword container-id \"blackboard\" a more))\n\n\n(defn compute-container-deps [container-id a more]\n  (if more\n    (h/path->keyword container-id a (drop-last more))\n    (h/path->keyword container-id)))\n\n\n(defn compute-deps [a more]\n  (if more\n    (h/path->keyword a (drop-last more))\n    (h/path->keyword a)))\n\n\n(defn create-container-sub\n  \"create and registers a re-frame [subscription handler](https://day8.github.io/re-frame/subscriptions/)\n  for the `container-id` (as a keyword) inside the `:containers` top-level key in the `app-db`.\n\n  ---\n\n  - `container-id` : (string) id for the container, using a string means we can use generated values, like a guid, for the id\n\n  \"\n  [container-id]\n  (let [id (h/path->keyword container-id)]\n\n    ;(log/info \"create-container-sub\" id)\n\n    (re-frame/reg-sub\n      id\n      :<- [:containers]\n      (fn [containers _]\n        ;(log/info \"sub\" w id)\n        (get containers id)))))\n\n\n(defn create-container-local-sub\n  \"create and registers a re-frame [subscription handler](https://day8.github.io/re-frame/subscriptions/)\n  for the value at the path inside the [`:containers` `container-id as a keyword`] key in the `app-db`.\n\n  ---\n\n  - `container-id` : (string) id for the container, using a string means we can use generated values, like a guid, for the id\n  - `value-path` : (vector of keywords) the path into the container's values to locate the specific one for this subscription\n\n  `value-path` functions exactly like any other re-frame subscription, but relative to the\n  `[:containers <container-id as a keyword>]` in the overall `app-db`\n\n  It is destructured as follows:\n\n  | var        | type       | description                         |\n  |:-----------|:----------:|:------------------------------------|\n  | `a`        | keyword    | the (primary) value to subscribe to |\n  | `& more`   | keyword(s) | any additional parts to the path    |\n\n  We use 'cascading subscriptions', i.e., [`Layer-3` subscriptions](https://day8.github.io/re-frame/subscriptions/#reg-sub),\n  to organize things. In order to generate unique ids for each subscription, we concatenate the\n  path into a single value:\n\n  assuming: `(def container-id \\\"some-guid\\\")` then path `[:value-2 :nested-value]` would be converted into the subscription named\n  `:some-guid/value-2.nested-value`\n\n> Note: so developer don't need to understand or even remember this encoding scheme, use the [[subscribe-local]] helper function\n> in place of standard re-frame subscription calls. It provides the same result, and does all the encoding for you.\n  \"\n  [container-id [a & more :as value-path] default]\n  (let [p    (h/path->keyword container-id a more)\n        dep  (compute-container-deps container-id a more)\n        item (h/path->keyword (if more (last more) a))]\n\n    ;(log/info \"create-container-local-sub\" p\n    ;  \":<-\" dep\n    ;  \"item\" item)\n\n    (re-frame/reg-sub\n      p\n      :<- [dep]\n      (fn [container _]\n        ;(log/info \"sub\" p dep container (last more))\n        (or (get container item) default)))))\n\n\n(defn create-local-path-sub [[a & more :as value-path] default]\n  (let [p    (h/path->keyword a more)\n        dep  (compute-deps a more)\n        item (h/path->keyword (if more (last more) a))]\n\n    ;(log/info \"create-local-path-sub\"\n    ;  value-path\n    ;  \"//\" p\n    ;  \":<-\" dep\n    ;  \"//\" item)\n\n    (re-frame/reg-sub\n      p\n      :<- [dep]\n      (fn [container _]\n        ;(log/info \"sub\" p dep container (last more))\n        (or (get container item) default)))))\n\n\n(defn create-container-event\n  \"create and registers a re-frame [event handler](https://day8.github.io/re-frame/dominoes-30k/#domino-2-event-handling)\n  for the `container-id` (as a keyword) inside the `:containers` top-level key in the `app-db`.\n\n  ---\n\n  - `container-id` : (string) id for the widget, using a string means we can use generated values, like a guid, for the id\n\n  \"\n  [container-id]\n  (let [id (h/path->keyword container-id)]\n\n    ;(log/info \"create-container-event\" id)\n\n    (re-frame/reg-event-db\n      id\n      (fn [db [_ new-val]]\n        ;(log/info \"event\" w id)\n        (assoc-in db [:containers id] new-val)))))\n\n\n(defn create-container-local-event\n  \"create and registers a re-frame [event handler](https://day8.github.io/re-frame/dominoes-30k/#domino-2-event-handling)\n  for the value at the path inside the [`:containers` `container-id as a keyword`] key in the `app-db`.\n\n  ---\n\n  - `container-id` : (string) id for the container, using a string means we can use generated values, like a guid, for the id\n  - `value-path` : (vector of keywords) the path into the widget values to locate the specific one for this subscription\n\n  `value-path` functions exactly like any other re-frame subscription, but relative to the\n  `[:containers <container-id as a keyword>]` in the overall `app-db`\n\n  It is destructured as follows:\n\n  | var        | type       | description                         |\n  |:-----------|:----------:|:------------------------------------|\n  | `a`        | keyword    | the (primary) value to subscribe to |\n  | `& more`   | keyword(s) | any additional parts to the path    |\n\n  We use 'cascading subscriptions', i.e., [`Layer-3` subscriptions](https://day8.github.io/re-frame/subscriptions/#reg-sub),\n  to organize things. In order to generate unique ids for each subscription, we concatenate the\n  path into a single value:\n\n  assuming: `(def widget-wid \\\"some-guid\\\")` then path `[:value-2 :nested-value]` would be converted into the subscription named\n  `:some-guid/value-2.nested-value`\n\n> Note: so developer don't need to understand or even remember this encoding scheme, use the [[subscribe-local]] helper function\n> in place of standard re-frame subscription calls. It provides the same result, and does all the encoding for you.\n  \"\n  [container-id [a & more :as value-path]]\n  (let [p (h/path->keyword container-id a more)]\n\n    ;(log/info \"create-container-local-event\" p\n    ;  \"apply conj\" (apply conj [:containers (h/path->keyword container-id)] (map h/path->keyword value-path)))\n\n    (re-frame/reg-event-db\n      p\n      (fn [db [_ new-val]]\n        ;(log/info \"event\" p new-val)\n\n        ; NOTE: this \"default\" processing could be overridden (using an optional keyword)\n        ; to perform more custom functions (like incremental updates to a collection)\n        ;\n        (assoc-in db\n          (apply conj [:containers (h/path->keyword container-id)] (map h/path->keyword value-path))\n          new-val)))))\n\n\n(defn create-local-path-event [value-path]\n  (let [p (h/path->keyword value-path)]                     ;a more)]\n\n    ;(log/info \"create-local-path-event\"\n    ;  value-path\n    ;  \"//\" p\n    ;  \"//\" (reduce conj [:containers] (map h/path->keyword value-path)))\n\n    (re-frame/reg-event-db\n      p\n      (fn [db [_ new-val]]\n        ;(log/info \"event\" p new-val)\n\n        ; NOTE: this \"default\" processing could be overridden (using an optional keyword)\n        ; to perform more custom functions (like incremental updates to a collection)\n        ;\n        (assoc-in db\n          ; TODO: can this be converted to (apply concat...)? (see https://clojuredesign.club/episode/080-apply-as-needed/)\n          (reduce conj [:containers] (map h/path->keyword value-path))\n          new-val)))))\n\n\n(defn init-container-locals\n  \"1. adds the `locals-and-defaults` into the `app-db` in the correct location\n  2. creates and registers a subscription to `:containers/<container-id>`\n  3. creates and registers a subscription (cascaded off `:containers/<container-id>`) for each relative path in `locals-and-defaults`\n  4. creates and registers an event handler for`:containers/<container-id>`\n  5. creates and registers an event handler for each relative path in `locals-and-defaults`\n\n  `locals-and-defaults` provides both the structure used to create the subscriptions and the default values when a new widget is\n  created\n\n  ---\n\n  - `container-id` : (string) id for the container, using a string means we can use generated values, like a guid, for the id\n  - `locals-and-defaults` : (hash-map) hash-map (tree) of values specific to _this_ widget.\n\n> TODO: need to build the reg-event-db handlers so users/ui can change the locals\n  \"\n  [container-id locals-and-defaults]\n  (let [paths (process-locals [] nil locals-and-defaults)]\n\n    ;(log/info \"init-container-locals\" container-id\n    ;  \"//\" paths\n    ;  \"//\" locals-and-defaults)\n\n    ; load the app-db with the default values\n    (init-local-values container-id locals-and-defaults)\n\n    ; create subscriptions\n    (create-container-sub container-id)\n    (doall\n      ; TODO: consider using locals-and-defaults to put the actual default into the subscription rather than 'nil'\n      (map #(create-container-local-sub container-id % nil) paths))\n\n    ; create event handlers\n    (create-container-event container-id)\n    (doall\n      (map #(create-container-local-event container-id %) paths))))\n\n\n(defn subscribe-local\n  \"constructs a Re-frame subscription to a local value since the given\n  widget's 'locals' in the `app-db`. This way the developer isn't concerned about the\n  exact location of the data in the `app-db`.\n\n  The container-id string will be converted into a keyword as appropriate to access the\n  registered subscription, so you can freely use generated values as widget identifiers\n\n> NOTE: the re-frame subscriptions ***MUST*** be created beforehand, using [[init-container-locals]]\n\n  ---\n\n  - `container-id` : (string) name of the widget, typically a guid, but it can be any string you'd like\n  - `value-path : (vector of keywords) the path into the widget values to locate the specific one for this subscription\n\n  `value-path` functions exactly like any other re-frame subscription, but relative to the\n  `[:containers <container-id>]` in the overall `app-db`\n\n  It is destructured as follows:\n\n  | var        | type       | description                         |\n  |:-----------|:----------:|:------------------------------------|\n  | `a`        | keyword    | the (primary) value to subscribe to |\n  | `& more`   | keyword(s) | any additional parts to the path    |\n\n  Returns a `reagent/reaction` which can be used exactly like any other re-frame subscription\n\n   ---\n\n   #### EXAMPLES\n\n   Assume\n\n   `(def container-id \\\"some-guid\\\")`\n\n   and\n\n   `(def some-guid-locals {:value-1 \\\"default\\\" :value-2 {:nested-value \\\"default\\\"}})`\n\n   | desired subscription | call                                         |\n   |:--------------------:| :--------------------------------------------|\n   | `:value-1`           | `(subscribe-local \\\"some-guid\\\" [:value-1])` |\n   | `:value-2`           | `(subscribe-local \\\"some-guid\\\" [:value-2])` |\n   | `:nested-value`      | `(subscribe-local \\\"some-guid\\\" [:value-2 :nested-value])` |\n  \"\n  [container-id [a & more :as value-path]]\n  (let [p (h/path->keyword container-id a more)]\n    ;(log/info \"subscribe-local\" container-id value-path p)\n    (re-frame/subscribe [p])))\n\n\n(defn resolve-subscribe-local [container-id [a & more :as value-path]]\n  (let [p         (h/path->keyword container-id a more)\n        sub-ok    (re-frame/subscribe [p])\n        get-ok    (let [x (re-frame/subscribe [(h/path->keyword container-id a)])]\n                    (if x (get @x more) nil))\n        get-in-ok (let [x (re-frame/subscribe [(h/path->keyword container-id)])]\n                    (if x (get-in @x value-path)))]\n\n    (log/info \"resolve-subscribe-local (ret)\" container-id \",\" value-path \"//\" sub-ok \"//\" get-ok \"//\" get-in-ok)\n\n    (if sub-ok\n      sub-ok\n      (if get-ok\n        (reaction get-ok)\n        (if get-in-ok\n          (reaction get-in-ok)\n          nil)))))\n\n\n(defn dispatch-local\n  \"constructs a Re-frame event dispatch call to a local value stored in the given\n  widget's 'locals' in the `app-db`. This way the developer isn't concerned about the\n  exact location of the data in the `app-db`.\n\n  The container-id string will be converted into a keyword as appropriate to access the\n  registered subscription, so you can freely use generated values as widget identifiers\n\n> NOTE: the re-frame event-handlers ***MUST*** be created beforehand, using [[init-container-locals]]\n\n  ---\n\n  - `container-id` : (string) name of the container, typically a guid, but it can be any string you'd like\n  - `value-path : (vector of keywords) the path into the widget values to locate the specific one for this subscription\n  - `new-val` : (any) the new value to store at the given path\n\n  `value-path` functions exactly like any other re-frame subscription, but relative to the\n  `[:containers <container-id>]` in the overall `app-db`\n\n  It is destructured as follows:\n\n  | var        | type       | description                         |\n  |:-----------|:----------:|:------------------------------------|\n  | `a`        | keyword    | the (primary) value to subscribe to |\n  | `& more`   | keyword(s) | any additional parts to the path    |\n\n   ---\n\n   #### EXAMPLES\n\n  \"\n  [container-id [a & more :as value-path] new-val]\n\n  ;(log/info \"dispatch-local\" container-id value-path new-val)\n\n  (let [p (h/path->keyword container-id a more)]\n    ;(log/info \"dispatch-local\" container-id \"//\" value-path \"//\" p \"//\" new-val)\n    (re-frame/dispatch [p new-val])))\n\n\n(defn apply-local\n  \"applies the given function (fn-to-apply) to the value found in the app-db and then\n  dispatches that new value to replace the old value using dispatch-local with the\n  original value-path vector\n\n  ---\n\n  - fn-to-apply : (function) takes 1 parameter, the original value at the scubscription vector\n  \"\n  [container-id [a & more :as value-path] fn-to-apply]\n\n  (let [p          (h/path->keyword container-id a more)\n        orig-value @(re-frame/subscribe [p])\n        new-value  (fn-to-apply orig-value)]\n    ;(log/info \"apply-local\"\n    ;  \"//\" p\n    ;  \"//\" orig-value\n    ;  \"//\" new-value)\n    (dispatch-local container-id [value-path] new-value)))\n\n\n(defn build-subs\n  \"build the subscription needed to access all the 'local' configuration\n  properties\n\n  1. process-locals\n  2. map over the result and call ui-utils/subscribe-local\n  3. put the result into a hash-map\n  \"\n  [component-id local-config]\n\n  ;(log/info \"build-subs\" component-id \"//\" local-config)\n\n  (let [ret (->> (process-locals [] nil local-config)\n              (map (fn [path]\n                     {path (subscribe-local component-id path)}))\n              (into {}))]\n\n    ;(log/info \"build-subs\" component-id \"//\" ret)\n    ret))\n\n\n(defn resolve-sub [subs path]\n  (let [ret (get subs (->> path\n                        (map h/path->keyword)\n                        (into [])))]\n    ;(log/info \"resolve-sub\" subs \"// (path)\" path \"// (ret)\" ret)\n    (if (or (instance? reagent.ratom.RAtom ret)\n          (instance? Atom ret)\n          (instance? reagent.ratom.Reaction ret))\n      @ret\n      ret)))\n\n\n(comment\n  (re-frame/subscribe [:chart-remote-data-demo.widget])\n  (re-frame/subscribe [:chart-remote-data-demo.widget.ui.bar-chart])\n  (re-frame/subscribe [:chart-remote-data-demo.widget.ui.bar-chart.x-axis])\n  (re-frame/subscribe [:chart-remote-data-demo.widget.ui.bar-chart.x-axis.include])\n\n\n  (do\n    (def container-id [:simple-multi-chart.widget :blackboard :topic.data])\n    (def a :data)\n    (def more nil)\n    (def value-path [:data]))\n\n  (def sub-ok (re-frame/subscribe (h/path->keyword container-id [:data])))\n  (def get-ok (let [x (re-frame/subscribe [(h/path->keyword container-id a)])]\n                (if x (get @x more) nil)))\n  (def get-in-ok (let [x (re-frame/subscribe [(h/path->keyword container-id)])]\n                   (if x (get-in @x value-path))))\n\n\n  ())\n\n\n\n(comment\n  (def db @re-frame.db/app-db)\n  (def container :bar-chart-2-demo.bar-chart-2)\n  (def init-vals {:y-axis {:include true, :dataKey \"\", :orientation :left, :scale \"auto\"},\n                  :grid   {:include true, :strokeDasharray {:dash \"3\", :space \"3\"}, :stroke \"#a9a9a9\"}})\n  (def init-vals {:amt    {:include true :fill \"#ffffff\" :stackId \"\"}\n                  :tv     {:include true :fill \"#ffffff\" :stackId \"\"}\n                  :y-axis {:include true, :dataKey \"\", :orientation :left, :scale \"auto\"},\n                  :grid   {:include true, :strokeDasharray {:dash \"3\", :space \"3\"}, :stroke \"#a9a9a9\"},})\n  (def init-vals {:y-axis {:include false, :dataKey \"\", :orientation :left, :scale \"auto\"},\n                  :grid   {:include true, :strokeDasharray {:dash \"3\", :space \"3\"}, :stroke \"#a9a9a9\"},})\n\n  (def old-vals (get-in db [:containers container]))\n  (def old-vals-flat (->> old-vals\n                       (process-locals [] nil)\n                       (filter #(= 1 (count %)))\n                       (into #{})))\n  (def init-vals-flat (->> init-vals\n                        (process-locals [] nil)\n                        (filter #(= 1 (count %)))\n                        (into #{})))\n  (def diff (clojure.set/difference init-vals-flat old-vals-flat))\n\n\n  (let [db             @re-frame.db/app-db\n        container      :bar-chart-2-demo.bar-chart-2\n        init-vals      {:amt    {:include true :fill \"#ffffff\" :stackId \"\"}\n                        :tv     {:include true :fill \"#ff00ff\" :stackId \"\"}\n                        :y-axis {:include true :dataKey \"\" :orientation :left :scale \"auto\"}\n                        :grid   {:include true :strokeDasharray {:dash \"3\" :space \"3\"}\n                                 :stroke  \"#a9a9a9\"}}\n        old-vals       (get-in db [:containers container])\n        old-vals-flat  (->> old-vals\n                         (process-locals [] nil)\n                         (filter #(= 1 (count %)))\n                         (into #{}))\n        init-vals-flat (->> init-vals\n                         (process-locals [] nil)\n                         (filter #(= 1 (count %)))\n                         (into #{}))\n        diff           (clojure.set/difference init-vals-flat old-vals-flat)]\n\n    (merge old-vals\n      (->> diff\n        (map (fn [[path]]\n               {path (get init-vals path)}))\n        (into {}))))\n\n  ())\n\n\n; play with dispatch-local and related things\n(comment\n  (def container-id nil)\n  (def path [:uv :fill])\n  (def path [:blackboard :topic/config :uv :fill])\n  (def path [:container-widget :blackboard :topic/config :uv :fill])\n\n\n  (let [[a & more] path]\n    (h/path->keyword container-id a more))\n\n\n\n\n\n  ())\n\n\n"]}