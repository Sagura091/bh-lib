{"version":3,"sources":["bh_ui/atom/re_com/table.cljs"],"mappings":"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","names":["taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","bh-ui.atom.re-com.table/table-column-headers","data","rows","width","height","d","cljs.core.apply","cljs.core/set","cljs.core.map","cljs.core/keys","col-count","cljs.core/count","col-width","x__4336__auto__","y__4337__auto__","or__4253__auto__","row-height","k","cljs.core/name","cljs.core.into","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","bh-ui.atom.re-com.table/table*","p__50731","map__50732","cljs.core/--destructure-map","cljs.core.get","seq50730","self__4852__auto__","cljs.core/seq","max-rows","cell-style-fn","on-click-row-fn","row-line-color","cljs.core/deref","cljs.core/empty?","re-com.core/alert-box","js/goog.DEBUG","re-com.core/simple-v-table","bh-ui.atom.re-com.table/non-meta-table","p__50734","map__50735","seq50733","bh-ui.utils.helpers/resolve-value","bh-ui.atom.re-com.table/meta-table","p__50737","map__50738","seq50736","coc?","reagent.core.atom","re-com.core/h-box","re-com.core/popover-anchor-wrapper","re-com.core/md-icon-button","cljs.core.swap_BANG_","cljs.core/not","re-com.core/popover-content-wrapper","bh-ui.atom.re-com.table/table","p__50740","map__50741","seq50739","bh-ui.atom.re-com.table/meta-data","re-frame.core/dispatch-sync"],"sourcesContent":["(ns bh-ui.atom.re-com.table\n  (:require [bh-ui.utils.helpers :as h]\n            [re-com.core :as rc]\n            [re-frame.core :as re-frame]\n            [reagent.core :as r]\n            [taoensso.timbre :as log]))\n\n\n(log/info \"bh-ui.table\")\n\n\n(defn table-column-headers [data rows width height]\n  (let [d          (apply set (map keys data))\n        col-count  (count d)\n        col-width  (max 80 (- (/ (or width 400) col-count) 5))\n        row-height (max 50 (/ (or height 400) (+ 2 (or rows 5))))]\n    (->> d\n      (map (fn [k]\n             {:id    k :header-label (name k) :row-label-fn k\n              :width col-width :height row-height}))\n      (into []))))\n\n\n(defn- table* [& {:keys [data max-rows width height cell-style-fn\n                         on-click-row-fn row-line-color]}]\n\n  ;(log/info \"table-star\" @data)\n\n  (if (empty? @data)\n\n    [rc/alert-box :src (rc/at)\n     :alert-type :info\n     :heading \"Waiting for data\"]\n\n    [rc/simple-v-table :src (rc/at)\n     :model data\n     :columns (table-column-headers @data 5 (or width 200) (or height))\n     :max-rows (or max-rows (count @data))\n     :table-row-line-color (or row-line-color \"#00fff0\")\n     :on-click-row (or on-click-row-fn #())\n     :cell-style (or cell-style-fn #())\n     :parts {:simple-wrapper {:style {:border false}}}]))\n\n\n(defn- non-meta-table [& {:keys [data max-rows width height cell-style-fn\n                                 on-click-row-fn row-line-color]}]\n\n  (let [d (h/resolve-value data)]\n    (fn []\n      ;(log/info \"non-meta-table\" data \"//\" @remote)\n      [:div {:style {:width  (or width \"300px\") :height (or height \"250px\")\n                     :margin :auto}}\n       [table*\n        :data d\n        :max-rows max-rows\n        :width width\n        :height height\n        :row-line-color (or row-line-color \"#00fff0\")\n        :on-click-row (or on-click-row-fn #())\n        :cell-style-fn (or cell-style-fn #())]])))\n\n\n(defn meta-table [& {:keys [data max-rows width height cell-style-fn\n                            on-click-row-fn row-line-color]}]\n  (let [d    (h/resolve-value data)\n        coc? (r/atom false)]\n\n    (fn []\n      ;(log/info \"meta-table (inner)\" data \"//\" @d)\n\n      [:div.card {:style {:width  (or width \"90%\") :height (or height \"100%\")\n                          :margin :auto}}\n       [rc/h-box :src (rc/at)\n        :gap \"2px\"\n        :children [[table*\n                    :data (h/resolve-value (if (:data @d) (:data @d) []))\n                    :max-rows (or max-rows (count (:data @d)))\n                    :width width\n                    :height height\n                    :row-line-color (or row-line-color \"#00fff0\")\n                    :on-click-row (or on-click-row-fn #())\n                    :cell-style-fn (or cell-style-fn #())]\n                   (when (seq (:c-o-c @d))\n                     [:div\n                      [rc/popover-anchor-wrapper :src (rc/at)\n                       :showing? coc?\n                       :position :below-center\n                       :anchor [rc/md-icon-button\n                                :md-icon-name \"zmdi zmdi-badge-check\"\n                                :tooltip \"view chain-of-custody\"\n                                :on-click #(swap! coc? not)]\n                       :popover [rc/popover-content-wrapper :src (rc/at)\n                                 :title \"Chain-of-Custody\"\n                                 ;:no-clip? true\n                                 :body [table*\n                                        :data (h/resolve-value (if (:c-o-c @d) (:c-o-c @d) []))\n                                        :max-rows 3]]]])]]])))\n\n\n(defn table [& {:keys [data max-rows width height cell-style-fn\n                       on-click-row-fn row-line-color]}]\n\n  (let [d (h/resolve-value data)]\n    ;(log/info \"table\" data \"//\" @d \"//\" (:data @d))\n    (if (:metadata @d)\n      [meta-table\n       :data data\n       :max-rows max-rows\n       :width width\n       :height height\n       :cell-style-fn cell-style-fn\n       :on-click-row-fn on-click-row-fn\n       :row-line-color row-line-color]\n      [non-meta-table\n       :data data\n       :max-rows max-rows\n       :width width\n       :height height\n       :cell-style-fn cell-style-fn\n       :on-click-row-fn on-click-row-fn\n       :row-line-color row-line-color])))\n\n\n(def meta-data {:rc/table {:component table\n                           :ports     {:data :port/sink}}})\n\n\n(re-frame/dispatch-sync [:register-meta meta-data])\n\n\n\n\n(comment\n\n  (def value [{:generated-by \"dummy.data-source.targets\",\n               :at           #inst \"2022-03-17T20:40:28.006-00:00\",\n               :signature    \"53dbe964-a4cc-4c36-965a-3e03fdd84b53\"}])\n  (def opts nil)\n\n  (and (coll? value)\n    (not (empty? value))\n    (every? keyword? value))\n  (instance? reagent.ratom.RAtom value)\n  (cond\n    ; TODO: can this be converted to (apply concat...)? (see https://clojuredesign.club/episode/080-apply-as-needed/)\n    (and (coll? value)\n      (not (empty? value))\n      (every? keyword? value)) (re-frame/subscribe (reduce conj value opts))\n    (instance? reagent.ratom.RAtom value) value\n    (instance? Atom value) value\n    :else (r/atom value))\n\n  (seq (:c-o-c {:c-o-c []}))\n\n  (def data [:bhui.subs/source :source/targets])\n  (def d (h/resolve-value data))\n\n  (seq (:c-o-c @d))\n\n  (def some-code {:dummy  {:one :port/sink :alpha :port/sink}\n                  :dummy2 {:two :port/source}})\n\n  (str some-code)\n\n  (clojure.string/join \"\\n\" (clojure.string/split (str some-code) #\",\"))\n\n  ())\n"]}