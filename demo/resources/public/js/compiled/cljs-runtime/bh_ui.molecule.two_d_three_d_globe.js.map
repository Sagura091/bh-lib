{"version":3,"sources":["bh_ui/molecule/two_d_three_d_globe.cljs"],"mappings":"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","names":["bh-ui.molecule.two-d-three-d-globe/sample-data","reagent.core.atom","bh-ui.molecule.two-d-three-d-globe/source-code","bh-ui.molecule.two-d-three-d-globe/local-config","data","bh-ui.molecule.two-d-three-d-globe/config","component-id","cljs.core.merge","bh-ui.utils/default-pub-sub","bh-ui.molecule.two-d-three-d-globe/three-d-view","container-id","bh-ui.molecule.two-d-three-d-globe/two-d-view","bh-ui.molecule.two-d-three-d-globe/component-panel","subscriptions","bh-ui.utils/build-subs","cljs.core._EQ_","bh-ui.utils/resolve-sub","bh-ui.utils/dispatch-local","pred__59921","expr__59922","js/Error","cljs.core/=","pred__59924","expr__59925","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","bh-ui.molecule.two-d-three-d-globe/component","p__59928","map__59929","cljs.core/--destructure-map","cljs.core.get","seq59927","self__4852__auto__","cljs.core/seq","id","cljs.core/deref","cljs.core/reset!","bh-ui.utils/init-container-locals"],"sourcesContent":["(ns bh-ui.molecule.two-d-three-d-globe\n  (:require [bh-ui.utils :as ui-utils]\n            [re-com.core :as rc]\n            [reagent.core :as r]\n            [taoensso.timbre :as log]))\n\n\n(def sample-data\n  (r/atom {}))\n\n\n(def source-code '[:div \"2D/3D GLobe\"])\n\n\n(defn local-config [data]\n  {:two-d-three-d :2d})\n\n\n(defn config [component-id data]\n  (merge ui-utils/default-pub-sub\n    (local-config data)))\n\n\n(defn- three-d-view [data component-id container-id]\n  [:div \"3D view\"])\n\n\n(defn- two-d-view [data component-id container-id]\n  [:div \"2D view\"])\n\n\n(defn- component-panel [data component-id container-id]\n\n  (let [subscriptions (ui-utils/build-subs component-id (local-config data))]\n\n    (fn [data component-id container-id]\n      [:div\n       ;which view do you want? :2d? :3d?\n       [:button.button.is-info.is-outlined {:style    {:float :right}\n                                            :on-click #(if (= :2d (ui-utils/resolve-sub subscriptions [:two-d-three-d]))\n                                                         (ui-utils/dispatch-local component-id [:two-d-three-d] :3d)\n                                                         (ui-utils/dispatch-local component-id [:two-d-three-d] :2d))}\n        (condp = (ui-utils/resolve-sub subscriptions [:two-d-three-d])\n          :2d \"to 3d\"\n          :3d \"to 2d\")]\n\n       (condp = (ui-utils/resolve-sub subscriptions [:two-d-three-d])\n         :3d [three-d-view data component-id container-id]\n         :2d [two-d-view data component-id container-id])])))\n\n\n(defn component\n  ([& {:keys [data component-id container-id]}]\n\n   ;(log/info \"two-2-three-3-globe\" @data)\n\n   (let [id (r/atom nil)]\n\n     (fn []\n       (when (nil? @id)\n         (reset! id component-id)\n         (ui-utils/init-container-locals @id (config @id data))\n         (ui-utils/dispatch-local @id [:container] container-id))\n\n       ;(log/info \"component\" @id)\n\n       [component-panel data @id container-id]))))\n\n\n(comment\n  (do (def component-id \"2d-3d-globe\")\n      (def data sample-data)\n      (def id (r/atom component-id))\n      (def container-id \"2d-3d-globe-demo/globe\"))\n\n  (def s (ui-utils/build-subs component-id (local-config data)))\n  (def two-d<->three-d (ui-utils/resolve-sub s [:two-d-three-d]))\n\n  ())\n"]}