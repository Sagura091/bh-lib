{"version":3,"sources":["demo/src/catalog/molecule/example/composite/coverage_plan.cljs"],"mappings":"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","names":["taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","demo.src.catalog.molecule.example.composite.coverage-plan/ww-example","container-id","logged-in?","re_frame.core.subscribe","pub-sub-started?","cljs.core/deref","cljs.core/not","re-frame.core/dispatch","and__4251__auto__","G__61125","G__61126","G__61127","woolybear.ad.utils/demo","woolybear.ad.layout/frame","bh-ui.molecule.grid-container/component","reagent.core.atom","bh-ui.molecule.composite.coverage-plan/ui-definition","bh_ui.utils.helpers.path__GT_keyword","G__61128","G__61130","re-com.core/alert-box","js/goog.DEBUG","demo.src.catalog.molecule.example.composite.coverage-plan/r-example","G__61140","G__61141","G__61142","cljs.core/assoc-in","G__61143","G__61144","demo.src.catalog.molecule.example.composite.coverage-plan/twoD-example","G__61156","G__61157","G__61158","G__61159","G__61160"],"sourcesContent":["(ns demo.src.catalog.molecule.example.composite.coverage-plan\n  (:require [demo.subs :as subs]\n            [bh-ui.molecule.composite.coverage-plan :as coverage-plan]\n            [bh-ui.molecule.grid-container :as grid]\n            [bh-ui.utils.helpers :as h]\n            [re-com.core :as rc]\n            [re-frame.core :as re-frame]\n            [reagent.core :as r]\n            [taoensso.timbre :as log]\n            [woolybear.ad.utils :as acu]\n            [woolybear.ad.layout :as layout]))\n\n\n(log/info \"demo.src.catalog.molecule.example.composite.coverage-plan\")\n\n\n(defn ww-example []\n  (let [container-id     \"coverage-plan-demo-ww\"\n        logged-in?       (re-frame/subscribe [:subs/logged-in?])\n        pub-sub-started? (re-frame/subscribe [:bhui.subs/pub-sub-started?])]\n\n    (if (not @logged-in?)\n      (re-frame/dispatch [:events/login \"test-user\" \"test-pwd\"]))\n\n    (fn []\n      (if (and @logged-in? @pub-sub-started?)\n        (acu/demo \"Coverage Plan using a Grid for layout (Worldwind globe) WIP\"\n          \"This experiment uses a GRID to layout the various UI components that make up the 'composite'.\n          Constructs 'coverage-plan', drawing the layout from `:grid-layout` which provides X/Y/W/H for each\n          component on the widget's internal grid.\"\n          [layout/frame\n           ;;\n           ;; NOTE: the :height MUST be specified here since the ResponsiveContainer down in bowels of the chart needs a height\n           ;; in order to actually draw the Recharts components. just saying \"100%\" doesn't work, since the\n           ;; that really means \"be as big as you need\" and ResponsiveContainer then doesn't know what to do.\n           ;;\n           [:div {:style {:width \"100%\" :min-height \"400px\"}}\n            [grid/component\n             :data (r/atom coverage-plan/ui-definition)\n             :component-id (h/path->keyword container-id \"grid-widget\")\n             :container-id container-id\n             :resizable true\n             :tools true]]])\n        (acu/demo\n          \"Coverage Plan\"\n          [rc/alert-box :src (rc/at)\n           :alert-type :info\n           :heading \"Waiting for (demo) Log-in\"])))))\n\n\n(defn r-example []\n  (let [container-id     \"coverage-plan-demo-r\"\n        logged-in?       (re-frame/subscribe [:subs/logged-in?])\n        pub-sub-started? (re-frame/subscribe [:bhui.subs/pub-sub-started?])]\n\n    (if (not @logged-in?)\n      (re-frame/dispatch [:events/login \"test-user\" \"test-pwd\"]))\n\n    (fn []\n      (if (and @logged-in? @pub-sub-started?)\n        (acu/demo \"Coverage Plan using a Grid for layout (Resium globe)\"\n          \"This experiment uses a GRID to layout the various UI components that make up the 'composite'.  Constructs\n          'coverage-plan', drawing the layout from `:grid-layout` which provides X/Y/W/H for each component\n          on the widget's internal grid.\n\n> This example differs from the Worldwind version only by replacing the `:ww/globe` reference with `:r/globe`\n\"\n          [layout/frame\n           ;;\n           ;; NOTE: the :height MUST be specified here since the ResponsiveContainer down in bowels of the chart needs a height\n           ;; in order to actually draw the Recharts components. just saying \"100%\" doesn't work, since the\n           ;; that really means \"be as big as you need\" and ResponsiveContainer then doesn't know what to do.\n           ;;\n           [:div {:style {:width \"100%\" :min-height \"400px\"}}\n            [grid/component\n             :data (r/atom\n                     (assoc-in coverage-plan/ui-definition\n                       [:components :ui/globe :name] :r/globe))\n             :component-id (h/path->keyword container-id \"grid-widget\")\n             :container-id container-id\n             :resizable true\n             :tools true]]])\n        (acu/demo\n          \"Coverage Plan\"\n          [rc/alert-box :src (rc/at)\n           :alert-type :info\n           :heading \"Waiting for (demo) Log-in\"])))))\n\n\n(defn twoD-example []\n  (let [container-id     \"coverage-plan-demo-2D\"\n        logged-in?       (re-frame/subscribe [:subs/logged-in?])\n        pub-sub-started? (re-frame/subscribe [:bhui.subs/pub-sub-started?])]\n\n    (if (not @logged-in?)\n      (re-frame/dispatch [:events/login \"test-user\" \"test-pwd\"]))\n\n    (fn []\n      (if (and @logged-in? @pub-sub-started?)\n        (acu/demo \"Coverage Plan using a Grid for layout (Leaflet globe)\"\n          \"This experiment uses a GRID to layout the various UI components that make up the 'composite'.  Constructs\n          'coverage-plan', drawing the layout from `:grid-layout` which provides X/Y/W/H for each component\n          on the widget's internal grid.\n\n> This example differs from the Worldwind version only by replacing the `:ww/globe` reference with `:l/globe`\n\"\n          [layout/frame\n           ;;\n           ;; NOTE: the :height MUST be specified here since the ResponsiveContainer down in bowels of the chart needs a height\n           ;; in order to actually draw the Recharts components. just saying \"100%\" doesn't work, since the\n           ;; that really means \"be as big as you need\" and ResponsiveContainer then doesn't know what to do.\n           ;;\n           [:div {:style {:width \"100%\" :min-height \"400px\"}}\n            [grid/component\n             :data (r/atom\n                     (assoc-in coverage-plan/ui-definition\n                       [:components :ui/globe :name] :l/globe))\n             :component-id (h/path->keyword container-id \"grid-widget\")\n             :container-id container-id\n             :resizable true\n             :tools true]]])\n        (acu/demo\n          \"Coverage Plan\"\n          [rc/alert-box :src (rc/at)\n           :alert-type :info\n           :heading \"Waiting for (demo) Log-in\"])))))\n\n\n(comment\n  (def logged-in? (re-frame/subscribe [:subs/logged-in?]))\n\n  (if (not @logged-in?)\n    (re-frame/dispatch [:events/login \"test-user\" \"test-pwd\"]))\n\n  ())\n\n"]}