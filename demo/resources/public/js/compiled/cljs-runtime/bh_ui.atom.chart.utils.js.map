{"version":3,"sources":["bh_ui/atom/chart/utils.cljs"],"mappings":"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","names":["taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","bh-ui.atom.chart.utils/init-config-panel","base-id","formal-id","cljs.core.keyword","data-path","config-id","data-id","db-id","tab-id","value-id","init-db","woolybear.packs.tab_panel.mk_tab_panel_data","re_frame.core.reg_sub","db","_","navbar","tab-panel","re-frame.core/dispatch-sync","bh-ui.atom.chart.utils/dummy-data-panel","data","cljs.core/deref","bh-ui.atom.chart.utils/tabular-data-panel","bh-ui.atom.re-com.table/table","bh-ui.atom.chart.utils/meta-tabular-data-panel","bh-ui.atom.re-com.table/meta-table","bh-ui.atom.chart.utils/dag-data-panel","bh-ui.atom.chart.utils/hierarchy-data-panel","bh-ui.atom.chart.utils/btns-style","bh-ui.atom.chart.utils/x-axis-btns","bh-ui.atom.chart.utils/y-axis-btns","bh-ui.atom.chart.utils/default-config","bh-ui.atom.chart.utils/subscription-error","label","path","bh-ui.atom.chart.utils/column-picker","component-id","model","bh-ui.utils/subscribe-local","p1__51049#","headings","cljs.core.apply","cljs.core/set","cljs.core.map","cljs.core/keys","cljs.core.get","btns","cljs.core.mapv","h","re-com.core/h-box","js/goog.DEBUG","re-com.core/box","re-com.core/horizontal-bar-tabs","bh-ui.utils/dispatch-local","bh-ui.atom.chart.utils/multi-button","item","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","bh-ui.atom.chart.utils/multi-bar-tabs","p__51055","map__51056","cljs.core/--destructure-map","seq51053","self__4852__auto__","cljs.core/seq","on-change","id-fn","label-fn","tooltip-fn","tooltip-position","vertical?","class","style","attr","parts","validate?","args","showing","reagent.core.atom","p__51060","map__51061","tabs","chosen","re-com.util/deref-or-value","js/Error","or__4253__auto__","cljs.core/not","cljs.core/not-empty","p1__51051#","cljs.core.filter","cljs.core._EQ_","cljs.core.into","cljs.core.merge","re-com.box/flex-child-style","cljs.core.get_in","re-com.debug/->attr","iter__4652__auto__","s__51067","cljs.core/LazySeq","temp__5753__auto__","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__51069","cljs.core/chunk-buffer","i__51068","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__51066","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","t","id","tooltip","selected?","cljs.core/contains?","the-button","event","cljs.core/reset!","p1__51052#","cljs.core.swap_BANG_","re-com.core/popover-tooltip","reagent.core/track","bh-ui.atom.chart.utils/column-multi-picker","as-set","bh-ui.atom.chart.utils/boolean-config","config","checked?","p1__51073#","re-com.core/checkbox","cljs.core/empty?","G__51076","bh-ui.atom.chart.utils/slider-config","min","max","step","p1__51074#","and__4251__auto__","re-com.core/slider","bh-ui.atom.chart.utils/text-config","p1__51077#","re-com.core/label","re-com.core/input-text","bh-ui.atom.chart.utils/strokeDasharray","seq51078","G__51079","cljs.core/next","self__4851__auto__","dash","space","bh-ui.atom.chart.utils/dashArray-config","re-com.core/v-box","cljs.core.conj","bh-ui.atom.chart.utils/enumerated-config","p1__51082#","bh-ui.atom.chart.utils/orientation-config","bh-ui.atom.chart.utils/scale-config","bh-ui.atom.chart.utils/layout-config","bh-ui.atom.chart.utils/align-config","bh-ui.atom.chart.utils/verticalAlign-config","bh-ui.atom.chart.utils/color-config","p__51088","vec__51089","cljs.core.nth","seq51084","G__51085","G__51086","G__51087","config-data","position","d","bh-ui.utils.helpers/resolve-value","showing?","p","p1__51083#","re-com.core/popover-anchor-wrapper","re-com.core/button","bh-ui.utils.color/best-text-color","bh-ui.utils.color/hex->rgba","re-com.core/popover-content-wrapper","js/shadow.js.shim.module$react_colorful.HexColorPicker","bh-ui.utils.helpers/handle-change-path","bh-ui.atom.chart.utils/color-config-text","p__51104","vec__51107","seq51097","G__51098","G__51099","G__51100","p1__51096#","bh-ui.atom.chart.utils/isAnimationActive","bh-ui.atom.chart.utils/grid","bh-ui.atom.chart.utils/x-axis","bh-ui.atom.chart.utils/y-axis","bh-ui.atom.chart.utils/tooltip","bh-ui.atom.chart.utils/legend","bh-ui.atom.chart.utils/option","path-root","chosen-path","keys-path","keys","k","p1__51126#","bh-ui.atom.chart.utils/standard-chart-config","re-com.core/line","bh-ui.atom.chart.utils/non-gridded-chart-config","bh-ui.atom.chart.utils/override","s","ui","tag","bh-ui.atom.chart.utils/chart-grid","grid?","grid-dash","grid-space","grid-stroke","js/shadow.js.shim.module$recharts.CartesianGrid","bh_ui.atom.chart.utils.strokeDasharray","bh-ui.atom.chart.utils/standard-chart-components","x-axis?","x-axis-dataKey","x-axis-orientation","x-axis-scale","y-axis?","y-axis-dataKey","y-axis-orientation","y-axis-scale","tooltip?","legend?","legend-layout","legend-align","legend-verticalAlign","js/shadow.js.shim.module$recharts.XAxis","js/shadow.js.shim.module$recharts.YAxis","js/shadow.js.shim.module$recharts.Tooltip","js/shadow.js.shim.module$recharts.Legend","bh-ui.atom.chart.utils/non-gridded-chart-components","cljs.core/chunk-first"],"sourcesContent":["(ns bh-ui.atom.chart.utils\n  (:require [events :as events]\n            [bh-ui.atom.re-com.table :as table]\n            [bh-ui.utils :as u]\n            [bh-ui.utils.color :as color]\n            [bh-ui.utils.helpers :as h]\n            [re-com.box :as rcb]\n            [re-com.core :as rc]\n            [re-com.debug :as rc-dbg]\n            [re-com.util :as rcu]\n            [re-frame.core :as re-frame]\n            [reagent.core :as r]\n            [taoensso.timbre :as log]\n            [woolybear.packs.tab-panel :as tab-panel]\n\n            [\"recharts\" :refer [XAxis YAxis CartesianGrid Tooltip Legend]]\n            [\"react-colorful\" :refer [HexColorPicker]]))\n\n\n(log/info \"bh-ui.atom.chart.utils\")\n\n\n(defn init-config-panel\n  \"this need some REALLY GOOD documentation!\"\n  [base-id]\n  ;(log/info \"init-config-panel\" base-id)\n  (let [formal-id (keyword base-id)\n        data-path [formal-id :tab-panel]\n        config-id (keyword base-id \"config\")\n        data-id   (keyword base-id \"data\")\n        db-id     (keyword \"db\" base-id)\n        tab-id    (keyword base-id \"tab-panel\")\n        value-id  (keyword base-id \"value\")\n        init-db   {:tab-panel (tab-panel/mk-tab-panel-data\n                                data-path config-id)}]\n\n    (re-frame/reg-sub\n      db-id\n      (fn [db _]\n        (formal-id db)))\n\n    (re-frame/reg-sub\n      tab-id\n      :<- [db-id]\n      (fn [navbar]\n        (:tab-panel navbar)))\n\n    (re-frame/reg-sub\n      value-id\n      :<- [tab-id]\n      (fn [tab-panel]\n        (:value tab-panel)))\n\n    (re-frame/dispatch-sync [::events/init-locals formal-id init-db])))\n\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;\n; DATA DISPLAY/EDIT PANELS\n;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; region\n\n(defn dummy-data-panel [data]\n  [:div \"a dummy data panel\"])\n\n\n(defn tabular-data-panel\n  \"provides a simple tabular component (via `bh-ui.table`) to show the data presented\n  in the Chart.\n\n> Note: `table` uses the keys of the first hash-map in `@data` as the header label for the columns\n\n  ---\n\n  - data : (atom) vector of content hash-maps.\"\n\n  [data]\n  ;(log/info \"tabular-data-panel\" @data)\n  [table/table\n   :width 500\n   :data @data\n   :max-rows 5])\n\n\n(defn meta-tabular-data-panel\n  \"provides a simple tabular component (via `bh-ui.table`) to show the data presented\n  in the Chart.\n\n> Note: `table` uses the keys of the first hash-map in `@data` as the header label for the columns\n\n  ---\n\n  - data : (atom) atom wrapping data with metadata included\"\n\n  [data]\n  ;(log/info \"meta-tabular-data-panel\" @data)\n  [table/meta-table\n   :width 500\n   :data data\n   :max-rows 5])\n\n\n(defn dag-data-panel\n  \"provides a UI component to show the DAG data presented in the Chart.\n\n> Note: `table` uses the keys of the first hash-map in `@data` as the header label for the columns\n\n  ---\n\n  - data : (atom) vector of content hash-maps.\"\n\n  [data]\n  [:div \"DAG data will be shown here\"])\n\n\n(defn hierarchy-data-panel\n  \"provides a UI component to show the hierarchical data presented in the Chart.\n\n  ---\n\n  - data : (atom) data to show/edit\"\n\n  [data]\n  [:div \"hierarchical data will be shown here\"])\n\n;; endregion\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;\n; LOW-LEVEL CONFIGURATION 'ATOMS' & 'MOLECULES'\n;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; region\n\n(def btns-style {:font-size   \"12px\"\n                 :line-height \"20px\"\n                 :padding     \"6px 8px\"})\n(def x-axis-btns [{:id :bottom :label \":bottom\"}\n                  {:id :top :label \":top\"}])\n(def y-axis-btns [{:id :left :label \":left\"}\n                  {:id :right :label \":right\"}])\n(def default-config {:isAnimationActive true\n                     :grid              {:include         true\n                                         :strokeDasharray {:dash \"3\" :space \"3\"}\n                                         :stroke          \"#a9a9a9\"}\n                     :x-axis            {:include     true\n                                         :dataKey     \"\"\n                                         :orientation :bottom\n                                         :scale       \"auto\"}\n                     :y-axis            {:include     true\n                                         :dataKey     \"\"\n                                         :orientation :left\n                                         :scale       \"auto\"}\n                     :tooltip           {:include true}\n                     :legend            {:include       true\n                                         :layout        \"horizontal\"\n                                         :align         \"center\"\n                                         :verticalAlign \"bottom\"}})\n\n\n(defn- subscription-error [label path]\n  (log/info (str label \" : \" path \" - error\"))\n  [:div])\n\n\n(defn column-picker [data component-id label path]\n  (let [model (u/subscribe-local component-id path)]\n    (fn []\n      (if model\n        (let [headings (apply set (map keys (get @data :data)))\n              btns     (mapv (fn [h] {:id h :label h}) headings)]\n          ;(log/info \"column-picker\" data \"//\" component-id \"//\" label \"//\" path)\n          [rc/h-box :src (rc/at)\n           :gap \"5px\"\n           :children [[rc/box :src (rc/at) :align :start :child [:code label]]\n                      [rc/horizontal-bar-tabs\n                       :src (rc/at)\n                       :model @model\n                       :tabs btns\n                       :style btns-style\n                       :on-change #(u/dispatch-local component-id path %)]]])\n        (subscription-error label path)))))\n\n\n(defn- multi-button [data component-id path item]\n  (log/info \"multi-button\" item)\n  [:div (str item)])\n\n\n(defn multi-bar-tabs\n  [& {:keys [model btns on-change id-fn label-fn tooltip-fn tooltip-position\n             vertical? class style attr parts validate?]\n      :or   {id-fn :id label-fn :label tooltip-fn :tooltip}\n      :as args}]\n  (let [showing (r/atom nil)]\n    (fn [& {:keys [model tabs]}]\n      (let [chosen (rcu/deref-or-value model)\n            btns   (rcu/deref-or-value btns)\n            _      (assert (or (not validate?) (not-empty (filter #(= chosen (id-fn %)) tabs))) \"model not found in tabs vector\")]\n\n        (log/info \"multi-bar-tabs\" model \"//\" chosen \"//\" btns)\n\n        (into [:div\n               (merge\n                 {:class (str \"noselect btn-group\" (if vertical? \"-vertical\") \" rc-tabs \" class)\n                  :style (merge (rcb/flex-child-style \"none\")\n                           (get-in parts [:wrapper :style]))}\n                 (rc-dbg/->attr args)\n                 attr)]\n          (for [t btns]\n            (let [id         (id-fn t)\n                  label      (label-fn t)\n                  tooltip    (when tooltip-fn (tooltip-fn t))\n                  selected?  (contains? chosen id)\n                  the-button [:button\n                              (merge\n                                {:type     \"button\"\n                                 :key      (str id)\n                                 :class    (str \"btn btn-default \" (if selected? \"active \") \"rc-tabs-btn \" (get-in parts [:button :class]))\n                                 :style    style\n                                 :on-click (when on-change (rc/handler-fn (on-change id)))}\n                                (when tooltip\n                                  {:on-mouse-over (rc/handler-fn (reset! showing id))\n                                   :on-mouse-out  (rc/handler-fn (swap! showing #(when-not (= id %) %)))})\n                                (get-in parts [:button :attr]))\n                              label]]\n              (if tooltip\n                [rc/popover-tooltip\n                 :src (rc/at)\n                 :label tooltip\n                 :position (or tooltip-position :below-center)\n                 :showing? (r/track #(= id @showing))\n                 :anchor the-button\n                 :class (str \"rc-tabs-tooltip \" (get-in parts [:tooltip :class]))\n                 :style (get-in parts [:tooltip :style])\n                 :attr (get-in parts [:tooltip :attr])]\n                the-button))))))))\n\n\n\n(defn column-multi-picker [data component-id label path]\n  (let [model (u/subscribe-local component-id path)]\n    (fn []\n      (if model\n        (let [headings (apply set (map keys (get @data :data)))\n              btns     (mapv (fn [h] {:id h :label h}) headings)\n              as-set   (set @model)]\n          ;(log/info \"column-multi-picker\" headings \"//\" as-set)\n          [rc/h-box :src (rc/at)\n            :gap \"5px\"\n            :children [[rc/box :src (rc/at) :align :start :child [:code label]]\n                       [multi-bar-tabs\n                        :model (r/atom as-set)\n                        :btns btns]]])\n        (subscription-error label path)))))\n\n\n(defn boolean-config\n  \"lets the user turn on/of some component of the Chart\n\n  ---\n\n  - config : (atom) holds a hash-map of the actual configuration properties see [[config]].\n  - label : (string) tell the user which subcomponent this control is manipulating\n  - path : (vector) path into `config` where the subcomponent 'inclusion' value is stored\n  \"\n  [config label path]\n\n  (let [checked? (u/subscribe-local config path)]\n    (fn []\n      (if checked?\n        [rc/checkbox :src (rc/at)\n         :label (cond\n                  (and (string? label) (empty? label)) \"\"\n                  :else [rc/box :src (rc/at) :align :start :child [:code label]])\n         :model @checked?\n         :on-change #(u/dispatch-local config path %)]\n        (subscription-error label path)))))\n\n\n(defn slider-config\n  ([component-id min max step path]\n\n   ;(log/info \"slider-config\" component-id min max step path)\n\n   (let [model (u/subscribe-local component-id path)]\n     (fn []\n       ;(log/info \"slider-config (model)\" model \"//\" (when model @model))\n\n       (if (and model @model)                               ; needed to cover possible race condition where the subscription initially returns nil\n         [rc/slider :src (rc/at)\n          :model @model\n          :width \"100px\"\n          :min min :max max :step step\n          :on-change #(u/dispatch-local component-id path %)]\n         (subscription-error \"slider\" path)))))\n\n  ([component-id min max path]\n   [slider-config component-id min max 1 path]))\n\n\n(defn text-config [component-id label path]\n  (let [model (u/subscribe-local component-id path)]\n    (fn []\n      (if model\n        [rc/h-box :src (rc/at)\n         :gap \"5px\"\n         :children [[rc/label :src (rc/at) :label label]\n                    [rc/input-text :src (rc/at)\n                     :model (str @model)\n                     :width \"50px\"\n                     :on-change #(u/dispatch-local component-id path %)]]]\n        (subscription-error label path)))))\n\n\n(defn strokeDasharray\n  \"reconstitutes the 2-part string value required by `:strokeDasharray` from the\n  2 values in the [[config]] atom.\n\n  ---\n\n  - dash\n  - space\n  \"\n  [dash & space]\n  (str dash \" \" (first space)))\n\n\n(defn dashArray-config\n  \"provides the user with 2 sliders to control the 2 parts of the `:strokeDasharray`\n  property of a chart's [`CartesianGrid`](https://recharts.org/en-US/api/CartesianGrid)\n\n  ---\n\n  - config : (atom) holds a hash-map of the actual configuration properties see [[config]].\n  - label : (string) tell the user which axis this control is manipulating\n  - min : (integer) minimum value for the slider\n  - max : (integer) maximum value for the slider\n  - path : (vector) path into `config` where the :strokeDasharray is stored\n  \"\n\n  [component-id label min max path]\n  [rc/h-box :src (rc/at)\n   :children [[rc/box :src (rc/at) :align :start :child [:code label]]\n              [rc/v-box :src (rc/at)\n               :gap \"5px\"\n               :children [[slider-config component-id min max (conj path :dash)]\n                          [slider-config component-id min max (conj path :space)]]]]])\n\n\n(defn enumerated-config\n  \"provides a multi-button control for setting a property fro a set of mutually-exclusive options\n\n  ---\n\n  - component-id : (string/keyword) unique ID for this component\n  - btns : (vector) define the button(s) that set the value(s).\n\n  | key       | description                                                          |\n  |:----------|:---------------------------------------------------------------------|\n  | `:id`     | the value to set when the use click the corresponding button control |\n  | `:label`  | the label to put on the button                                       |\n\n\n  - label : (string) tell the user what property is being manipulated\n  - path : (vector) path into `config` for the correct property\n\n  \"\n  [component-id btns label path]\n\n  (let [model (u/subscribe-local component-id path)]\n    (fn []\n      (if model\n        [rc/h-box :src (rc/at)\n         :children [[rc/box :src (rc/at) :align :start :child [:code label]]\n                    [rc/horizontal-bar-tabs\n                     :src (rc/at)\n                     :model @model\n                     :tabs btns\n                     :style btns-style\n                     :on-change #(u/dispatch-local component-id path %)]]]\n        (subscription-error label path)))))\n\n\n(defn orientation-config\n  \"lets the user configure the orientation of an axis. Which axis is defined by the arguments.\n\n  ---\n\n  - component-id : (string/keyword) unique ID for this component\n  - btns : (vector) define the button that set the value(s).\n\n  | key       | description                                                          |\n  |:----------|:---------------------------------------------------------------------|\n  | `:id`     | the value to set when the use click the corresponding button control |\n  | `:label`  | the label to put on the button                                       |\n\n  Each axis support a different set of possible orientations:\n\n  | axis      | allowed orientations   |\n  |:----------|:-----------------------|\n  | X Axis    | `:top`  `:bottom`     |\n  | Y Axis    | `:left`  `:right`     |\n\n  - label : (string) tell the user which axis this control is manipulating\n  - path : (vector) path into `config` where the orientation for the correct axis is stored\n  \"\n  [component-id btns label path]\n\n  (enumerated-config component-id btns label path))\n\n\n(defn scale-config\n  \"lets the user change the scale of an 'axis'. Which axis is defined by the arguments.\n  Supports only:\n\n    `auto`  `linear`  `pow`  `sqrt`  `log`\n\n  scale types. Recharts supports many more. See [here](https://recharts.org/en-US/api/XAxis#scale)\n\n  ---\n\n  - component-id : id for the component.\n  - label : (string) tell the user which axis this control is manipulating\n  - path : (vector) path into `config` where the scale for the correct axis is stored\n  \"\n  [component-id label path]\n  (let [btns [{:id \"auto\" :label \"auto\"}\n              {:id \"linear\" :label \"linear\"}\n              {:id \"pow\" :label \"pow\"}\n              {:id \"sqrt\" :label \"sqrt\"}\n              {:id \"log\" :label \"log\"}]]\n    (enumerated-config component-id btns label path)))\n\n\n(defn layout-config\n  \"lets the user change the layout of a 'legend'.\n  Supports:\n\n    `horizontal`  &  `linear`\n\n  ---\n\n  - component-id : id of the component\n  - path : (vector) path into `config` where the scale for the layout is stored\n  \"\n  [component-id path]\n  (let [btns [{:id \"horizontal\" :label \"horizontal\"}\n              {:id \"vertical\" :label \"vertical\"}]]\n    (enumerated-config component-id btns \":layout\" path)))\n\n\n(defn align-config\n  \"lets the user change the alignment of a 'legend'.\n  Supports:\n\n    `left`  `center`  `right`\n\n  ---\n\n  - component-id : id of the component\n  - path : (vector) path into `config` where the scale for the layout is stored\n  \"\n  [component-id path]\n  (let [btns [{:id \"left\" :label \"left\"}\n              {:id \"center\" :label \"center\"}\n              {:id \"right\" :label \"right\"}]]\n    (enumerated-config component-id btns \":align\" path)))\n\n\n(defn verticalAlign-config\n  \"lets the user change the vertical alignment of a 'legend'.\n  Supports:\n\n    `top`  `middle`  `bottom`\n\n  ---\n\n  - component-id : id of the component\n  - path : (vector) path into `config` where the scale for the layout is stored\n  \"\n  [component-id path]\n  (let [btns [{:id \"top\" :label \"top\"}\n              {:id \"middle\" :label \"middle\"}\n              {:id \"bottom\" :label \"bottom\"}]]\n    (enumerated-config component-id btns \":verticalAlign\" path)))\n\n\n(defn color-config [config-data label path & [position]]\n  (let [d        (h/resolve-value config-data)\n        showing? (r/atom false)\n        p        (or position :right-center)]\n\n    ;(log/info \"color-config\" label \"//\" config-data \"//\" @d \"//\" path \"//\" @showing?)\n\n    (fn []\n      [rc/popover-anchor-wrapper :src (rc/at)\n       :showing? @showing?\n       :position p\n       :anchor [rc/button :src (rc/at)\n                :label label\n                :style {:background-color (get-in @d path)\n                        :color            (color/best-text-color\n                                            (color/hex->rgba (get-in @d path)))}\n                :on-click #(swap! showing? not)]\n       :popover [rc/popover-content-wrapper :src (rc/at)\n                 :close-button? false\n                 :no-clip? false\n                 :body [:> HexColorPicker {:color     (get-in @d path)\n                                           :on-change #(h/handle-change-path config-data path %)}]]])))\n\n\n(defn color-config-text [component-id label path & [position]]\n  ;(log/info \"color-config-text\" component-id \"//\" label \"//\" path)\n\n  (let [model (u/subscribe-local component-id path)]\n    (fn []\n      (if model\n        [rc/h-box :src (rc/at)\n         :gap \"5px\"\n         :children [[color-config component-id label path position\n                     [rc/input-text :src (rc/at)\n                      :width \"100px\"\n                      :model @model\n                      :on-change #(u/dispatch-local component-id path %)]]]]\n        (subscription-error label path)))))\n\n\n;; endregion\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;\n; HIGH-LEVEL CONFIGURATION 'MOLECULES'\n;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; region\n\n(defn isAnimationActive [component-id]\n  [boolean-config component-id \":isAnimationActive\" [:isAnimationActive]])\n\n\n(defn grid [component-id]\n  [rc/v-box :src (rc/at)\n   :children [[boolean-config component-id \":grid\" [:grid :include]]\n              [dashArray-config component-id\n               \":strokeDasharray\" 1 10 [:grid :strokeDasharray]]\n              [color-config-text component-id \":stroke\" [:grid :stroke]]]])\n\n\n(defn x-axis [data component-id]\n  [rc/v-box :src (rc/at)\n   :children [[boolean-config component-id \":x-axis\" [:x-axis :include]]\n              [column-picker data component-id \":dataKey\" [:x-axis :dataKey]]\n              [orientation-config component-id x-axis-btns \":orientation\" [:x-axis :orientation]]\n              [scale-config component-id \":scale\" [:x-axis :scale]]]])\n\n\n(defn y-axis [data component-id]\n  [rc/v-box :src (rc/at)\n   :children [[boolean-config component-id \":y-axis\" [:y-axis :include]]\n              [column-picker data component-id \":dataKey\" [:y-axis :dataKey]]\n              [orientation-config component-id y-axis-btns \":orientation\" [:y-axis :orientation]]\n              [scale-config component-id \":scale\" [:y-axis :scale]]]])\n\n\n(defn tooltip [component-id]\n  [boolean-config component-id \":tooltip\" [:tooltip :include]])\n\n\n(defn legend [component-id]\n  [rc/v-box :src (rc/at)\n   :children [[boolean-config component-id \":legend\" [:legend :include]]\n              [layout-config component-id [:legend :layout]]\n              [align-config component-id [:legend :align]]\n              [verticalAlign-config component-id [:legend :verticalAlign]]]])\n\n\n(defn option [component-id label path-root]\n  (let [chosen-path (conj path-root :chosen)\n        keys-path   (conj path-root :keys)\n        chosen      (u/subscribe-local component-id chosen-path)\n        keys        (u/subscribe-local component-id keys-path)\n        btns        (->> @keys\n                      (map (fn [k]\n                             {:id k :label k})))]\n\n    ;(log/info \"option\" @keys @chosen btns)\n\n    (fn []\n      [rc/h-box :src (rc/at)\n       :children [[rc/box :src (rc/at) :align :start :child [:code label]]\n                  [rc/horizontal-bar-tabs\n                   :src (rc/at)\n                   :model @chosen\n                   :tabs btns\n                   :style btns-style\n                   :on-change #(u/dispatch-local component-id chosen-path %)]]])))\n\n;; endregion\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;\n; VERY!!! HIGH-LEVEL CONFIGURATION 'MOLECULES'\n;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; region\n\n(defn standard-chart-config [data component-id]\n  [:<>\n   [isAnimationActive component-id]\n   [rc/line :src (rc/at) :size \"2px\"]\n   [grid component-id]\n   [rc/line :src (rc/at) :size \"2px\"]\n   [x-axis data component-id]\n   [rc/line :src (rc/at) :size \"2px\"]\n   [y-axis data component-id]\n   [rc/line :src (rc/at) :size \"2px\"]\n   [tooltip component-id]\n   [rc/line :src (rc/at) :size \"2px\"]\n   [legend component-id]])\n\n\n(defn non-gridded-chart-config [data component-id]\n  [:<>\n   [isAnimationActive component-id]\n   [rc/line :src (rc/at) :size \"2px\"]\n   [tooltip component-id]\n   [rc/line :src (rc/at) :size \"2px\"]\n   [legend component-id]])\n\n\n;; endregion\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;\n; HIGH-LEVEL COMPONENT 'MOLECULES'\n;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; region\n\n\n(defn override [s ui tag]\n  ;(log/info \"override\" s \"///\" ui \"///\" tag)\n  (if (and\n        (seq ui)\n        (not (empty? ui))\n        (contains? (into #{} (keys ui)) tag))\n    (get ui tag)\n    s))\n\n\n(defn chart-grid [component-id ui]\n  (let [grid?       (u/subscribe-local component-id [:grid :include])\n        grid-dash   (u/subscribe-local component-id [:grid :strokeDasharray :dash])\n        grid-space  (u/subscribe-local component-id [:grid :strokeDasharray :space])\n        grid-stroke (u/subscribe-local component-id [:grid :stroke])]\n    (when (override @grid? ui :grid) [:> CartesianGrid {:strokeDasharray (strokeDasharray @grid-dash @grid-space)\n                                                        :stroke          @grid-stroke}])))\n\n\n(defn standard-chart-components [component-id ui]\n\n  ;(log/info \"standard-chart-components\" component-id ui)\n\n  (let [grid?                (u/subscribe-local component-id [:grid :include])\n        grid-dash            (u/subscribe-local component-id [:grid :strokeDasharray :dash])\n        grid-space           (u/subscribe-local component-id [:grid :strokeDasharray :space])\n        grid-stroke          (u/subscribe-local component-id [:grid :stroke])\n\n        x-axis?              (u/subscribe-local component-id [:x-axis :include])\n        x-axis-dataKey       (u/subscribe-local component-id [:x-axis :dataKey])\n        x-axis-orientation   (u/subscribe-local component-id [:x-axis :orientation])\n        x-axis-scale         (u/subscribe-local component-id [:x-axis :scale])\n\n        y-axis?              (u/subscribe-local component-id [:y-axis :include])\n        y-axis-dataKey       (u/subscribe-local component-id [:y-axis :dataKey])\n        y-axis-orientation   (u/subscribe-local component-id [:y-axis :orientation])\n        y-axis-scale         (u/subscribe-local component-id [:y-axis :scale])\n\n        tooltip?             (u/subscribe-local component-id [:tooltip :include])\n\n        legend?              (u/subscribe-local component-id [:legend :include])\n        legend-layout        (u/subscribe-local component-id [:legend :layout])\n        legend-align         (u/subscribe-local component-id [:legend :align])\n        legend-verticalAlign (u/subscribe-local component-id [:legend :verticalAlign])]\n\n    [:<>\n     (when (override @grid? ui :grid) [:> CartesianGrid {:strokeDasharray (strokeDasharray @grid-dash @grid-space)\n                                                         :stroke          @grid-stroke}])\n\n     (when (override @x-axis? ui :x-axis) [:> XAxis {:dataKey     @x-axis-dataKey\n                                                     :orientation @x-axis-orientation\n                                                     :scale       @x-axis-scale}])\n\n     (when (override @y-axis? ui :y-axis) [:> YAxis {:dataKey     @y-axis-dataKey\n                                                     :orientation @y-axis-orientation\n                                                     :scale       @y-axis-scale}])\n\n     (when (override @tooltip? ui :tooltip) [:> Tooltip])\n\n     (when (override @legend? ui :legend) [:> Legend {:layout        @legend-layout\n                                                      :align         @legend-align\n                                                      :verticalAlign @legend-verticalAlign}])]))\n\n\n(defn non-gridded-chart-components [component-id ui]\n  (let [tooltip?             (u/subscribe-local component-id [:tooltip :include])\n        legend?              (u/subscribe-local component-id [:legend :include])\n        legend-layout        (u/subscribe-local component-id [:legend :layout])\n        legend-align         (u/subscribe-local component-id [:legend :align])\n        legend-verticalAlign (u/subscribe-local component-id [:legend :verticalAlign])]\n\n    ;(log/info \"non-gridded-chart-components\" component-id ui)\n\n    [:<>\n     (when (override @tooltip? ui :tooltip) [:> Tooltip])\n\n     (when (override @legend? ui :legend) [:> Legend {:layout        @legend-layout\n                                                      :align         @legend-align\n                                                      :verticalAlign @legend-verticalAlign}])]))\n\n;; endregion\n\n\n; workout the override logic for chart elements like grid, legend, etc.\n(comment\n  (def ui {:tooltip false})\n  (def ui nil)\n  (def ui \"\")\n  (def ui {:grid false, :x-axis false, :y-axis false, :legend false, :tooltip false})\n  (def tag :tooltip)\n  (def tag :grid)\n  (def tooltip? (r/atom true))\n  (def grid? (r/atom true))\n  (def s @tooltip?)\n  (def s @grid?)\n\n  (first ui)\n\n  (if (and (seq ui) (not (empty? (first ui)))) true false)\n\n\n  (if (and\n        (seq ui)\n        (not (empty? ui))\n        (contains? (into #{} (keys ui)) tag))\n    (get ui tag)\n    s)\n\n\n  (if nil true false)\n  (or true nil)\n\n  (override @tooltip? ui :tooltip)\n  (override @grid? ui :grid)\n\n  ())\n"]}