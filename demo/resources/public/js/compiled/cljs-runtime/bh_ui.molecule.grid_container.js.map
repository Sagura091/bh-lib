{"version":3,"sources":["bh_ui/molecule/grid_container.cljs"],"mappings":"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","names":["taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","bh-ui.molecule.grid-container/config","full-config","p__61079","vec__61080","cljs.core.nth","p1__61077#","bh-ui.molecule.grid-container/wrap-component","id","component","label","or__4253__auto__","cljs.core/name","bh-ui.molecule.grid-container/on-width-update","width","margin","cols","padding","bh-ui.molecule.grid-container/on-layout-change","component-id","new-layout","all-layouts","new-layout*","cljs.core.js__GT_clj","all-layouts*","fst","cljs.core/first","cljs.core/empty?","cljs.core/count","cljs.core.not_EQ_","cooked","p1__61087#","cljs.core.map","cljs.core/zipmap","cljs.core.juxt","bh-ui.utils.locals/dispatch-local","bh-ui.molecule.grid-container/toggle-editable","orig-value","p1__61092#","cljs.core.assoc","cljs.core/not","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","bh-ui.molecule.grid-container/component-panel","p__61102","map__61103","cljs.core/--destructure-map","cljs.core.get","seq61101","self__4852__auto__","cljs.core/seq","configuration","resizable","params","layout","bh-ui.utils.locals/subscribe-local","component-lookup","cljs.core.into","cljs.core/deref","bh-ui.molecule.composite.util.signals/process-components","re_frame.core.subscribe","composed-ui","open?","reagent.core.atom","p1__61095#","p2__61096#","p1__61097#","p2__61098#","p3__61099#","p4__61100#","re-com.core/v-box","js/goog.DEBUG","bh-ui.atom.re-com.configure-toggle/configure-toggle","bh-ui.utils.locals/apply-local","bh-ui.atom.layout.responsive-grid/grid","bh-ui.molecule.grid-container/component","p__61109","map__61110","seq61107","data","container-id","tools","graph","cljs.core.apply","loom.graph/digraph","bh-ui.molecule.composite.util.ui/compute-edges","comp-or-dag?","partial-config","bh-ui.molecule.composite.util.digraph/denorm-components","loom.graph/nodes","cljs.core/keys","cljs.core/set","loom.graph/edges","cljs.core/reset!","bh-ui.utils/init-container-locals","bh-ui.utils/dispatch-local","bh-ui.molecule.composite.util.ui/prep-environment","buttons","p1__61106#","re-com.core/h-box","re-com.core/horizontal-bar-tabs","pred__61112","expr__61113","js/Error","cljs.core/=","bh-ui.molecule.composite/dag-panel","bh-ui.molecule.composite/definition-panel","re-com.core/alert-box"],"sourcesContent":["(ns bh-ui.molecule.grid-container\n  (:require [bh-ui.atom.layout.responsive-grid :as grid]\n            [bh-ui.molecule.composite :as composite]\n            [bh-ui.molecule.composite.util.digraph :as dig]\n            [bh-ui.molecule.composite.util.signals :as sig]\n            [bh-ui.molecule.composite.util.ui :as ui]\n            [bh-ui.utils :as ui-utils]\n            [bh-ui.utils.locals :as locals]\n            [bh-ui.atom.re-com.configure-toggle :as ct]\n            [loom.graph :as lg]\n            [re-com.core :as rc]\n            [re-frame.core :as re-frame]\n            [reagent.core :as r]\n            [taoensso.timbre :as log]))\n\n\n(log/info \"bh-ui.molecule.grid-container\")\n\n\n(defn- config\n  \"set up the local config keys, specifically we want the :layout key, so we can\n  track updates to the layout should the user drag/resize any of the internal\n  components.\n\n  the component-panel will subscribe to this 'local' using (locals/subscribe-local ...) and\n  dispatch updates (via on-layout-update) using (locals/dispatch-local ...)\n  \"\n  [full-config]\n  {:blackboard {:defs {:source full-config\n                       :dag    {:open-details \"\"}}}\n   :container  \"\"\n   :layout     (:grid-layout full-config)})\n\n\n(defn- wrap-component [[id component label]]\n\n  ;(log/info \"wrap-component\" id \"//\" label \"//\" component)\n\n  [:div.widget-parent {:key id}\n   [:div.grid-toolbar.title-wrapper.move-cursor\n    {:style {:height \"1.5em\"}}\n    (or label (name id))]\n   [:div.widget.widget-content\n    {:style         {:width       \"100%\"\n                     :height      \"90%\"\n                     :cursor      :default\n                     :align-items :stretch\n                     :display     :flex}\n     :on-mouse-down #(.stopPropagation %)}\n    component]])\n\n\n(defn- on-width-update\n  \"\n  ---\n\n  - width : (number) new width of the container\n  - margin : (vector) margin [left? right?]\n  - cols : (number) number of columns\n  - padding : (vector) padding [left? right?]\n  \"\n  [width margin cols padding]\n\n  ;(log/info \"on-width-update\" width \"//\" margin \"//\" cols \"//\" padding)\n\n  ())\n\n\n(defn- on-layout-change [component-id new-layout all-layouts]\n  (let [new-layout*  (js->clj new-layout :keywordize-keys true)\n        all-layouts* (js->clj all-layouts :keywordize-keys true)\n        fst          (first new-layout*)]\n\n    ;(log/info \"on-layout-change\" new-layout*\n    ;  \"//\" all-layouts*\n    ;  \"//\" (keys all-layouts*))\n\n    (when (and\n            (not (empty? new-layout*))\n            (<= 1 (count new-layout*))\n            (not= (:i fst) \"null\"))\n      (let [cooked (map #(zipmap '(:i :x :y :w :h :static) %)\n                     (map (juxt :i :x :y :w :h :static) new-layout*))]\n        ;(log/info \"on-layout-change (cooked)\" cooked)\n        (locals/dispatch-local component-id [:layout] cooked)))))\n\n\n(defn- toggle-editable [orig-value]\n  (map #(assoc % :static (-> % :static not)) orig-value))\n\n\n(defn- component-panel [& {:keys [configuration component-id resizable] :as params}]\n  ;(log/info \"component-panel (params)\" params)\n\n  ;(log/info \"component-panel\" component-id\n  ;  \"//\" (keys configuration)\n  ;  \"// dummy-layout\" dummy-layout\n  ;  \"// :components\" (:components configuration)\n  ;  \"// process-components\" (into {}\n  ;                            (sig/process-components\n  ;                              configuration :ui/component\n  ;                              @(re-frame/subscribe [:meta-data-registry]) component-id)))\n\n  (let [layout              (locals/subscribe-local component-id [:layout])\n        component-lookup    (into {}\n                              (sig/process-components\n                                configuration :ui/component\n                                @(re-frame/subscribe [:meta-data-registry]) component-id))\n\n        ; 1. build UI components (with subscription/event signals against the blackboard or remotes)\n        composed-ui         (map wrap-component component-lookup)\n        open?               (r/atom false)]\n\n    (fn []\n      ;(log/info \"component-panel INNER\" component-id\n      ;  \"//\" @layout\n      ;  \"//\" composed-ui)\n\n      ; 5. return the composed component layout!\n      [rc/v-box :src (rc/at)\n       :gap \"2px\"\n       :children [(when resizable [ct/configure-toggle open? #(locals/apply-local component-id\n                                                                [:layout] toggle-editable)])\n                  [:div.grid-container {:style {:width \"100%\" :height \"100%\"}}\n                   [grid/grid\n                    :id component-id\n                    :class \"layout\"\n                    :children composed-ui\n                    :layout @layout\n                    :cols 20\n                    :width 1200\n                    :rowHeight 25\n                    :layoutFn #(on-layout-change component-id %1 %2)\n                    :widthFn #(on-width-update %1 %2 %3 %4)]]]])))\n\n\n(defn component [& {:keys [data component-id container-id resizable tools] :as params}]\n\n  ;(log/info \"component\" data \"//\" component-id \"//\" container-id)\n  ;(log/info \"component (params)\" params)\n\n  (let [id            (r/atom nil)\n        configuration @data\n        graph         (apply lg/digraph (ui/compute-edges configuration))\n        comp-or-dag?  (r/atom :component)\n        partial-config   (assoc configuration\n                           :denorm (dig/denorm-components graph (:links configuration) (lg/nodes graph))\n                           :nodes (-> configuration\n                                    :components\n                                    keys\n                                    set)\n                           :edges (into [] (lg/edges graph)))\n        full-config (assoc partial-config :graph graph)]\n\n    (fn []\n      (when (nil? @id)\n        (reset! id component-id)\n        (ui-utils/init-container-locals @id (config partial-config))\n        (ui-utils/dispatch-local @id [:container] container-id)\n        (ui/prep-environment partial-config @id @(re-frame/subscribe [:meta-data-registry])))\n\n      (let [buttons [{:id :component :tooltip \"Widget view\" :label [:i {:class \"zmdi zmdi-view-compact\"}]}\n                     {:id :dag :tooltip \"Event model view\" :label [:i {:class \"zmdi zmdi-share\"}]}\n                     {:id :definition :tooltip \"Text view\"  :label [:i {:class \"zmdi zmdi-format-subject\"}]}]]\n\n        [:div.box {:style {:width \"100%\" :height \"100%\" :background \"#faeee8\"}}\n         [rc/v-box :src (rc/at)\n          ;:justify :start\n          :width \"100%\"\n          :height \"100%\"\n          :gap \"5px\"\n          :children [(when tools [rc/h-box :src (rc/at)\n                                  :justify :end\n                                  :children [[rc/horizontal-bar-tabs\n                                              :model comp-or-dag?\n                                              :tabs buttons\n                                              :on-change #(reset! comp-or-dag? %)]]])\n                     (condp = @comp-or-dag?\n                       :dag [composite/dag-panel\n                             :configuration full-config\n                             :component-id @id\n                             :container-id container-id]\n                       :component [component-panel\n                                   :configuration full-config\n                                   :component-id @id\n                                   :container-id container-id\n                                   :resizable resizable]\n                       :definition [composite/definition-panel\n                                    :configuration configuration]\n                       :default [rc/alert-box :src (rc/at)\n                                 :alert-type :warning\n                                 :body \"There is a problem with this component.\"])]]]))))\n\n\n\n\n(comment\n  (def component-id :widget-grid-demo.grid-widget)\n\n\n  (locals/subscribe-local component-id [:layout])\n  (locals/apply-local component-id [:layout] toggle-editable)\n\n\n  (def orig-value @(re-frame/subscribe [:widget-grid-demo.grid-widget.layout]))\n  (toggle-editable orig-value)\n\n\n  ())\n\n\n(comment\n  (def component-id :widget-grid-demo.grid-widget)\n  (def layout (r/atom [{:id 1 :static true}]))\n  (def make-editable-style {:md-icon-name \"zmdi-wrench\"\n                            :tooltip      \"configure this chart\"})\n  (def save-editable-style {:md-icon-name \"zmdi-lock-outline\"\n                            :tooltip      \"Save the configuration\"})\n\n  (reduce conj [rc/md-icon-button] (flatten (seq {:class \"button\"})))\n\n  (reduce conj [rc/md-icon-button]\n    (flatten\n      (seq\n        (merge {:class    \"button\"\n                :on-click #(locals/apply-local component-id [:layout] toggle-editable)}\n          (if (-> @layout first :static) make-editable-style save-editable-style)))))\n\n  ())\n\n"]}