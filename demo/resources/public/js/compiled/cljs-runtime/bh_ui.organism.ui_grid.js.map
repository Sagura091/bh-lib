{"version":3,"sources":["bh_ui/organism/ui_grid.cljs"],"mappings":"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","names":["taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","p__61262","vec__61263","cljs.core.nth","p1__61261#","bh-ui.organism.ui-grid/make-widget","id","title","content","bk-color","txt-color","bh-ui.organism.ui-grid/update-layout-sub","layout","updated-layout","bh-ui.utils.helpers/handle-change-path","bh-ui.organism.ui-grid/update-layout-ratom","cljs.core/reset!","bh-ui.organism.ui-grid/update-layout","cljs.core/Keyword","cljs.core/coll?","cljs.core/seq","cljs.core/every?","cljs.core/keyword?","reagent.ratom/RAtom","cljs.core/Atom","bh-ui.organism.ui-grid/on-layout-change","new-layout","n-l","cljs.core.js__GT_clj","fst","cljs.core/first","cljs.core/count","cljs.core.not_EQ_","cooked","p1__61266#","cljs.core.map","cljs.core/zipmap","cljs.core.juxt","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","bh-ui.organism.ui-grid/component","p__61268","map__61269","cljs.core/--destructure-map","cljs.core.get","seq61267","self__4852__auto__","widgets","container-id","r-widgets","bh-ui.utils.helpers/resolve-value","r-layout","cljs.core/deref","bh-ui.atom.layout.responsive-grid/grid","cljs.core.doall","cljs.core.partial"],"sourcesContent":["(ns bh-ui.organism.ui-grid\n  (:require [bh-ui.atom.layout.responsive-grid :as grid]\n            [bh-ui.utils.helpers :as h]\n            [reagent.ratom]\n            [taoensso.timbre :as log]))\n\n\n(log/info \"bh-ui.organism.ui-grid\")\n\n\n(defn- make-widget [[id title content bk-color txt-color]]\n  ;(log/info \"make-widget\" id \"//\" title)\n\n  [:div.widget-parent {:key   id\n                       :style {:width \"100%\" :height \"100%\"}}\n   [:div.grid-toolbar.title-wrapper.move-cursor\n    [:div {:style {:background-color bk-color\n                   :color            txt-color\n                   :padding          \"5px\"\n                   :font-weight      :bold\n                   :font-size        \"1.1em\"}}\n     title]]\n   [:div.widget.widget-content\n    {:style         {:width       \"100%\"\n                     :height      \"90%\"\n                     :cursor      :default\n                     :align-items :stretch\n                     :display     :flex}\n     :on-mouse-down #(.stopPropagation %)}\n    content]])\n\n\n(defn- update-layout-sub [layout updated-layout]\n  ;(log/info \"update-layout-sub\" layout \"//\" updated-layout)\n  (h/handle-change-path layout [] updated-layout))\n\n\n(defn- update-layout-ratom [layout updated-layout]\n  ;(log/info \"update-layout-ratom\" layout \"//\" updated-layout)\n  (reset! layout updated-layout))\n\n\n(defn- update-layout [layout updated-layout]\n  ;(log/info \"update-layout\" layout \"//\" updated-layout)\n  ;\n  ;(log/info \"update-layout\" (keyword? layout)\n  ;  \"//\" (coll? layout)\n  ;  \"//\" (seq layout)\n  ;  \"//\" (every? keyword? layout)\n  ;  \"////\" (instance? reagent.ratom.RAtom layout)\n  ;  \"//\" (instance? Atom layout))\n\n  (cond\n    (keyword? layout) (update-layout-sub layout updated-layout)\n\n    (and (coll? layout)\n      (seq layout)\n      (every? keyword? layout)) (update-layout-sub layout updated-layout)\n\n    (or (instance? reagent.ratom.RAtom layout)\n      ;(instance? reagent.ratom.Reaction layout)\n      (instance? Atom layout)) (update-layout-ratom layout updated-layout)\n\n    :else ()))\n\n\n(defn on-layout-change [layout new-layout]\n  ;; note the need to convert the callbacks from js objects\n  (let [n-l (js->clj new-layout :keywordize-keys true)\n        fst (first n-l)]\n\n    ;(log/info \"on-layout-change\" @widgets \"//\" new-layout)\n\n    (when (and\n            (seq n-l)\n            (<= 1 (count n-l))\n            (not= (:i fst) \"null\"))\n      (let [cooked (map #(zipmap '(:i :x :y :w :h) %)\n                     (map (juxt :i :x :y :w :h) n-l))]\n        ;(log/info \"on-layout-change (cooked)\" cooked\n        ;  \"//\" (zipmap (map :i cooked) cooked))\n        (update-layout layout cooked)))))\n\n\n(defn component [& {:keys [widgets layout container-id]}]\n\n  (let [r-widgets (h/resolve-value widgets)\n        r-layout  (h/resolve-value layout)]\n\n    ;(log/info \"component (resolve)\" container-id\n    ;  \"//\" @r-widgets\n    ;  \"//\" @r-layout)\n\n    (fn []\n      [grid/grid\n       :id container-id\n       :children (doall (map make-widget @r-widgets))\n       :cols 20\n       :layoutFn (partial on-layout-change layout)\n       :layout @r-layout])))"]}