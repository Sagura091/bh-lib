{"version":3,"sources":["bh_ui/molecule/composite/util/digraph.cljs"],"mappings":"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","names":["bh-ui.molecule.composite.util.digraph/expand-components","data","registry","components","cljs.core.map","p__60989","vec__60990","cljs.core.nth","id","meta-data","cljs.core.assoc","pred__60993","expr__60994","js/Error","cljs.core/=","G__60998","bh-ui.molecule.composite.util.digraph/get-predecessor-name","links","graph","source","target","cljs.core.filter","p__61002","vec__61003","s","_","cljs.core/contains?","loom.graph/predecessors*","cljs.core._EQ_","cljs.core/vals","cljs.core/first","cljs.core/keys","bh-ui.molecule.composite.util.digraph/get-successor-name","p__61010","vec__61012","loom.graph/successors*","bh-ui.molecule.composite.util.digraph/get-inputs","node","p","cljs.core.apply","cljs.core/merge","p__61016","vec__61018","source-port","targets","target-port","cljs.core.get","cljs.core.into","bh-ui.molecule.composite.util.digraph/get-outputs","p__61026","vec__61029","node-port","target-meta","p__61035","vec__61036","bh-ui.molecule.composite.util.digraph/denorm-components","nodes"],"sourcesContent":["(ns bh-ui.molecule.composite.util.digraph\n  \"Expand on the configuration, computing denormalized data, the Loom digraph, etc.\"\n  (:require [day8.re-frame.tracing :refer-macros [fn-traced]]\n            [loom.graph :as lg]\n            [\"dagre\" :as dagre]\n            [\"graphlib\" :as graphlib]\n            [\"react-flow-renderer\" :refer (ReactFlowProvider Controls Handle Background) :default ReactFlow]))\n\n\n(defn expand-components [data registry]\n  (let [components (:components data)]\n    (->> data\n      :components\n      (map (fn [[id meta-data]]\n             {id (assoc meta-data\n                   :ports\n                   (condp = (:type meta-data)\n                     :ui/component (->> components id :name registry :ports)\n                     :source/remote {:port/pub-sub :data}\n                     :source/local {:port/pub-sub :data}\n                     :source/fn (:ports meta-data)))}))\n      (assoc data :components))))\n\n\n(defn get-predecessor-name [links graph source target]\n  ;(log/info \"pred\" source target \"//\" graph)\n  (->> links\n    (filter (fn [[s _]]\n              (and (contains? (lg/predecessors* graph source) s)\n                (= s target))))\n    vals\n    first\n    keys\n    first))\n\n\n(defn get-successor-name [links graph source target]\n  (->> links\n    source\n    (filter (fn [[s _]]\n              (contains? (lg/successors* graph source) target)))\n    vals\n    first\n    vals\n    first))\n\n\n(defn get-inputs\n  \"get all the inputs to the given node (these are 'predecessors')\n\n  we grab the node's predecessors, and format the data correctly:\n\n  {<source> [<node's-port> <source's-port>]\n   <source> [<node's-port> <source's-port>]}\n\n\n  WORK-IN-PROGRESS\n  \"\n  [links graph node]\n  (->> node\n    (lg/predecessors* graph)\n    (map (fn [p]\n           ; 1. grab the target meta-data for each source\n           (apply merge\n             (map (fn [[source-port targets]]\n                    (let [target-port (get targets node)]\n                      {p [source-port target-port]}))\n               (get links p)))))\n    (into {})))\n\n\n(defn get-outputs [links node]\n  \"get all the outputs of the given node\n\n  these are given directly by the links, but need reformatting from:\n\n  {<source's-port {<target> <target's-port>\n                   <target> <target's-port>}}\n\n  to:\n\n  {<target> [<node's-port> <target's-port>]\n   <target> [<node's-port> <target's-port>]}\n\n\n  WORK-IN-PROGRESS\n  \"\n  (->> links\n    node\n    (map (fn [[node-port target-meta]]\n           (apply merge\n             (map (fn [[target target-port]]\n                    {target [node-port target-port]})\n               target-meta))))\n    (apply merge)))\n\n\n(defn denorm-components\n  \"denormalize the links between components by mixing in additional information bout the\n  ports at both ends of the inter-connection:\n\n  {<node> {:inputs  {<source> [<node's-port> <source's-port>]\n                     <source> [<node's-port> <source's-port>]}\n           :outputs {<target> [<node's-port> <target's-port>]\n                     <target> [<node's-port> <target's-port>]}\n           :params  {<source> [<node's-port> <source's-port>]\n                     <source> [<node's-port> <source's-port>]\n                     <target> [<node's-port> <target's-port>]\n                     <target> [<node's-port> <target's-port>]}}\n\n  WORK-IN-PROGRESS\n  \"\n  [graph links nodes]\n  (->> nodes\n    (map (fn [node]\n           {node\n            {:inputs  (get-inputs links graph node)\n             :outputs (get-outputs links node)\n             :params  {}}}))\n    (into {})))\n\n"]}