{"version":3,"sources":["bh_ui/molecule/composite/coverage_plan/support.cljs"],"mappings":"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","names":["taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","bh-ui.molecule.composite.coverage-plan.support/sensor-color-pallet","bh-ui.molecule.composite.coverage-plan.support/num-rows","bh-ui.molecule.composite.coverage-plan.support/num-cols","bh-ui.molecule.composite.coverage-plan.support/row-size","bh-ui.molecule.composite.coverage-plan.support/col-size","bh-ui.molecule.composite.coverage-plan.support/cell-radius","p__59947","vec__59948","cljs.core.nth","bh-ui.molecule.composite.coverage-plan.support/get-cell-lat","row","_","bh-ui.molecule.composite.coverage-plan.support/get-cell-lat-center","cell","p__59952","vec__59953","bh-ui.molecule.composite.coverage-plan.support/get-cell-lon","col","bh-ui.molecule.composite.coverage-plan.support/get-cell-lon-center","bh-ui.molecule.composite.coverage-plan.support/cell-boundaries","cljs.core.into","cljs.core/sorted-map-by","cljs.core/<","iter__4652__auto__","s__59957","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","xs__6308__auto__","cljs.core/first","iterys__4648__auto__","s__59959","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__59961","cljs.core/chunk-buffer","i__59960","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__59958","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__4649__auto__","cljs.core.concat","iter__59956","cljs.core.range","bh-ui.molecule.composite.coverage-plan.support/cell-centers","s__59974","s__59976","b__59978","i__59977","iter__59975","iter__59973","bh-ui.molecule.composite.coverage-plan.support/boundary-locations","cljs.core.get","p__59990","map__59991","cljs.core/--destructure-map","bh-ui.molecule.composite.coverage-plan.support/make-coverage-shape","coverage","time","color","params","vec__59992","vec__59995","fill","r","g","b","a","outline","ret","clojure.string.join","p__59998","vec__60002","bh-ui.molecule.composite.coverage-plan.support/make-target-shape","target-id","ti","vec__60005","vec__60008","c","js/bh-ui","js/bh-ui.molecule","js/bh-ui.molecule.composite","js/bh-ui.molecule.composite.coverage-plan","js/bh-ui.molecule.composite.coverage-plan.support","js/bh-ui.molecule.composite.coverage-plan.support.make-image-shape","method-table__4747__auto__","cljs.core.atom","prefer-table__4748__auto__","method-cache__4749__auto__","cached-hierarchy__4750__auto__","hierarchy__4751__auto__","fexpr__60013","cljs.core/MultiFn","cljs.core.symbol","bh-ui.molecule.composite.coverage-plan.support/make-image-shape","p__60014","map__60015","points","selected-imagery","cljs.core.map","p__60016","map__60017","id","point","vec__60018","lat","lon","bh-ui.utils.bounding-box/make-bounding-box","p__60021","map__60022","name","bounding_box","url","p__60026","map__60027","bh-ui.molecule.composite.coverage-plan.support/make-imagery-shape","bh-ui.molecule.composite.coverage-plan.support/cook-coverages","satellites","selected-satellites","coverages","current-time","p1__60029#","cljs.core.filter","cljs.core._EQ_","cljs.core.mapcat","p__60032","map__60033","computed_at","all","x","cljs.core/contains?","cljs.core.get_in","cvg","platform","sensor","satellite","p1__60031#","cljs.core.assoc","bh-ui.molecule.composite.coverage-plan.support/cook-targets","targets","selected-targets","p__60047","map__60048","cells","p__60054","vec__60055","ty","p__60043","vec__60044","p__60037","vec__60038","bh-ui.molecule.composite.coverage-plan.support/cook-imagery","imagery","m","cljs.core/chunk-first"],"sourcesContent":["(ns bh-ui.molecule.composite.coverage-plan.support\n  (:require [taoensso.timbre :as log]\n            [bh-ui.atom.worldwind.globe.sector :as sector]\n            [bh-ui.utils.bounding-box :as bound]\n            [bh-ui.utils.helpers :as h]))\n\n\n(log/info \"bh-ui.molecule.composite.coverage-plan.support\")\n\n\n(def sensor-color-pallet [[:yellow \"rgba(255, 255, 0, 0.3)\" [255, 255, 0, 0.3] [1.0 1.0 0.0 0.2] \"#FFFF00\"]\n                          [:cyan \"rgba(0, 255, 255, 0.3)\" [0, 255, 255, 0.3] [0.0 1.0 1.0 0.3] \"#00FFFF\"]\n                          [:blue \"rgba(0, 0, 255, 0.3)\" [0, 0, 255, 0.3] [0.0 0. 1.0 0.1] \"#0000FF\"]\n                          [:orange \"rgba(255, 165, 0, 0.3)\" [255, 165, 0, 0.3] [1.0 0.65 0.0 0.3] \"#FFA500\"]\n                          [:grey \"rgba(128, 128, 128, 0.3)\" [128, 128, 128, 0.3] [0.5 0.5 0.5 0.3] \"#808080\"]\n                          [:cornflowerblue \"rgba(100, 149, 237, 0.3)\" [100, 149, 237, 0.3] [0.4 0.58 0.93 0.3] \"#6495ED\"]\n                          [:darkcyan \"rgba(0, 139, 139, 0.3)\" [0, 139, 139, 0.3] [0.0 0.55 0.55 0.3] \"#008B8B\"]\n                          [:goldenrod \"rgba(218, 165, 32, 0.3)\" [218, 165, 32, 0.3] [0.84 0.65 0.13 0.3] \"#DAA520\"]\n                          [:khaki \"rgba(240, 230, 140, 0.3)\" [240, 230, 140, 0.3] [0.94 0.90 0.55 0.3] \"#F0E68C\"]\n                          [:deepskyblue \"rgba(0, 191, 255, 0.3)\" [0, 191, 255, 0.3] [1.0 0.0 1.0 0.3] \"#00BFFF\"]\n                          [:darkseagreen \"rgba(143, 188, 143, 0.3)\" [143, 188, 143, 0.3] [0.55 0.74 0.56 0.3] \"#8FBC8F\"]\n                          [:darkviolet \"rgba(148, 0, 211, 0.3)\" [148, 0, 211, 0.3] [0.58 0 0.83 0.3] \"#9400D3\"]\n                          [:forestgreen \"rgba(34, 139, 34, 0.3)\" [34, 139, 34, 0.3] [0.13 0.55 0.13 0.3] \"#228B22\"]\n                          [:orchid \"rgba(218, 112, 214, 0.3)\" [218, 112, 214, 0.3] [0.84 0.44 0.84 0.3] \"#DA70D6\"]\n                          [:plum \"rgba(221, 160, 221, 0.3)\" [221, 160, 221, 0.3] [0.87 0.63 0.87 0.3] \"#DDA0DD\"]\n                          [:tomato \"rgba(255, 99, 71, 0.3)\" [255, 99, 71, 0.3] [1.0 0.39 0.28 0.3] \"#FF6347\"]\n                          [:green \"rgba(0, 128, 0, 0.3)\" [0, 128, 0, 0.3] [0.0 0.5 0.0 0.2] \"#008000\"]\n                          [:orangered \"rgba(255, 69, 0, 0.3)\" [255, 69, 0, 0.3] [1.0 0.27 0.0 0.3] \"#FF4500\"]\n                          [:navy \"rgba(0, 0, 128, 0.3)\" [0, 0, 128, 0.3] [0.0 0.0 0.5 0.3] \"#000080\"]\n                          [:darkred \"rgba(139, 0, 0, 0.3)\" [139, 0, 0, 0.3] [0.55 0.0 0.0 0.3] \"#8B0000\"]])\n\n(def num-rows 36)\n(def num-cols 72)\n\n(def row-size 5.0)\n(def col-size 5.0)\n(def cell-radius 150000)\n\n(defn- get-cell-lat [[row _]]\n  (- 90 (* row-size row)))\n\n\n(defn- get-cell-lat-center [cell]\n  (- (get-cell-lat cell) (/ row-size 2)))\n\n\n(defn- get-cell-lon [[_ col]]\n  (* col-size col))\n\n\n(defn- get-cell-lon-center [cell]\n  (+ (get-cell-lon cell) (/ col-size 2)))\n\n\n; pre-gen all the cell boundaries as [lat lon] pairs, and group together for\n; a complete \"polygon\":\n;\n;       (1)          (2)\n; (5)  [0 0] -----> [0 1]\n;        ^            |\n;        |            v\n;      [1 0] -----> [1 1]\n;       (4)          (3)\n;\n(def cell-boundaries\n  (into (sorted-map-by <)\n    (into {}\n      (for [row (range num-rows)\n            col (range num-cols)]\n        {[row col] [[(get-cell-lat [row col]) (get-cell-lon [row col])]\n                    [(get-cell-lat [row (inc col)]) (get-cell-lon [row (inc col)])]\n                    [(get-cell-lat [(inc row) (inc col)]) (get-cell-lon [(inc row) (inc col)])]\n                    [(get-cell-lat [(inc row) col]) (get-cell-lon [(inc row) col])]\n                    [(get-cell-lat [row col]) (get-cell-lon [row col])]]}))))\n\n\n(def cell-centers\n  (into (sorted-map-by <)\n    (into {}\n      (for [row (range num-rows)\n            col (range num-cols)]\n        {[row col] [(get-cell-lat-center [row col])\n                    (get-cell-lon-center [row col])]}))))\n\n\n(defn boundary-locations [cell]\n  (get cell-boundaries cell))\n\n\n(defn make-coverage-shape [{:keys [cell coverage time color] :as params}]\n  ;(log/info \"make-coverage-shape\" cell coverage \"//\" color \"//\" (keys params))\n  (let [[_ _ _ fill _] color\n        [r g b a] fill\n        outline [r g b (+ a 0.3)]\n        ret     {:shape         :shape/polygon\n                 :id            (clojure.string/join \"-\"\n                                  [(:sensor coverage)\n                                   time\n                                   (str cell) r g b a])\n                 :locations     (boundary-locations cell)\n                 :width         2\n                 :fill-color    fill\n                 :outline-color outline\n                 :z             500}]\n    ;(log/info \"make-coverage-shape (ret)\" ret)\n    ret))\n\n\n\n(defn make-target-shape [[target-id row col ti color]]\n  ;(log/info \"make-target-shape\" target-id color)\n  (let [[_ _ _ c _] color\n        [r g b _] c\n        fill    [r g b 0.9]\n        outline [r g b 1.0]]\n    {:shape         :shape/circle\n     :id            (clojure.string/join \"-\"\n                      [target-id ti row col r g b])\n     :location      (get cell-centers [row col])\n     :radius        cell-radius\n     :width         2\n     :fill-color    fill\n     :outline-color outline}))\n\n\n(defmulti make-image-shape :type)\n\n\n(defmethod make-image-shape :default [_]\n  [:div])\n\n\n(defmethod make-image-shape :points [{:keys [points] :as selected-imagery}]\n  ;(log/info \"make-image-shape :points\" points)\n\n  (map (fn [{:keys [id point]}]\n         (let [[lat lon _] point]\n           {:shape        :shape/image\n            :id           id\n            :url          \"images/lightning/Lightning3png.png\"\n            :bounding-box (bound/make-bounding-box lat lon 0.5)\n            :z            100}))\n    points))\n\n\n(defmethod make-image-shape :meso-image [{:keys [name bounding_box url] :as selected-imagery}]\n  ;(log/info \"make-image-shape :meso-image\" selected-imagery)\n\n  [{:shape        :shape/image\n    :id           name\n    :url          (str \"cache/\" url)\n    :bounding-box bounding_box\n    :z            50}])\n\n\n(defmethod make-image-shape :fd-image [{:keys [name bounding_box url] :as selected-imagery}]\n  ;(log/info \"make-image-shape :fd-image\" selected-imagery)\n\n  [{:shape        :shape/image\n    :id           name\n    :url          (str \"cache/\" url)\n    :bounding-box bounding_box\n    :z            30}])\n\n\n(defn make-imagery-shape [selected-imagery]\n  ;(log/info \"make-imagery-shape\" selected-imagery)\n  (let [ret (make-image-shape selected-imagery)]\n    ;(log/info \"make-imagery-shape (ret)\" ret)\n    ret))\n\n\n(defn cook-coverages [satellites selected-satellites coverages current-time]\n  ;(log/info \"cook-coverages\" satellites\n  ;  \"//\" coverages\n  ;  \"//\" current-time)\n\n  (let [ret (->> coverages\n              :data\n              (filter #(= (:time %) current-time))\n              (mapcat (fn [{:keys [coverage time cell computed_at color] :as all}]\n                        (map (fn [c] {:time time :coverage c :cell cell :computed_at computed_at})\n                          coverage)))\n              (filter (fn [x]\n                        (contains? selected-satellites\n                          (get-in x [:coverage :sensor]))))\n              (map (fn [cvg]\n                     (let [platform  (get-in cvg [:coverage :platform])\n                           sensor    (get-in cvg [:coverage :sensor])\n                           satellite (first (filter #(and (= platform (:platform_id %))\n                                                       (= sensor (:sensor_id %)))\n                                              satellites))]\n                       (assoc cvg :color (:color satellite))))))]\n\n    ;(log/info \"cook-coverages (ret)\" ret)\n    ret))\n\n\n(defn cook-targets [targets selected-targets current-time]\n  ;(log/info \"cook-targets\" targets \"//\" selected-targets \"//\" current-time)\n  (let [ret (->> targets\n              seq\n              (mapcat (fn [{:keys [name cells color]}]\n                        (map (fn [[r c ty ti]]\n                               [name r c ti color])\n                          cells)))\n              (filter (fn [[id _ _ _ _]] (contains? selected-targets id)))\n              (filter (fn [[_ _ _ ti _]] (= ti current-time))))]\n    ;(log/info \"cook-targets (ret)\" ret)\n    ret))\n\n\n(defn cook-imagery [imagery selected-imagery]\n  ;(log/info \"cook-imagery\" imagery \"//\" selected-imagery)\n  (let [ret (->> imagery\n              (filter (fn [m] (contains? selected-imagery (:name m)))))]\n    ;(log/info \"cook-imagery (ret)\" ret)\n    ret))\n\n\n(comment\n  (do\n    (def targets [{:name  \"alpha-hd\", :cells #{[7 7 \"hidef-image\" 0] [7 6 \"hidef-image\" 1]\n                                               [7 5 \"hidef-image\" 3] [7 6 \"hidef-image\" 2]},\n                   :color [:darkred \"rgba(139, 0, 0, .3)\" [139 0 0 0.3] [0.55 0.0 0.0 0.1] \"#8B0000\"]}\n                  {:name  \"bravo-img\", :cells #{[7 2 \"image\" 0] [7 1 \"image\" 1]},\n                   :color [:blue \"rgba(0, 0, 255, .3)\" [0 0 255 0.3] [0 0 1 0.1] \"#0000FF\"]}\n                  {:name  \"fire-hd\", :cells #{[5 3 \"hidef-image\" 2] [4 3 \"hidef-image\" 3]\n                                              [4 3 \"hidef-image\" 2] [5 3 \"hidef-image\" 0] [5 3 \"hidef-image\" 3]},\n                   :color [:orange \"rgba(255, 165, 0, .3)\" [255 165 0 0.3] [1 0.65 0 0.3] \"#FFA500\"]}\n                  {:name  \"fire-ir\", :cells #{[5 4 \"v/ir\" 2] [5 4 \"v/ir\" 1] [5 3 \"v/ir\" 1]\n                                              [5 4 \"v/ir\" 0] [5 4 \"v/ir\" 3]},\n                   :color [:grey \"rgba(128, 128, 128, .3)\" [128 128 128 0.3] [0.5 0.5 0.5 0.3] \"#808080\"]}\n                  {:name  \"severe-hd\", :cells #{[5 7 \"hidef-image\" 3] [5 6 \"hidef-image\" 0]\n                                                [6 6 \"hidef-image\" 2] [6 5 \"hidef-image\" 1] [5 7 \"hidef-image\" 1]},\n                   :color [:cornflowerblue \"rgba(100, 149, 237, .3)\"\n                           [100 149 237 0.3] [0.4 0.58 0.93 0.3] \"#6495ED\"]}])\n    (def selected-targets #{\"bravo-img\"})\n    (def current-time 0))\n\n  (->> targets\n    seq\n    (mapcat (fn [{:keys [name cells color]}]\n              (map (fn [[r c ty ti]]\n                     [name r c ti color])\n                cells)))\n    (filter (fn [[id _ _ _ _]] (contains? selected-targets id)))\n    (filter (fn [[_ _ _ ti _]] (= ti current-time))))\n\n\n  ())\n\n\n(comment\n  (do\n    (def current-time 0)\n    (def coverages [{:time        0\n                     :cell        [9 7]\n                     :coverage    #{{:platform \"goes-west\", :sensor \"abi-3\"} {:platform \"goes-east\", :sensor \"abi-1\"}},\n                     :computed_at \"2021-08-02T15:16:05.558813\"}]))\n\n  (->> coverages\n    ;seq\n    (filter #(= (:time %) current-time))\n    (mapcat (fn [{:keys [coverage time cell computed_at] :as all}]\n              (map (fn [c] {:time time :coverage c :cell cell :computed_at computed_at})\n                coverage))))\n\n\n  (do\n    (def current-time 0)\n    (def coverages [{:time        0\n                     :cell        [9 7]\n                     :coverage    #{{:platform \"goes-west\", :sensor \"abi-3\"} {:platform \"goes-east\", :sensor \"abi-1\"}},\n                     :computed_at \"2021-08-02T15:16:05.558813\"}]))\n\n  (->> coverages\n    seq\n    (filter #(= (:time %) current-time))\n    (mapcat (fn [{:keys [coverage time cell computed_at] :as all}]\n              (map (fn [c] {:time time :coverage c :cell cell :computed_at computed_at})\n                coverage))))\n\n  ())\n\n\n(comment\n\n  (do\n    (def sample-shape {:shape      :shape/polygon :id \"square\"\n                       :locations  [[30.0 -130.0] [30.0 -100.0]\n                                    [0.0 -100.0] [0.0 -130.0]]\n                       :fill-color [1 0 0 0.3] :outline-color [1 0 0 1] :width 2})\n    (def coverage {:time        0\n                   :cell        [9 7]\n                   :coverage    {:platform \"goes-west\", :sensor \"abi-3\"}\n                   :computed_at \"2021-08-02T15:16:05.558813\"}))\n\n\n  (do\n    (def id (clojure.string/join \"-\"\n              [(get-in coverage [:coverage :platform])\n               (:time coverage)\n               (str (:cell coverage))]))\n    (def locations (boundary-locations (:cell coverage)))\n    (def fill-color (get-in sensor-color-pallet [0 2]))\n    (def outline-color (get-in sensor-color-pallet [0 2]))\n    (def width 2))\n\n  {:shape      :shape/polygon :id id\n   :locations  locations :width width\n   :fill-color fill-color :outline-color outline-color}\n\n\n  (def real-coverage [{:time        0\n                       :cell        [9 7]\n                       :coverage    #{{:platform \"goes-west\", :sensor \"abi-3\"} {:platform \"goes-east\", :sensor \"abi-1\"}},\n                       :computed_at \"2021-08-02T15:16:05.558813\"}])\n\n  (defn- make-one-shape [c]\n    {:shape         :shape/polygon\n     :id            (clojure.string/join \"-\"\n                      [(get-in c [:coverage :platform])\n                       (:time c)\n                       (str (:cell c))])\n     :locations     (boundary-locations (:cell c))\n     :width         2\n     :fill-color    (get-in sensor-color-pallet [0 2])\n     :outline-color (get-in sensor-color-pallet [0 2])})\n\n  (make-one-shape coverage)\n\n\n  (make-coverage-shape real-coverage)\n\n\n\n\n\n  ())\n\n\n(comment\n  (def selected-imagery [{:name   \"glm\",\n                          :type   :points,\n                          :points '([23.674062728881836 -85.5692138671875 112.0]\n                                    [7.599512100219727 -76.88938903808594 206.0]\n                                    [-5.726319313049316 -69.43939208984375 17.0])}\n                         {:name         \"abi-16-meso-1\"\n                          :type         :meso-image\n                          :date-time    \"20221006120000000\"\n                          :bounding-box [22.074653 33.344622 -95.433292 -82.723547]\n                          :url          \"20221006120000000.png\"}])\n\n\n\n  (map make-image-shape selected-imagery)\n\n\n  (def points (:points (first selected-imagery)))\n\n  (map (fn [[lat lon _]]\n         {:id \"dummy\" :url \"dummy\" :bounding-box (sector/make-sector lat lon 0.5)})\n    points)\n\n  (mapcat (fn [{:keys [points]}]\n            (map (fn [[lat lon _]]\n                   {:id \"dummy\" :url \"dummy\" :bounding-box (sector/make-sector lat lon 0.1)})\n              points))\n    selected-imagery)\n\n\n  (make-imagery-shape selected-imagery)\n\n  ())\n\n\n(comment\n  (do\n    (def cell [29 34])\n    (def coverage {:platform \"goes-16 (east)\", :sensor \"abi-16-meso-2\"})\n    (def time 0)\n    (def color [:orange \"rgba(255, 165, 0, .3)\" [255 165 0 0.3] [1 0.65 0 0.3] \"#FFA500\"]))\n\n\n  (let [[_ _ _ fill _] color\n        [r g b a] fill\n        outline [r g b (+ a 0.3)]\n        ret     {:shape         :shape/polygon\n                 :id            (clojure.string/join \"-\"\n                                  [(:sensor coverage)\n                                   time\n                                   (str cell) r g b a])\n                 :locations     (boundary-locations cell)\n                 :width         2\n                 :fill-color    fill\n                 :outline-color outline}]\n    {:fill fill :r r :g g :b b :a a :outline outline\n     :ret  ret})\n\n  (boundary-locations cell)\n\n\n  ())\n\n\n(comment\n  (def row 7)\n  (def col 5)\n  [(get-cell-lat-center [row col])\n   (get-cell-lon-center [row col])]\n\n\n  ())\n\n\n\n\n"]}