{"version":3,"sources":["bh_ui/atom/experimental/ui_element.cljs"],"mappings":"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","names":["taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","bh-ui.atom.experimental.ui-element/config-panel","p__59251","map__59252","cljs.core/--destructure-map","cljs.core.get","seq59250","self__4852__auto__","cljs.core/seq","config-data","params","c","bh-ui.utils.helpers/resolve-value","cljs.core/deref","cljs.core.map","p__59253","vec__59254","cljs.core.nth","k","v","bh-ui.atom.re-com.labeled-field/labeled-field","bh-ui.atom.experimental.ui-element/selectable-table","p__59258","map__59259","seq59257","data","selection","source","re_frame.core.subscribe","clicked","reagent.core.atom","p__59260","map__59261","component-id","container-id","cljs.core.swap_BANG_","cljs.core/inc","re-frame.core/dispatch","cljs.core.conj","bh-ui.atom.experimental.ui-element/three-d-globe","p__59267","map__59268","seq59262","layers","current-time","l","t","p__59269","map__59270","re-com.core/input-textarea","js/goog.DEBUG","bh-ui.atom.experimental.ui-element/slider","p__59273","map__59274","seq59272","value","range","r","p__59275","map__59276","vec__59277","p1__59271#","min","max","re-com.core/slider","re-frame.core/dispatch-sync","bh-ui.atom.experimental.ui-element/label","p__59281","map__59282","seq59280","p__59283","map__59284","bh-ui.atom.experimental.ui-element/meta-data"],"sourcesContent":["(ns bh-ui.atom.experimental.ui-element\n\n  \"some components that act as stand-ins for 'real' bh-uis\"\n\n  (:require [bh-ui.atom.re-com.labeled-field :as lf]\n            [bh-ui.utils.helpers :as h]\n            [re-com.core :as rc]\n            [re-frame.core :as re-frame]\n            [re-frame.core :as rf]\n            [reagent.core :as r]\n            [taoensso.timbre :as log]))\n\n\n(log/info \"bh-ui.atom.experimental.ui-element\")\n\n\n(defn config-panel [& {:keys [config-data] :as params}]\n  ;(log/info \"config-panel\" params)\n\n  (let [c (h/resolve-value config-data)]\n\n    ;(log/info \"config-panel (resolve-value)\" @c)\n\n    [:div.card {:style {:width \"100%\" :height \"100%\"}}\n     (map (fn [[k v]]\n            ^{:key k} [lf/labeled-field (str k) v])\n       @c)]))\n\n\n(defn selectable-table [& {:keys [data selection]}]\n\n  ;(log/info \"selectable-table data\" data \"// selection\" selection)\n\n  (let [source  (re-frame/subscribe data)\n        clicked (r/atom 0)]\n    (fn [& {:keys [data selection component-id container-id]}]\n      ;(log/info \"selectable-table RENDER\")\n      [:div.card {:style {:width \"300px\" :height \"200px\"}}\n       [:h2 {:style {:text-align :center}} \"Selectable Table\"]\n       [:div {:style {:width \"200px\" :margin :auto}}\n        [lf/labeled-field \"data\" @source]\n        [:button.button {:on-click #(do\n                                      (swap! clicked inc)\n                                      (re-frame/dispatch (conj selection @clicked)))}\n         \"Click!\"]]])))\n\n\n(defn three-d-globe [& {:keys [layers current-time component-id container-id]}]\n\n  ;(log/info \"three-d-globe layers\" layers \"// current-time\" current-time)\n\n  (let [l (re-frame/subscribe layers)\n        t (re-frame/subscribe current-time)]\n    (fn [& {:keys [layers current-time component-id container-id]}]\n      ;(log/info \"three-d-globe RENDER\")\n      [:div.card {:style {:width \"500px\" :height \"500px\"}}\n       [:h2 {:style {:text-align :center}} \"3D Globe Table\"]\n       [:div {:style {:width \"200px\" :margin :auto}}\n        [rc/input-textarea\n         :src (rc/at)\n         :model (r/atom (str @l))\n         :rows 5\n         :on-change #()]\n        [lf/labeled-field \"Current Time\" @t]]])))\n\n\n(defn slider [& {:keys [value range]}]\n\n  ;(log/info \"slider value\" value \"// range\" range)\n\n  (let [v (re-frame/subscribe value)\n        r (re-frame/subscribe range)]\n    (fn [& {:keys [value range]}]\n      ;(log/info \"slider RENDER\")\n      (let [[min max] @r]\n        [:div.card {:style {:width \"300px\" :height \"100px\"}}\n         [:h2 {:style {:text-align :center}} \"Slider\"]\n         [rc/slider\n          :src (rc/at)\n          :model (str @v)\n          :min min\n          :max max\n          :width \"90%\"\n          :style {:margin-left :auto :margin-right :auto}\n          :on-change #(do\n                        ;(log/info \"slider\" (str %))\n                        (re-frame/dispatch-sync (conj value %)))\n          :disabled? false]\n         [:div {:style {:width \"200px\" :margin :auto}}\n          [lf/labeled-field \"Value\" @v]\n          [lf/labeled-field \"Range\" @r]]]))))\n\n\n(defn label [& {:keys [value]}]\n\n  ;(log/info \"label value\" value)\n\n  (let [v (re-frame/subscribe value)]\n    ;(log/info \"label RENDER\")\n    (fn [& {:keys [value]}]\n      [:div.card {:style {:width \"300px\" :height \"100px\"}}\n       [:h2 {:style {:text-align :center}} \"Label\"]\n       [:div {:style {:width \"200px\" :margin :auto}}\n        [lf/labeled-field \"Value\" @v]]])))\n\n\n\n(def meta-data {:stunt/config-panel     {:component config-panel\n                                         :ports     {:config-data :port/source-sink}}\n                :stunt/selectable-table {:component selectable-table\n                                         :ports     {:data      :port/source-sink ; out this be {:data-in :port/sink} & {:data-out :port/source}?\n                                                     :selection :port/source}}\n\n                :stunt/globe            {:component three-d-globe\n                                         :ports     {:layers       :port/sink\n                                                     :current-time :port/sink}}\n\n                :stunt/label            {:component label\n                                         :ports     {:value :port/sink}}\n\n                :stunt/slider           {:component slider\n                                         :ports     {:value :port/source-sink\n                                                     :range :port/sink}}})\n\n\n(rf/dispatch-sync [:register-meta meta-data])\n\n\n\n\n\n(comment\n  (def data [:sources/string])\n\n  ())\n\n"]}