{"version":3,"sources":["bh_ui/atom/chart/pie_chart.cljs"],"mappings":"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","names":["taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","bh-ui.atom.chart.pie-chart/source-code","bh-ui.atom.chart.pie-chart/sample-data","bh-ui.utils.example-data/meta-tabular-data","bh-ui.atom.chart.pie-chart/sample-config-data","bh-ui.atom.chart.pie-chart/random-data","bh-ui.utils.example-data/random-meta-positive-tabular-data","bh-ui.atom.chart.pie-chart/local-config","data","d","cljs.core/deref","cljs.core.get","fields","cljs.core.get_in","cljs.core.merge","bh-ui.utils.color/get-color","cljs.core.filter","p__58831","vec__58832","cljs.core.nth","k","v","cljs.core._EQ_","cljs.core/keys","m","cljs.core/first","cljs.core.map_indexed","idx","entry","bh_ui.utils.path__GT_keyword","cljs.core.into","p__58835","vec__58836","bh-ui.atom.chart.pie-chart/config","component-id","bh-ui.utils/default-pub-sub","bh-ui.atom.chart.utils/default-config","bh-ui.utils/config-tab-panel","bh-ui.atom.chart.pie-chart/make-cell-config","p__58839","map__58840","cljs.core/--destructure-map","name","item","bh-ui.atom.chart.utils/boolean-config","cljs.core.conj","bh-ui.atom.chart.pie-chart/config-panel","re-com.core/v-box","js/goog.DEBUG","bh-ui.atom.chart.utils/non-gridded-chart-config","re-com.core/line","bh-ui.atom.chart.utils/option","bh-ui.atom.chart.utils/column-picker","bh-ui.atom.chart.utils/color-config-text","re-com.core/label","bh-ui.atom.chart.pie-chart/included-cells","subscriptions","ret","p__58841","map__58842","bh-ui.utils/resolve-sub","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","bh-ui.atom.chart.pie-chart/component*","p__58844","map__58845","seq58843","self__4852__auto__","cljs.core/seq","container-id","isAnimationActive?","params","cljs.core/empty?","included","js/shadow.js.shim.module$recharts.ResponsiveContainer","js/shadow.js.shim.module$recharts.PieChart","bh-ui.atom.chart.utils/override","bh-ui.atom.chart.utils/non-gridded-chart-components","js/shadow.js.shim.module$recharts.Pie","bh-ui.atom.chart.pie-chart/component","p__58847","map__58848","seq58846","input-params","cljs.core.assoc","bh-ui.atom.chart.wrapper-2/component-panel","cljs.core.reduce","cljs.core/into","bh-ui.atom.chart.wrapper-2/base-chart","bh-ui.atom.chart.pie-chart/meta-data","re-frame.core/dispatch-sync"],"sourcesContent":["(ns bh-ui.atom.chart.pie-chart\n  (:require [bh-ui.atom.chart.utils :as utils]\n            [bh-ui.atom.chart.wrapper-2 :as wrapper]\n            [bh-ui.utils :as ui-utils]\n            [bh-ui.utils.color :as color]\n            [bh-ui.utils.example-data :as example-data]\n            [re-frame.core :as rf]\n            [re-com.core :as rc]\n            [taoensso.timbre :as log]\n            [\"recharts\" :refer [ResponsiveContainer PieChart Pie Cell]]))\n\n\n(log/info \"bh-ui.atom.chart.pie-chart\")\n\n\n(def source-code '[:> PieChart {:label (utils/override true {} :label)}\n\n                   (utils/non-gridded-chart-components component-id {})\n\n                   [:> Pie {:dataKey           (ui-utils/resolve-sub subscriptions [:value :chosen])\n                            :nameKey           (ui-utils/resolve-sub subscriptions [:name :chosen])\n                            :data              included\n                            :fill              (ui-utils/resolve-sub subscriptions [:fill])\n                            :label             (utils/override true {} :label)\n                            :isAnimationActive @isAnimationActive?}]])\n\n\n(def sample-data example-data/meta-tabular-data)\n(def sample-config-data {:name  {:keys [:Page-A :Page-B :Page-C :Page-D :Page-E :Page-F :Page-G]}\n                         :fill \"#888888\"\n                         :value {:keys [:uv :pv :tv :amt] :chosen :uv}})\n(def random-data example-data/random-meta-positive-tabular-data)\n\n\n(defn local-config [data]\n\n  ;(log/info \"local-config\" @data)\n\n  (let [d      (get @data :data)\n        fields (get-in @data [:metadata :fields])]\n\n    (merge\n      {:fill (color/get-color 0)}\n\n      ; process options for :name\n      (->> fields\n        (filter (fn [[k v]] (= :string v)))\n        keys\n        ((fn [m]\n           {:name {:keys m :chosen (first m)}})))\n\n      (->> d\n           (map-indexed (fn [idx entry]\n                          ;(log/info \"local-config (:color loop)\" entry)\n                          {(ui-utils/path->keyword (:name entry))\n                           {:name  (:name entry)\n                            :include true}}))\n           (into {}))\n\n      ; process options for :value\n      (->> fields\n        (filter (fn [[k v]] (= :number v)))\n        keys\n        ((fn [m]\n           {:value {:keys m :chosen (first m)}}))))))\n\n\n(defn config [component-id data]\n  (merge\n    ui-utils/default-pub-sub\n    utils/default-config\n    (ui-utils/config-tab-panel component-id)\n    (local-config data)))\n\n\n(defn- make-cell-config [component-id data]\n    (->> (:data @data)\n         (map-indexed (fn [idx {:keys [name] :as item}]\n                        [utils/boolean-config component-id name (conj [name] :include)]))\n         (into [:<>])))\n\n\n(defn config-panel [data component-id]\n  [rc/v-box :src (rc/at)\n   :gap \"10px\"\n   :style {:padding          \"15px\"\n           :border-top       \"1px solid #DDD\"\n           :background-color \"#f7f7f7\"}\n   :children [[utils/non-gridded-chart-config @data component-id]\n              [rc/line :src (rc/at) :size \"2px\"]\n              [utils/option component-id \":name\" [:name]]\n              [rc/line :src (rc/at) :size \"2px\"]\n              [utils/column-picker data component-id \":value\" [:value :chosen]]\n              [utils/color-config-text component-id \":fill\" [:fill] :above-right]\n              [rc/v-box :src (rc/at)\n               :gap \"5px\"\n               :children [[rc/label :src (rc/at) :label \"Pie Slices\"]\n                          (make-cell-config component-id data)]]]])\n\n\n(defn- included-cells [data subscriptions]\n  (let [ret (->> data\n              (filter (fn [{:keys [name]}] (ui-utils/resolve-sub subscriptions [name :include])))\n              (into []))]\n\n    ;(log/info \"included-cells\" data \"//\" subscriptions \"//\" ret)\n\n    ret))\n\n\n(defn- component* [& {:keys [data component-id container-id\n                             subscriptions isAnimationActive?]\n                      :as   params}]\n  (let [d        (if (empty? data) [] (get data :data))\n        included (included-cells d subscriptions)]\n\n    [:> ResponsiveContainer\n     [:> PieChart {:label (utils/override true {} :label)}\n\n      (utils/non-gridded-chart-components component-id {})\n\n      [:> Pie {:dataKey           (ui-utils/resolve-sub subscriptions [:value :chosen])\n               :nameKey           (ui-utils/resolve-sub subscriptions [:name :chosen])\n               :data              included\n               :fill              (ui-utils/resolve-sub subscriptions [:fill])\n               :label             (utils/override true {} :label)\n               :isAnimationActive @isAnimationActive?}]]]))\n\n\n(defn component [& {:keys [component-id] :as params}]\n\n  ;(log/info \"component-2\" params)\n\n  (let [input-params (assoc params :component* component*\n                                   :component-panel wrapper/component-panel\n                                   :config config\n                                   :local-config local-config)]\n\n    (reduce into [wrapper/base-chart] (seq input-params))))\n\n\n(def meta-data {:rechart/pie {:component component\n                              ;:configurable-component configurable-component\n                              :ports     {:data   :port/sink\n                                          :config :port/sink}}})\n\n\n(rf/dispatch-sync [:register-meta meta-data])\n"]}