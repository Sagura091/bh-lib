{"version":3,"sources":["bh_ui/data_source_handler.cljs"],"mappings":";AAOA,GAAA,QAAAA,kCAAAC,sDAAAC;AAAA;AAAA,AAAA,qDAAA,iBAAAC,6BAAA,AAAAC,6CAAA,hJAAUS;IAAVR,6BAAA,AAAAD,6CAAA;IAAAE,6BAAA,AAAAF,6CAAA;IAAAG,iCAAA,AAAAH,6CAAA;IAAAI,0BAAA,AAAAC,4CAAA,mCAAA,gEAAA,iBAAAC,eAAA;AAAA,AAAA,QAAAA,6CAAAA,+CAAAA;;AAAA,AAAA,YAAAC,kBAAA,AAAAC,+CAAA,4BAAA,4BAAmC,WAAAE;AAAA,AAAA,IAAAC,aAAAD;IAAAE,aAAA,AAAAC,cAAAF;IAAAG,eAAA,AAAAC,gBAAAH;IAAAA,iBAAA,AAAAI,eAAAJ;UAAAE,NAAMG;QAANL,JAAYM;AAAZ,AAAgBD;GAAnD,4DAAAb,wBAAAL,2BAAAE,2BAAAC,2BAAAC;;;AAGA,oDAAA,pDAAMgB,gHACHC;AADH,AAGE,OAACX,iFAAyBW;;AAG5B,AAAAX,+FAAA,4DAAA,WACGW;AADH,AAEE,OAAAC,0DAAAC,mCAAA,qDAAA,4BAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,4CAAsDH;GAAtD,OAAA,KAAA,YAAA;;AAGF,AAAAX,+FAAA,sEAAA,WAAAe;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DACIP;cADJ,AAAAQ,4CAAAD,WAAA,IAAA,rEACME;AADN,AAEE,8BAAA,mFAAA,1GAACC,2OAAqCD;;AAGxC,AAAAlB,+FAAA,gFAAA,WAAAoB;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAH,4CAAAI,WAAA,IAAA,/DACIZ;cADJ,AAAAQ,4CAAAI,WAAA,IAAA,rEACMH;AADN,AAGE,8BAAA,mFAAA,1GAACC,qOAAkCD","names":["js/bh-ui","js/bh-ui.data-source-handler","js/bh-ui.data-source-handler.-data-source-msg-handler","method-table__4747__auto__","cljs.core.atom","prefer-table__4748__auto__","method-cache__4749__auto__","cached-hierarchy__4750__auto__","hierarchy__4751__auto__","cljs.core.get","fexpr__41852","cljs.core/MultiFn","cljs.core.symbol","bh-ui.data-source-handler/-data-source-msg-handler","p__41854","vec__41855","seq__41856","cljs.core/seq","first__41857","cljs.core/first","cljs.core/next","evt","_","bh-ui.data-source-handler/data-source-msg-handler","message","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","p__41871","vec__41872","cljs.core.nth","content","re-frame.core/dispatch","p__41875","vec__41876"],"sourcesContent":["(ns bh-ui.data-source-handler\n  (:require [re-frame.core :as rf]\n            [taoensso.timbre :as log]\n            [events :as events]))\n\n\n\n(defmulti -data-source-msg-handler (fn [[evt & _]] evt))\n\n\n(defn data-source-msg-handler\n  [message]\n  ;(log/info \"data-source-msg-handler\" ((fn [[evt & _]] evt) message) \"////\" (count message))\n  (-data-source-msg-handler message))\n\n\n(defmethod -data-source-msg-handler :default\n  [message]\n  (log/info \"Unhandled -data-source-msg-handler event:\" message))\n\n\n(defmethod -data-source-msg-handler :some/broadcast\n  [[_ content]]\n  (rf/dispatch [::events/update-counter content]))\n\n\n(defmethod -data-source-msg-handler :publish/data-update\n  [[_ content]]\n  ;(log/info \"data-source-msg-handler :publish/data-update\" content)\n  (rf/dispatch [::events/data-update content]))\n"]}