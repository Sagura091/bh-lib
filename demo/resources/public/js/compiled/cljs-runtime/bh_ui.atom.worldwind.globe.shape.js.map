{"version":3,"sources":["bh_ui/atom/worldwind/globe/shape.cljs"],"mappings":"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","names":["taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","bh-ui.atom.worldwind.globe.shape/wrap-shape","id","shapes","z","layer","js/shadow.js.shim.module$worldwindjs.RenderableLayer","cljs.core.dorun","p1__59560#","cljs.core.map","js/bh-ui","js/bh-ui.atom","js/bh-ui.atom.worldwind","js/bh-ui.atom.worldwind.globe","js/bh-ui.atom.worldwind.globe.shape","js/bh-ui.atom.worldwind.globe.shape.make-shape","method-table__4747__auto__","cljs.core.atom","prefer-table__4748__auto__","method-cache__4749__auto__","cached-hierarchy__4750__auto__","hierarchy__4751__auto__","cljs.core.get","fexpr__59568","cljs.core/MultiFn","cljs.core.symbol","bh-ui.atom.worldwind.globe.shape/make-shape","p__59569","map__59570","cljs.core/--destructure-map","shape","p__59571","map__59572","locations","fill-color","outline-color","width","attributes","bh-ui.atom.worldwind.globe.shape.attributes/shape-attributes","locs","bh-ui.atom.worldwind.globe.location/location","cljs.core.into_array","polygon","js/shadow.js.shim.module$worldwindjs.SurfacePolygon","cljs.core/PersistentVector","or__4253__auto__","p__59573","map__59574","location","radius","circle","js/shadow.js.shim.module$worldwindjs.SurfaceCircle","bh_ui.atom.worldwind.globe.location.location","p__59575","map__59576","polyline","js/shadow.js.shim.module$worldwindjs.SurfacePolyline","p__59577","map__59578","label","js/shadow.js.shim.module$worldwindjs.GeographicText","bh_ui.atom.worldwind.globe.location.position","bh-ui.atom.worldwind.globe.shape.attributes/text-attributes"],"sourcesContent":["(ns bh-ui.atom.worldwind.globe.shape\n  (:require [\"worldwindjs\" :as WorldWind]\n            [bh-ui.atom.worldwind.globe.location :as location]\n            [bh-ui.atom.worldwind.globe.shape.attributes :as attributes]\n            [taoensso.timbre :as log]))\n\n\n(log/info \"bh-ui.atom.worldwind.globe.shape\")\n\n\n(defn wrap-shape [id shapes z]\n  ;(log/info \"wrap-shape\" id \"//\" shapes)\n  (let [layer (WorldWind/RenderableLayer.)]\n    (set! (.-displayName layer) id)\n\n    (dorun\n      (map #(.addRenderable layer %) shapes))\n\n    {:id id :layer layer :z z}))\n\n\n(defmulti make-shape (fn [{:keys [shape]}]\n                       ;(log/info \"make-shape\" shape)\n                       shape))\n\n; :shape/polygon\n(defmethod make-shape :shape/polygon [{:keys [id locations\n                                              fill-color outline-color\n                                              width z]}]\n\n  ;(log/info \"polygon\" locations \"//\" fill-color \"//\" outline-color \"//\" width)\n\n  (let [attributes (attributes/shape-attributes\n                     {:fill-color    fill-color\n                      :outline-color outline-color\n                      :width         width})\n        locs       (->> locations\n                     (map location/location)\n                     (into-array))\n        polygon    (WorldWind/SurfacePolygon. locs attributes)]\n    (set! (.-displayName polygon) id)\n    (wrap-shape id (vector polygon) (or z 5))))\n\n\n; :shape/circle\n(defmethod make-shape :shape/circle [{:keys [id location\n                                             fill-color outline-color\n                                             width radius z]}]\n\n  ;(log/info \"circle\" location \"//\" fill-color \"//\" outline-color \"//\" width \"//\" radius)\n\n  (let [attributes (attributes/shape-attributes\n                     {:fill-color    fill-color\n                      :outline-color outline-color\n                      :width         width})\n        circle     (WorldWind/SurfaceCircle. (location/location location)\n                     radius attributes)]\n    (set! (.-displayName circle) id)\n    (wrap-shape id (vector circle) (or z 5))))\n\n\n; :shape/polyline\n(defmethod make-shape :shape/polyline [{:keys [id locations outline-color width z]}]\n\n  ;(log/info \"circle\" locations \"//\" outline-color \"//\" width)\n\n  (let [attributes (attributes/shape-attributes\n                     {:outline-color outline-color\n                      :width         width})\n        locs       (->> locations\n                     (map location/location)\n                     (into-array))\n        polyline   (WorldWind/SurfacePolyline. locs attributes)]\n    (set! (.-displayName polyline) id)\n    (wrap-shape id (vector polyline) (or z 5))))\n\n\n;:shape/label\n(defmethod make-shape :shape/label [{:keys [id label location fill-color outline-color width z]}]\n\n  ;(log/info \"label\" location \"//\" label \"//\" fill-color \"//\" width)\n\n  (let [label      (WorldWind/GeographicText. (location/position location) label)\n        attributes (attributes/text-attributes\n                     {:fill-color    fill-color\n                      :outline-color outline-color\n                      :width         width})]\n    (set! (.-attributes label) attributes)\n    (wrap-shape id (vector label) (or z 10))))\n\n\n\n(comment\n  (do\n    (def locations [[-115.0 37.0] [-115.0 32.0]\n                    [-107.0 33.0] [-102.0 31.0]\n                    [-102.0 35.0] [-115.0 37.0]])\n    (def fill-color [0.0 0.5 0.0 0.5])\n    (def outline-color [0.0 0.5 0.0 1.0])\n    (def width 5))\n\n  (def attributes (attributes/attributes\n                    {:fill-color    fill-color\n                     :outline-color outline-color\n                     :width         width}))\n  (def locs (->> locations\n              (map location/location)\n              (into-array)))\n  (def polygon (WorldWind/SurfacePolygon. locs attributes))\n\n\n  ())\n\n\n; refactor wrap-shape to work with collections, putting all the shapes on the same layer\n(comment\n  (do\n    (def id \"dummy\")\n    (def z 100)\n    (def fill-color [0.0 0.5 0.0 0.5])\n    (def outline-color [0.0 0.5 0.0 1.0])\n    (def width 5)\n    (def locations [[-115.0 37.0] [-115.0 32.0]\n                    [-107.0 33.0] [-102.0 31.0]\n                    [-102.0 35.0] [-115.0 37.0]])\n\n    (def attr (attributes/shape-attributes\n                {:fill-color    fill-color\n                 :outline-color outline-color\n                 :width         width}))\n    (def locs (->> locations\n                (map location/location)\n                (into-array)))\n    (def polygon (WorldWind/SurfacePolygon. locs attr))\n\n    (set! (.-displayName polygon) id)\n    (def shapes [polygon]))\n\n\n  (def layer (WorldWind/RenderableLayer.))\n\n  (map (fn [shape] {:shape shape}) shapes)\n\n  (dorun\n    (map #(.addRenderable layer %) shapes))\n  (.-renderables layer)\n\n\n  (let [attributes (attributes/shape-attributes\n                     {:fill-color    fill-color\n                      :outline-color outline-color\n                      :width         width})\n        locs       (->> locations\n                     (map location/location)\n                     (into-array))\n        polygon    (WorldWind/SurfacePolygon. locs attributes)]\n    (set! (.-displayName polygon) id))\n\n\n  (let [layer (WorldWind/RenderableLayer.)]\n    (set! (.-displayName layer) id)\n\n    (dorun\n      (map #(.addRenderable layer %) shapes))\n\n    {:id id :layer layer :z z})\n\n\n\n  ())\n"]}