{"version":3,"sources":["bh_ui/atom/chart/treemap_chart.cljs"],"mappings":"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","names":["bh-ui.atom.chart.treemap-chart/sample-data","reagent.core.atom","bh-ui.utils.example-data/hierarchy-data","bh-ui.atom.chart.treemap-chart/default-ratio","bh-ui.atom.chart.treemap-chart/default-stroke","bh-ui.atom.chart.treemap-chart/default-fill","bh-ui.atom.chart.treemap-chart/config","component-id","data","cljs.core.merge","bh-ui.utils/default-pub-sub","cljs.core.keyword","bh-ui.atom.chart.treemap-chart/ratio-config","re-com.core/h-box","js/goog.DEBUG","bh-ui.atom.chart.utils/boolean-config","re-com.core/v-box","bh-ui.atom.chart.utils/slider-config","bh-ui.atom.chart.treemap-chart/config-panel","_","bh-ui.atom.chart.utils/isAnimationActive","re-com.core/line","bh-ui.atom.chart.utils/color-config-text","cljs.core/vec","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","cljs.core.apply","cljs.core/array-map","bh-ui.atom.chart.treemap-chart/source-code","bh-ui.atom.chart.treemap-chart/component-panel","container-id","ui","isAnimationActive?","bh-ui.utils/subscribe-local","stroke","fill","cljs.core/deref","js/shadow.js.shim.module$recharts.ResponsiveContainer","js/shadow.js.shim.module$recharts.Treemap","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","bh-ui.atom.chart.treemap-chart/configurable-component","p__58980","map__58981","cljs.core/--destructure-map","cljs.core.get","seq58978","self__4852__auto__","bh-ui.atom.chart.wrapper/base-chart","or__4253__auto__","bh-ui.atom.chart.utils/hierarchy-data-panel","bh-ui.atom.chart.treemap-chart/component","p__58986","map__58988","seq58984","bh-ui.atom.chart.treemap-chart/meta-data","re-frame.core/dispatch-sync"],"sourcesContent":["(ns bh-ui.atom.chart.treemap-chart\n  (:require [bh-ui.atom.chart.utils :as utils]\n            [bh-ui.utils.example-data :as data]\n            [bh-ui.atom.chart.wrapper :as c]\n            [bh-ui.utils :as ui-utils]\n            [re-frame.core :as rf]\n            [re-com.core :as rc]\n            [reagent.core :as r]\n            [\"recharts\" :refer [ResponsiveContainer Treemap]]))\n\n\n(def sample-data\n  \"the Treemap Chart works best with \\\"hierarchical data\\\" so we return the hierarchy-data from utils\"\n  (r/atom data/hierarchy-data))\n\n\n(def default-ratio (/ 4 3))\n(def default-stroke \"#ffffff\")\n(def default-fill \"#8884d8\")\n\n\n(defn config\n  \"constructs the configuration panel for the chart's configurable properties. This is specific to\n  this being a line-chart component (see [[local-config]]).\n\n  Merges together the configuration needed for:\n\n  1. line charts\n  2. pub/sub between components of a container\n  3. `default-config` for all Rechart-based types\n  4. the `tab-panel` for view/edit configuration properties and data\n  5. sets properties of the default-config (local config properties are just set inside [[local-config]])\n  6. sets meta-data for properties this component publishes (`:pub`) or subscribes (`:sub`)\n\n  ---\n\n  - component-id : (string) unique id of the chart\n  \"\n  [component-id data]\n  (merge\n    ui-utils/default-pub-sub\n    {:tab-panel         {:value     (keyword component-id \"config\")\n                         :data-path [:containers (keyword component-id) :tab-panel]}\n     :isAnimationActive true\n     :ratio             {:include true\n                         :n       4\n                         :d       3}\n     :stroke            {:color \"#ffffff\"}\n     :fill              {:color \"#8884d8\"}}))\n\n\n(defn- ratio-config\n  \"builds the ui components needed to configure the `ration` property of the treemap\n\n> See also:\n>\n> [Recharts/treemap](https://recharts.org/en-US/api/Treemap)\n\"\n  [component-id]\n  [rc/h-box :src (rc/at)\n   :gap \"5px\"\n   :children [[utils/boolean-config component-id \":ratio\" [:ratio :include]]\n              [rc/v-box :src (rc/at)\n               :gap \"5px\"\n               :children [[utils/slider-config component-id 1 10 [:ratio :n]]\n                          [utils/slider-config component-id 1 10 [:ratio :d]]]]]])\n\n\n(defn- config-panel\n  \"the panel of configuration controls\n\n  ---\n\n  - data : (atom) data to display (may be used by the standard configuration components for thins like axes, etc.\n  - component-id : (string) unique identifier for this chart instance\n  \"\n  [_ component-id]\n\n  [rc/v-box :src (rc/at)\n   :gap \"10px\"\n   :width \"400px\"\n   :height \"500px\"\n   :style {:padding          \"15px\"\n           :border-top       \"1px solid #DDD\"\n           :background-color \"#f7f7f7\"}\n   :children [[utils/isAnimationActive component-id]\n              [rc/line :src (rc/at) :size \"2px\"]\n              [rc/v-box :src (rc/at)\n               :gap \"10px\"\n               :children [[ratio-config component-id]\n                          [utils/color-config-text component-id \":stroke\" [:stroke :color]]\n                          [utils/color-config-text component-id \":fill\" [:fill :color]]]]]])\n\n\n(def source-code `[:> Treemap\n                   {:width             400 :height 400\n                    :data              @data\n                    :dataKey           \"size\"\n                    :isAnimationActive true\n                    :ratio             (/ 4 3)\n                    :stroke            \"#ffffff\"\n                    :fill              \"#8884d8\"}])\n\n\n(defn- component-panel\n  \"the chart to draw, taking cues from the settings of the configuration panel\n\n  ---\n\n  - data : (atom) any data shown by the component's ui\n  - component-id : (string) unique identifier for this widget instance\n  \"\n  [data component-id container-id ui]\n  (let [;ratio (ui-utils/subscribe-local component-id [:ratio :include])\n        isAnimationActive? (ui-utils/subscribe-local component-id [:isAnimationActive])\n        stroke             (ui-utils/subscribe-local component-id [:stroke :color])\n        fill               (ui-utils/subscribe-local component-id [:fill :color])]\n\n    (fn [data component-id container-id ui]\n      [:> ResponsiveContainer\n       [:> Treemap\n        {:data              @data\n         :dataKey           \"size\"\n         :isAnimationActive @isAnimationActive?\n         :ratio             default-ratio\n         :stroke            @stroke\n         :fill              @fill}]])))\n\n\n(defn configurable-component\n  \"the chart to draw, taking cues from the settings of the configuration panel\n\n  ---\n\n  - :data : (atom) any data shown by the component's ui\n  - :component-id : (string) unique identifier for this chart instance within this container\n  - :container-id : (string) name of the container this chart is inside of\n  \"\n  [& {:keys [data component-id container-id ui]}]\n  [c/base-chart\n   :data data\n   :config (config component-id data)\n   :component-id component-id\n   :container-id (or container-id \"\")\n   :data-panel utils/hierarchy-data-panel\n   :config-panel config-panel\n   :component-panel component-panel\n   :ui ui])\n\n\n(defn component\n  \"the chart to draw. this variant does NOT provide a configuration panel\n\n  ---\n\n  - :data : (atom) any data shown by the component's ui\n  - :component-id : (string) unique identifier for this chart instance within this container\n  - :container-id : (string) name of the container this chart is inside of\n  \"\n  [& {:keys [data component-id container-id ui]}]\n  [c/base-chart\n   :data data\n   :config (config component-id data)\n   :component-id component-id\n   :container-id (or container-id \"\")\n   :component-panel component-panel\n   :ui ui])\n\n\n(def meta-data {:rechart/treemap {:component component\n                                  ;:configurable-component configurable-component\n                                  :ports     {:data   :port/sink\n                                              :config :port/sink}}})\n\n\n(rf/dispatch-sync [:register-meta meta-data])\n\n\n\n\n(comment\n  (def component-id \"treemap-chart-demo\")\n\n  ())"]}