{"version":3,"sources":["demo/src/catalog/technologies/overview/reagent.cljs"],"mappings":";AAGA,0DAAA,1DAAMA;AAAN,AACM,qGAAA,UAAA,smCAAA,9sCAACC","names":["demo.src.catalog.technologies.overview.reagent/overview","demo.src.catalog.technologies.overview.overview.overview"],"sourcesContent":["(ns demo.src.catalog.technologies.overview.reagent\n  (:require [demo.src.catalog.technologies.overview.overview :as o]))\n\n(defn overview []\n      (o/overview \"Reagent\"\n\n        \"#### _A simple [ClojureScript](https://github.com/clojure/clojurescript) interface to [React](https://reactjs.org/)_\n\nReagent provides a way to write efficient React components using (almost) nothing but plain ClojureScript functions.\nReagent uses Hiccup-like markup instead of React's sort-of html. The goal of Reagent is to make it possible to define\narbitrarily complex UIs using just a couple of basic concepts, and to be fast enough by default that you rarely have to\nthink about performance. The easiest way to manage state in Reagent is to use Reagent\u2019s own version of atom. Sometimes\nyou may want to maintain state locally in a component. That is easy to do with an atom as well.\nAnother important feature of reagent is that a component function can return another function, that is used to do the actual rendering.\nThis function is called with the same arguments as the first one.\n\nSee also:\n> [Reagent:Minimalistic React for Clojurescipt](https://reagent-project.github.io/)\n> [reagent-project/reagent](https://github.com/reagent-project/reagent)\"\n\n\"/imgs/reagent-logo.png\"))\n"]}