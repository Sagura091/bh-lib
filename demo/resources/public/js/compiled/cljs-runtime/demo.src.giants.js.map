{"version":3,"sources":["demo/src/giants.cljs"],"mappings":"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","names":["demo.src.giants/image-style","demo.src.giants/people","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","demo.src.giants/personality","p__59879","vec__59880","cljs.core.nth","seq59876","G__59877","cljs.core/first","cljs.core/next","G__59878","self__4851__auto__","name","description","image","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","bh-ui.atom.card.flippable-card/card","bh-ui.atom.card.flippable-card/default-style","re-com.core/v-box","js/goog.DEBUG","or__4253__auto__","cljs.core/empty?","re-com.core/gap","woolybear.ad.layout/section","woolybear.ad.layout/markdown-block","demo.src.giants/columns","people","row","cljs.core.into","iter__4652__auto__","s__59884","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__59886","cljs.core/chunk-buffer","i__59885","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__59883","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","p","cljs.core.partition_all","s__59888","b__59890","i__59889","map__59891","cljs.core/--destructure-map","cljs.core.get","iter__59887","map__59892","s__59894","b__59896","i__59895","map__59897","iter__59893","map__59898","demo.src.giants/view","woolybear.ad.layout/page","woolybear.packs.flex-panel/flex-panel","woolybear.packs.flex-panel/flex-top","woolybear.ad.layout/page-header","cljs.core/chunk-first"],"sourcesContent":["(ns demo.src.giants\n  (:require [taoensso.timbre :as log]\n            [woolybear.ad.layout :as layout]\n            [woolybear.packs.flex-panel :as flex]\n            [re-com.core :as rc]\n\n            [bh-ui.atom.card.flippable-card :as flippable]))\n\n\n(def image-style {:width        \"170px\" :height \"170px\"\n                  :display      :block\n                  :margin-left  :auto\n                  :margin-right :auto})\n\n\n(def people [{:name  \"Rich Hickey\"\n              :image \"imgs/giants/rich-hickey.jpeg\"\n              :description\n              \"Rich is the creator of Clojure and the Datomic database. His deep thinking about programming and programing languages helps guide us.\n\n[Are We There Yet?]() (2009)\n\n[Simple Made Easy]() (2011)\n              \"}\n\n             {:name        \"Stu Halloway\"\n              :image       \"imgs/giants/stu-halloway.jpeg\"\n              :description \"Stu is a Principle at Cognitect and talks on many subjects.\n\n[Simplicity Ain't Easy](https://www.youtube.com/watch?v=cidchWg74Y4) (2012)\n\n[The Impedance Mismatch is Our Fault](https://www.infoq.com/presentations/Impedance-Mismatch/) (2012)\n\n[Clojure in 10 Big Ideas](https://www.youtube.com/watch?v=noiGVQoyYHw) (2013)\"}\n\n             {:name        \"David Nolen\"\n              :image       \"imgs/giants/david-nolen.png\"\n              :description \"David has been the lead developer of [Clojurescript]() for many years.\n\n[ClojureScript: Lisp's Revenge](https://www.youtube.com/watch?v=MTawgp3SKy8) (2013)\n\n[ClojureScript in the Age of TypeScript](https://www.youtube.com/watch?v=3HxVMGaiZbc) (2021)\"}\n\n             {:name        \"Dan Holmsand\"\n              :image       \"imgs/giants/dan-holmsand.jpeg\"\n              :description \"Dan started [Reagent](https://reagent-project.github.io)\"}\n\n             {:name        \"Bret Victor\"\n              :image       \"imgs/giants/bret-victor.jpg\"\n              :description \"Bret has worked at Magic Ink and Apple, focusing on human-centric design.\n\n[Drawing Dynamic Visualizations](http://worrydream.com/#!/DrawingDynamicVisualizationsTalk) (2013)\n\n[Media for the Unthinkable](http://worrydream.com/#!/MediaForThinkingTheUnthinkable) (2013)\"}\n\n             {:name        \"James Reeves\"\n              :image       \"imgs/giants/james-reeves.jpg\"\n              :description \"James is the developer of [Compojure](https://github.com/weavejester/compojure) and [Hiccup](https://github.com/weavejester/hiccup) and many others.\n\n[Transparency through data](https://www.youtube.com/watch?v=zznwKCifC1A) (2017)\"}\n\n             {:name        \"Dave Martin\"\n              :image       \"imgs/giants/dave-martin.jpeg\"\n              :description \"Dave started the development of [Willa](https://github.com/DaveWM/willa), a data-driven way to develop Kafka Topologies.\n\n[Kafka Streams, the Clojure way](https://blog.davemartin.me/posts/kafka-streams-the-clojure-way/) (2019)\"}\n\n             {:name        \"Aysylu Greenberg\"\n              :image       \"imgs/giants/aysylu-greenberg.jpeg\"\n              :description \"Aysylu developed [Loom](https://github.com/aysylu/loom), a library for working with 'graph data' in Clojure.\n\n[Loom and Graphs in Clojure](https://www.youtube.com/watch?v=wEEutxTYQQU) (2014)\n\n[+ Loom years 2](https://www.youtube.com/watch?v=eadPwx-bVS8) (2016)\"}\n\n             {:name        \"Stuart Sierra\"\n              :image       \"imgs/giants/stuart-sierra.jpg\"\n              :description \"Stuart is the developer of [Component](https://github.com/stuartsierra/component), a Clojure library for working with stateful-infrastructure within an application.\n\n[Components Just Enough Structure](https://www.youtube.com/watch?v=13cmHf_kt-Q) (2014)]\"}\n\n             {:name        \"Mark Nutter\"\n              :image       \"imgs/giants/mark-nutter.jpeg\"\n              :description \"Mark developed [Woolybear](https://github.com/manutter51/woolybear) as an experiment in Atomic Design for Clojurescript UIs.\n\n[Re-usable GUI Components with Re-frame and Atomic Design](https://www.youtube.com/watch?v=JCY_cHzklRs) (2018)\"}\n\n             {:name        \"Sean Corfield\"\n              :image       \"imgs/giants/sean-corfield.jpeg\"\n              :description \"Sean is a professional Clojure developer. He maintains a number of OSS libraries for the Clojure community\n              including [next.jdbc](https://github.com/seancorfield/next-jdbc).\n\n[Real World Clojure Doing Boring Stuff With An Exciting Language](https://www.youtube.com/watch?v=75U3W8Y2zzw) (2020)\n\n[REPL Driven Development, Clojure's Superpower ](https://www.youtube.com/watch?v=gIoadGfm5T8) (2021)\"}\n\n             {:name        \"Mark Bastian\"\n              :image       \"imgs/giants/mark-bastian.jpg\"\n              :description \"Mark is a software developer and has presented at several Clojure conferences.\n\n[Bottom Up vs Top Down Design in Clojure](https://www.youtube.com/watch?v=Tb823aqgX_0) (2015)\n\n[Defeating the Four Horsemen of the Coding Apocalypse](https://www.youtube.com/watch?v=jh4hMAvygjk) (2019)]\"}\n\n             {:name        \"Mark Engelberg\"\n              :image       \"imgs/giants/mark-engleberg.jpg\"\n              :description \"Mark works with his son Alex, and the two have developed a number of useful tools\n              for the Clojure community, including [rolling-stones]() and [loco](https://github.com/aengelberg/loco).\n\n[Solving Problems with Automata](https://www.youtube.com/watch?v=AEhULv4ruL4) (2015)]\n\n[Solving Problems Declaratively](https://www.youtube.com/watch?v=TA9DBG8x-ys) (2017)\"}\n\n             {:name        \"Alex Engelberg\"\n              :image       \"imgs/giants/alex-engelberg.jpg\"\n              :description \"Alex works with his father Mark, and the two have developed a number of useful tools\n              for the Clojure community, including [rolling-stones]() and [loco](https://github.com/aengelberg/loco).\n\n[Solving Problems with Automata](https://www.youtube.com/watch?v=AEhULv4ruL4) (2015)]\"}\n\n             {:name        \"Martin Kleppmann\"\n              :image       \"imgs/giants/martin-kleppmann.jpg\"\n              :description \"Martin is one of the original developers of [Kafka](https://kafka.apache.org), based upon his work with\n              [Apache Samza](https://samza.apache.org), while at Linkedin.\n\n[Turning the database inside out with Apache Samza](https://www.youtube.com/watch?v=fU9hR3kiOK0) (2014)\n\n[Transactions: myths, surprises and opportunities](https://www.youtube.com/watch?v=5ZjhNTM8XU8) (2015)\"}\n\n             {:name        \"Thomas Heller\"\n              :image       \"imgs/giants/thomas-heller.jpeg\"\n              :description \"Thomas is the developer and maintainer of the [Shadow-Cljs](https://github.com/thheller/shadow-cljs) build tool.\n\n[shadow-cljs with Thomas Heller (podcast)](https://www.listennotes.com/podcasts/clojurestream/s3-e3-shadow-cljs-with-hE6kaKgzCSJ/) (2020)\"}\n\n             {:name        \"Mike Thompson\"\n              :image       \"\"\n              :description \"Mike is the \\\"face\\\" of [Re-frame](https://github.com/Day8/re-frame) his employer, Day8\n              also build the [Re-com](https://github.com/Day8/re-com) UI library.\n\n[re-frame with Mike Thompson (podcast)](https://www.listennotes.com/podcasts/clojurestream/s4-e3-re-frame-with-mike-kw5eNt0HWAh/) (2020)\"}\n\n             {:name        \"Eric Normand\"\n              :image       \"imgs/giants/eric-normand.jpeg\"\n              :description \"Eric is a Clojure trainer, writer, and lecturer. He runs [ericnormand.me](https://ericnormand.me).\n\n[Building composable abstractions](https://www.youtube.com/watch?v=jJIUoaIvD20) (2016)\n\n[All I needed for FP I learned in High School Algebra](https://www.youtube.com/watch?v=epT1xgxSpFU) (2017)\"}\n\n             {:name        \"Will Byrd\"\n              :image       \"imgs/giants/will-byrd.png\"\n              :description \"Will is a programming language researcher, and co-author of the [Reasoned Schemer](https://mitpress.mit.edu/books/reasoned-schemer) and\n              [miniKanren](http://minikanren.org).\n\n[Barliman: trying the halting problem backwards, blindfolded](https://www.youtube.com/watch?v=er_lLvkklsk) (2016)\n\n[The Most Beautiful Program Ever Written](https://www.youtube.com/watch?v=OyfBQmvr2Hc) (2017)\"}\n\n             {:name        \"Paul deGrandis\"\n              :image       \"imgs/giants/paul-degrandis.jpeg\"\n              :description \"Paul has worked for Cognitect and developed a data-driven approach to UI develop while\n              consulting for Consumer Reports.\n\n[Unlocking data-driven systems](https://www.youtube.com/watch?v=BNkYYYyfF48) (2014)\"}])\n\n\n(defn- personality\n  \"Returns a 'flippable' card for a 'person' to be presented on the 'Giants' page. Uses the\n  [react-ui-cards](https://github.com/nukeop/react-ui-cards) react component library, specifically\n  the [flipping card](https://github.com/nukeop/react-ui-cards#flipping-card)\n  variant (there are several provided by the library).\n\n  ---\n\n  - name : (string) the person's name\n  - description : (markdown string) whatever you want to say about this person, including things like hyperlinks\n  - image : (filepath) [optional] name of the file to show as an image (defaults to imgs/hammer-icon-16x16.png)\n  \"\n  [name description & [image]]\n  (log/info \"personality\" image)\n  [flippable/card\n   :style {:width 270 :height 400}\n   :front [:div {:style flippable/default-style}\n           [rc/v-box :src (rc/at)\n            :gap \"10px\"\n            :align :center\n            :justify :center\n            :children [[:figure.image {:style {:width \"200px\" :height \"200px\"}}\n                        ; see https://www.youtube.com/watch?v=4ALLynsZ0u0\n                        [:img {:style {:border-top-left-radius \"5rem\"\n                                       :border-bottom-right-radius \"5rem\"\n                                       :background \"#808080\"}\n                               :src (or (if (empty? image) nil image)\n                                        \"imgs/hammer-icon-16x16.png\")}]]\n                       [rc/gap :size \"15px\"]\n                       [:p.title.is-1.has-text-centered name]]]]\n   :back [:div {:style flippable/default-style}\n          [layout/section\n           [layout/markdown-block description]]]])\n\n\n(defn columns\n  \"Builds a react 'fragment' of Bulma [columns](), which have some number of\n  [column]() `div`s that each hold a ([[personality]]). Determines how many\n  `column` in each `columns` via the `row` parameter. Adds rows of columns\n  as needed.\n\n  ___\n\n  - people : (vector of entities) collection of hash-maps that define each person's data (see ([[personality]]))\n  - row : (integer) number of columns/cards ro put in each row.\n  \"\n  [people row]\n  (into [:<>]\n        (for [p (partition-all row people)]\n          (into [:div.columns.is-1]\n                (for [{:keys [name description image]} p]\n                  [:div.column\n                   [personality name description image]])))))\n\n\n(defn view []\n  [layout/page {:extra-classes :is-fluid}\n   [flex/flex-panel {:height \"85vh\"}\n    [flex/flex-top\n     [layout/page-header {:extra-classes :is-fluid}\n      ;[:h1.has-text-info \"'Giants'\"]\n      [layout/markdown-block \"It has been said that [\\\"we stand on the shoulders of giants\\\"](https://www.phrases.org.uk/meanings/268025.html).\n      The following people may not all qualify as 'giants', but we certainly have\n      looked to them for insight, inspiration, guidance, and general thoughtfulness.\"]]]\n\n\n    [columns people 5]]])\n\n\n"]}