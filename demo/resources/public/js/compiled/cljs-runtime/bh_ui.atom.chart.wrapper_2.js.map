{"version":3,"sources":["bh_ui/atom/chart/wrapper_2.cljs"],"mappings":"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","names":["taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","bh-ui.atom.chart.wrapper-2/component-panel","p__58538","map__58539","cljs.core/--destructure-map","cljs.core.get","seq58537","self__4852__auto__","cljs.core/seq","data","config-data","component-id","component*","local-config","params","d","bh-ui.utils.helpers/resolve-value","c","isAnimationActive?","bh-ui.utils/subscribe-local","bh-ui.utils.locals/update-local-values","l-c","local-subs","bh-ui.utils/build-subs","override-subs","cljs.core/deref","bh-ui.utils.locals/process-locals","subscriptions","bh-ui.utils/override-subs","input-params","cljs.core.assoc","cljs.core/empty?","re-com.core/alert-box","js/goog.DEBUG","cljs.core.reduce","cljs.core/into","bh-ui.atom.chart.wrapper-2/configurable-component-panel","p__58542","map__58543","seq58540","config","config-panel","data-panel","open?","reagent.core.atom","config-key","cljs.core.keyword","data-key","tab-panel","bh_ui.utils.path__GT_keyword","selected-tab","chart-events","bh-ui.utils/init-container-locals","G__58544","G__58545","re-com.core/v-box","re-com.core/h-box","bh-ui.atom.re-com.configure-toggle/configure-toggle","bh-ui.utils/chart-config","bh-ui.atom.chart.wrapper-2/base-chart","p__58548","map__58549","seq58547","container-id","id","not-configurable?","cljs.core/reset!","bh-ui.utils/dispatch-local"],"sourcesContent":["(ns bh-ui.atom.chart.wrapper-2\n  (:require [bh-ui.atom.re-com.configure-toggle :as ct]\n            [bh-ui.utils :as ui-utils]\n            [bh-ui.utils.helpers :as h]\n            [bh-ui.utils.locals :as l]\n            [re-com.core :as rc]\n            [reagent.core :as r]\n            [taoensso.timbre :as log]))\n\n\n(log/info \"bh-ui.atom.chart.wrapper-2\")\n\n\n(defn component-panel [& {:keys [data config-data component-id component* local-config] :as params}]\n  ;(log/info \"component-panel\" params)\n\n  (let [d                  (h/resolve-value data)\n        c                  (h/resolve-value config-data)\n        isAnimationActive? (ui-utils/subscribe-local component-id [:isAnimationActive])]\n\n    ;(log/info \"component-panel\" component-id\n    ;  \"// (data)\" data \"// (d)\" @d\n    ;  \"// (config-data)\" config-data \"// (c)\" @c)\n\n    ;(log/info \"component-panel (override)\" override-subs)\n\n    (fn []\n\n      (l/update-local-values component-id (local-config d))\n\n      (let [l-c           (local-config d)\n            local-subs    (ui-utils/build-subs component-id l-c)\n            override-subs (when config-data (l/process-locals [] nil @c))\n            subscriptions (if config-data\n                            (ui-utils/override-subs @c local-subs override-subs)\n                            local-subs)\n            input-params (assoc params :data @d\n                                       :isAnimationActive? isAnimationActive?\n                                       :subscriptions subscriptions)]\n\n        ;(log/info \"component-panel (render)\" @c\n          ;\"// (local-config)\" l-c\n         ;\"// (override)\" override-subs\n         ;\"// (subscriptions)\" subscriptions\n         ;\"// (local-subs)\" local-subs\n\n        (if (empty? @d)\n          [rc/alert-box :src (rc/at)\n           :alert-type :info\n           :style {:width \"100%\" :height \"100%\"}\n           :heading \"Waiting for data\"]\n\n          (reduce into [component*] (seq input-params)))))))\n\n\n(defn configurable-component-panel [& {:keys [data component-id\n                                              config local-config\n                                              config-panel data-panel] :as params}]\n\n  ;(log/info \"configurable-component-panel\" params)\n\n  (let [open?        (r/atom false)\n        config-key   (keyword component-id \"config\")\n        data-key     (keyword component-id \"data\")\n        tab-panel    (ui-utils/path->keyword component-id \"tab-panel\")\n        selected-tab (ui-utils/path->keyword component-id \"tab-panel.value\")\n        chart-events [config-key data-key tab-panel selected-tab]]\n\n    ;(log/info \"configurable-component\" component-id \"//\" data)\n\n    (ui-utils/init-container-locals component-id (config component-id (h/resolve-value data)))\n\n    (fn []\n      (let [d (h/resolve-value data)]\n\n        ;(log/info \"configurable-component (INNER)\" data \"//\" @d)\n\n        (l/update-local-values component-id (local-config d))\n\n        [rc/v-box :src (rc/at)\n         :class \"configurable-component-panel\"\n         :gap \"2px\"\n         :width \"100%\"\n         :height \"100%\"\n         :children [[rc/h-box :src (rc/at)\n                     :class \"chart-config-tools\"\n                     :justify :end\n                     :children [[ct/configure-toggle open?]]]\n                    [rc/h-box :src (rc/at)\n                     :class \"chart-itself\"\n                     :gap \"5px\"\n                     :width \"100%\"\n                     :height \"90%\"\n                     :children (if @open?\n                                 [[:div.chart-config-panel {:style {:width \"40%\" :height \"100%\"}}\n                                   [ui-utils/chart-config\n                                    chart-events\n                                    [data-panel d]\n                                    [config-panel d component-id]]]\n                                  [:div.chart-content {:style {:width \"60%\" :height \"100%\"}}\n                                   (reduce into [component-panel] (seq params))]]\n\n                                 [[:div.chart-content {:style {:width \"100%\" :height \"100%\"}}\n                                   (reduce into [component-panel] (seq params))]])]]]))))\n\n\n(defn base-chart [& {:keys [data component-id container-id\n                            config config-panel] :as params}]\n\n  ;(log/info \"base-chart\" params)\n\n  (let [id                (r/atom nil)\n        not-configurable? (nil? config-panel)\n        d                 (h/resolve-value data)\n        c                 (config component-id d)]\n\n    ;(log/info \"base-chart (let)\"\n    ;  component-id container-id\n    ;  \"//\" data \"//\" @d\n    ;  \"//\" not-configurable?)\n\n    (fn []\n      (when (nil? @id)\n        ;(log/info \"initializing\" component-id)\n        (reset! id component-id)\n        (ui-utils/init-container-locals @id c)\n        (ui-utils/dispatch-local @id [:container] container-id))\n\n      [:div.base-chart {:style {:width \"100%\" :height \"100%\"}}\n       (if not-configurable?\n         (reduce into [component-panel] (seq params))\n\n         (reduce into [configurable-component-panel] (seq params)))])))\n\n\n\n"]}