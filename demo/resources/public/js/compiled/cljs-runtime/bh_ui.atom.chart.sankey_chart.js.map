{"version":3,"sources":["bh_ui/atom/chart/sankey_chart.cljs"],"mappings":"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","names":["taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","bh-ui.atom.chart.sankey-chart/sample-data","bh-ui.utils.example-data/dag-data","bh-ui.atom.chart.sankey-chart/sample-config-data","bh-ui.utils.example-data/dag-config-data","bh-ui.atom.chart.sankey-chart/local-config","data","cljs.core.merge","cljs.core/deref","cljs.core.map_indexed","p__58943","map__58944","cljs.core/--destructure-map","cljs.core.get","idx","name","all","bh-ui.utils.color/get-color","cljs.core.into","bh-ui.atom.chart.sankey-chart/config","component-id","bh-ui.utils/default-pub-sub","cljs.core.keyword","bh-ui.atom.chart.sankey-chart/color-config","label","path","position","re-com.core/v-box","js/goog.DEBUG","re-com.core/line","bh-ui.atom.chart.utils/color-config","cljs.core.conj","bh-ui.atom.chart.sankey-chart/make-config","p__58945","map__58946","bh-ui.atom.chart.sankey-chart/config-panel","bh-ui.atom.chart.utils/tooltip","re-com.core/h-box","bh-ui.atom.chart.utils/text-config","bh-ui.atom.chart.utils/slider-config","bh-ui.utils/h-wrap","bh-ui.atom.chart.sankey-chart/source-code","bh-ui.atom.chart.sankey-chart/complex-node","subscriptions","containerWidth","props","map__58947","map__58948","x","y","width","height","index","value","cljs.core.js__GT_clj","isOut","reagent.core.as_element","js/shadow.js.shim.module$recharts.Layer","js/shadow.js.shim.module$recharts.Rectangle","bh-ui.utils/resolve-sub","bh-ui.atom.chart.sankey-chart/make-svg-string","sourceX","targetX","sourceY","targetY","sourceControlX","targetControlX","linkWidth","bh-ui.atom.chart.sankey-chart/color-source->white","payload","color-from","cljs.core.get_in","c-from","bh-ui.utils.color/hex->rgba","cljs.core.assoc","bh-ui.utils.color/rgba-map->js-function","c-to","bh-ui.atom.chart.sankey-chart/color-white->target","color-to","bh-ui.atom.chart.sankey-chart/color-source->target","c-mid","bh-ui.atom.chart.sankey-chart/complex-link","link-color-fn","map__58949","bh-ui.atom.chart.sankey-chart/->sankey","cljs.core.sort_by","cljs.core.map","p__58952","map__58953","source","target","link","p1__58950#","cljs.core.filter","cljs.core._EQ_","cljs.core/first","p1__58951#","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","bh-ui.atom.chart.sankey-chart/component*","p__58955","map__58956","seq58954","self__4852__auto__","cljs.core/seq","params","tooltip?","curve","cljs.core.subs","bh-ui.utils/subscribe-local","js/shadow.js.shim.module$recharts.ResponsiveContainer","js/shadow.js.shim.module$recharts.Sankey","cljs.core.partial","or__4253__auto__","js/shadow.js.shim.module$recharts.Tooltip","bh-ui.atom.chart.sankey-chart/component","p__58958","map__58959","seq58957","input-params","bh-ui.atom.chart.wrapper-2/component-panel","cljs.core.reduce","cljs.core/into","bh-ui.atom.chart.wrapper-2/base-chart","bh-ui.atom.chart.sankey-chart/meta-data","re-frame.core/dispatch-sync"],"sourcesContent":["(ns bh-ui.atom.chart.sankey-chart\n  (:require [bh-ui.atom.chart.utils :as utils]\n            [bh-ui.atom.chart.wrapper-2 :as wrapper]\n            [bh-ui.utils :as ui-utils]\n            [bh-ui.utils.color :as c]\n            [bh-ui.utils.color :as color]\n            [bh-ui.utils.example-data :as data]\n            [re-frame.core :as rf]\n            [\"recharts\" :refer [ResponsiveContainer Sankey Tooltip Layer Rectangle Layer]]\n            [re-com.core :as rc]\n            [reagent.core :as r]\n            [taoensso.timbre :as log]))\n\n\n(log/info \"bh-ui.atom.chart.sankey-chart-2\")\n\n\n(def sample-data\n  \"the Sankey Chart works best with \\\"directed acyclic graph data\\\" so we return the dag-data from utils\"\n  data/dag-data)\n\n\n(def sample-config-data data/dag-config-data)\n\n\n(defn local-config [data]\n  ;(log/info \"local-config\" @data)\n\n  (merge\n    {:link    {:curve 0.5}\n     :tooltip {:include true}}\n    (->> @data\n      :nodes\n      (map-indexed (fn [idx {:keys [name] :as all}]\n                     {name {:key     all\n                            :include true\n                            :fill    (color/get-color idx)\n                            :stroke  (color/get-color idx)}}))\n      (into {}))))\n\n\n(defn config [component-id data]\n  ;(log/info \"config\" component-id data)\n  (merge\n    ui-utils/default-pub-sub\n    (local-config data)\n    {:tab-panel {:value     (keyword component-id \"config\")\n                 :data-path [:containers (keyword component-id) :tab-panel]}}))\n\n\n(defn- color-config [component-id label path position]\n  [rc/v-box :src (rc/at)\n   :gap \"5px\"\n   :children [[:code label]\n              [rc/line :size \"2px\"]\n              [utils/color-config component-id \":fill\" (conj path :fill) position]\n              [utils/color-config component-id \":stroke\" (conj path :stroke) position]]])\n\n\n(defn- make-config [component-id data]\n  ;(log/info \"make-config\" component-id \"//\" @data)\n\n  (->> @data\n    :nodes\n    (map-indexed (fn [idx {:keys [name]}]\n                   [color-config component-id name [name] :below-right]))\n    (into [])))\n\n\n(defn config-panel [data component-id]\n  ;(log/info \"config-panel\" data \"//\" component-id)\n\n  [rc/v-box :src (rc/at)\n   :gap \"5px\"\n   :children [[utils/tooltip component-id]\n              [rc/line :size \"2px\"]\n              [rc/h-box :src (rc/at)\n               :gap \"5px\"\n               :children [[utils/text-config component-id \":curve\" [:link :curve]]\n                          [utils/slider-config component-id 0 1 0.1 [:link :curve]]]]\n              [rc/line :size \"2px\"]\n              [rc/h-box :src (rc/at)\n               :width \"100%\"\n               :height \"100%\"\n               :style ui-utils/h-wrap\n               :gap \"10px\"\n               :children (make-config component-id data)]]])\n\n\n(def source-code '[:> Sankey\n                   {:width         500 :height 400\n                    :node          (partial complex-node 500 @fill)\n                    :data          @data\n                    :margin        {:top 20 :bottom 20 :left 20 :right 20}\n                    :nodeWidth     10\n                    :nodePadding   60\n                    :linkCurvature @curve\n                    :iterations    64\n                    :link          {:stroke @stroke}}\n                   (when @tooltip? [:> Tooltip])])\n\n\n(defn- complex-node\n  \"build the reagent/react components (as hiccup) needed to draw the `node` parts (rectangles)\n  and labels of the diagram.\n\n  ---\n\n  - containerWidth : (number) with of the container, used to determine if the label should be to the left or right of the rectangle\n  - fill : (color) color to fill the rectangle\n  - stroke : (color) color to use as the outline (stroke) of the rectangle\n  - props : (has-map) additional props sent to the reagent/react component by the diagram itself\n\n> See [here](https://cljdoc.org/d/reagent/reagent/1.1.0/doc/tutorials/react-features#hooks)\n> for details on how the Reagent/React interop work for this\n\"\n  [subscriptions containerWidth props]\n  (let [{x                           \"x\"\n         y                           \"y\"\n         width                       \"width\"\n         height                      \"height\"\n         index                       \"index\"\n         {name \"name\" value \"value\"} \"payload\"} (js->clj props)\n        isOut  (< containerWidth (+ x width 30 6))]\n\n    ;(log/info \"complex-node\" name containerWidth props)\n\n    (r/as-element\n      [:> Layer {:key (str \"CustomNode$\" index)}\n       [:> Rectangle {:x      x :y y :width width :height height\n                      :fill   (ui-utils/resolve-sub subscriptions [name :fill])\n                      :stroke (ui-utils/resolve-sub subscriptions [name :stroke])}]\n       [:text {:textAnchor (if isOut \"end\" \"start\")\n               :x          (if isOut (- x 6) (+ x width 6))\n               :y          (+ y (/ height 2))\n               :fontSize   14\n               :stroke     \"#333\"}\n        name]\n       [:text {:textAnchor    (if isOut \"end\" \"start\")\n               :x             (if isOut (- x 6) (+ x width 6))\n               :y             (+ y 13 (/ height 2))\n               :fontSize      12\n               :stroke        \"#333\"\n               :strokeOpacity 0.5}\n        (str value \"k\")]])))\n\n\n(defn- make-svg-string [sourceX, targetX,\n                        sourceY, targetY,\n                        sourceControlX, targetControlX,\n                        linkWidth]\n  (str \"M\" sourceX \", \" (+ sourceY (/ linkWidth 2))\n\n    \"C\" sourceControlX \", \" (+ sourceY (/ linkWidth 2)) \", \"\n    targetControlX \", \" (+ targetY (/ linkWidth 2)) \", \"\n    targetX \", \" (+ targetY (/ linkWidth 2))\n\n    \"L\" targetX \", \" (- targetY (/ linkWidth 2)) \", \"\n\n    \"C\" targetControlX \", \" (- targetY (/ linkWidth 2)) \", \"\n    sourceControlX \", \" (- sourceY (/ linkWidth 2)) \",\"\n    sourceX \", \" (- sourceY (/ linkWidth 2))\n\n    \"Z\"))\n\n\n(defn color-source->white [subscriptions index payload]\n  (let [color-from (ui-utils/resolve-sub subscriptions [(get-in payload [:source :name]) :fill])\n        c-from     (-> color-from\n                     c/hex->rgba\n                     (assoc :a 0.5)\n                     c/rgba-map->js-function)\n        c-to       (-> color-from\n                     c/hex->rgba\n                     (assoc :a 0.05)\n                     c/rgba-map->js-function)]\n    [:defs\n     [:linearGradient {:id (str \"linkGradient$\" index)}\n      [:stop {:offset \"0%\" :stopColor c-from}]\n      [:stop {:offset \"100%\" :stopColor c-to}]]]))\n\n\n(defn color-white->target [subscriptions index payload]\n  (let [color-to (ui-utils/resolve-sub subscriptions [(get-in payload [:target :name]) :fill])\n        c-from   (-> color-to\n                   c/hex->rgba\n                   (assoc :a 0.05)\n                   c/rgba-map->js-function)\n        c-to     (-> color-to\n                   c/hex->rgba\n                   (assoc :a 0.5)\n                   c/rgba-map->js-function)]\n    [:defs\n     [:linearGradient {:id (str \"linkGradient$\" index)}\n      [:stop {:offset \"0%\" :stopColor c-from}]\n      [:stop {:offset \"100%\" :stopColor c-to}]]]))\n\n\n(defn color-source->target [subscriptions index payload]\n  (let [color-from (ui-utils/resolve-sub subscriptions [(get-in payload [:source :name]) :fill])\n        color-to   (ui-utils/resolve-sub subscriptions [(get-in payload [:target :name]) :fill])\n        c-from     (-> color-from\n                     c/hex->rgba\n                     (assoc :a 0.5)\n                     c/rgba-map->js-function)\n        c-mid      (-> color-from\n                     c/hex->rgba\n                     (assoc :a 0.2)\n                     c/rgba-map->js-function)\n        c-to       (-> color-to\n                     c/hex->rgba\n                     (assoc :a 0.3)\n                     c/rgba-map->js-function)]\n    [:defs\n     [:linearGradient {:id (str \"linkGradient$\" index)}\n      [:stop {:offset \"0%\" :stopColor c-from}]\n      [:stop {:offset \"30%\" :stopColor c-mid}]\n      [:stop {:offset \"100%\" :stopColor c-to}]]]))\n\n\n(defn- complex-link [subscriptions link-color-fn props]\n  (let [{:keys [sourceX, targetX,\n                sourceY, targetY,\n                sourceControlX, targetControlX,\n                linkWidth,\n                index, payload]} (js->clj props :keywordize-keys true)]\n\n    ;(log/info \"complex-link (props)\" (js->clj props :keywordize-keys true))\n\n    (r/as-element\n      [:> Layer {:key (str \"CustomLink$\" index)}\n\n       (link-color-fn subscriptions index payload)\n\n       [:path {:d           (make-svg-string\n                              sourceX, targetX,\n                              sourceY, targetY,\n                              sourceControlX, targetControlX,\n                              linkWidth)\n               ;:fill        c-from\n               :fill        (str \"url(#linkGradient$\" index \")\")\n               :strokeWidth 0}]])))\n\n\n(defn- ->sankey [data]\n  (assoc data\n    :nodes (->> data :nodes (sort-by :index) (into []))\n    :links (->> data\n             :links\n             (map (fn [{:keys [source target] :as link}]\n                    (assoc link :source (->> data\n                                          :nodes\n                                          (filter #(= (:name %) source))\n                                          first\n                                          :index)\n                                :target (->> data\n                                          :nodes\n                                          (filter #(= (:name %) target))\n                                          first\n                                          :index)))))))\n\n\n(defn- component* [& {:keys [data component-id link-color-fn subscriptions]\n                      :as   params}]\n\n  ;(log/info \"component-star\" component-id\n  ;\"//\" data\n  ;\"//\" subscriptions\n  ;\"//\" link-color-fn\n\n  (let [tooltip?    (ui-utils/resolve-sub subscriptions [:tooltip :include])\n        curve       (ui-utils/resolve-sub subscriptions [:link :curve])]\n\n    ; NOTE: super hack here!!! we need the config-data change to force a re-render\n    ; because the sankey only redraws the nodes and links when the cursor moves over them\n    ; otherwise\n    [:div {:class\n           (subs (str @(ui-utils/subscribe-local component-id [])) 0 10)\n           :style {:width \"100%\" :height \"100%\"}}\n\n     [:> ResponsiveContainer\n      [:> Sankey\n       {:node          (partial complex-node subscriptions 700)\n        :data          (->sankey data)\n        :margin        {:top 20 :bottom 20 :left 20 :right 20}\n        :nodeWidth     10\n        :nodePadding   60\n        :linkCurvature curve\n        :iterations    64\n        :link          (partial complex-link subscriptions (or link-color-fn color-source->white))}\n       (when tooltip? [:> Tooltip])]]]))\n\n\n(defn component [& {:keys [component-id] :as params}]\n\n  ;(log/info \"component\" params)\n\n  (let [input-params (assoc params :component-panel wrapper/component-panel\n                                   :config config\n                                   :local-config local-config\n                                   :component* component*)]\n    (reduce into [wrapper/base-chart] input-params)))\n\n\n(def meta-data {:rechart/sankey {:component component\n                                 ;:configurable-component configurable-component\n                                 :ports     {:data   :port/sink\n                                             :config :port/sink}}})\n\n\n(rf/dispatch-sync [:register-meta meta-data])\n\n\n\n\n\n\n(comment\n  (def component-id \"sankey-chart-demo\")\n\n  ())"]}