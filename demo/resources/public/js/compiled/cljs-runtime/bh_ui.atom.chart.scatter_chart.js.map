{"version":3,"sources":["bh_ui/atom/chart/scatter_chart.cljs"],"mappings":"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","names":["taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","bh-ui.atom.chart.scatter-chart/sample-data","bh-ui.utils.example-data/meta-tabular-data","bh-ui.atom.chart.scatter-chart/sample-config-data","cljs.core.merge","bh-ui.utils.example-data/tabular-row-config-data","bh-ui.atom.chart.scatter-chart/random-data","bh-ui.utils.example-data/random-meta-positive-tabular-data","bh-ui.atom.chart.scatter-chart/local-config","data","d","cljs.core/deref","fields","cljs.core.get_in","cljs.core.filter","p__58966","vec__58967","cljs.core.nth","k","v","cljs.core._EQ_","cljs.core/keys","m","cljs.core/first","p__58970","vec__58971","cljs.core.map_indexed","idx","entry","bh_ui.utils.path__GT_keyword","cljs.core/cycle","bh-ui.utils.color/default-stroke-fill-colors","cljs.core.into","bh-ui.atom.chart.scatter-chart/config","component-id","bh-ui.utils/default-pub-sub","bh-ui.atom.chart.utils/default-config","bh-ui.utils/config-tab-panel","bh-ui.atom.chart.scatter-chart/cell-config","label","path","position","p","re-com.core/h-box","bh-ui.atom.chart.utils/boolean-config","cljs.core.conj","bh-ui.atom.chart.utils/color-config-text","bh-ui.atom.chart.scatter-chart/make-cell-config","p__58974","map__58975","cljs.core/--destructure-map","cljs.core.get","name","item","bh-ui.atom.chart.scatter-chart/config-panel","re-com.core/v-box","js/goog.DEBUG","bh-ui.atom.chart.utils/non-gridded-chart-config","re-com.core/line","bh-ui.atom.chart.utils/option","bh-ui.atom.chart.utils/column-picker","re-com.core/label","cljs.core/vec","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","cljs.core.apply","cljs.core/array-map","bh-ui.atom.chart.scatter-chart/source-code","bh-ui.atom.chart.scatter-chart/make-scatter","subscriptions","ret","cljs.core.map","p__58976","map__58977","bh-ui.utils/resolve-sub","js/shadow.js.shim.module$recharts.Scatter","or__4253__auto__","bh-ui.utils.color/get-color","cljs.core.remove","cljs.core/empty?","bh-ui.atom.chart.scatter-chart/get-range-across-fields","column","all-values","p1__58979#","cljs.core.distinct","domainMax","cljs.core/max","domainMin","cljs.core/min","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","bh-ui.atom.chart.scatter-chart/component*","p__58985","map__58987","seq58983","self__4852__auto__","container-id","isAnimationActive?","params","x","y","z","domain","js/shadow.js.shim.module$recharts.ResponsiveContainer","js/shadow.js.shim.module$recharts.ScatterChart","bh-ui.atom.chart.utils/chart-grid","js/shadow.js.shim.module$recharts.Tooltip","js/shadow.js.shim.module$recharts.XAxis","cljs.core/name","js/shadow.js.shim.module$recharts.YAxis","js/shadow.js.shim.module$recharts.ZAxis","bh-ui.atom.chart.scatter-chart/component","p__58990","map__58991","seq58989","config-data","data-panel","config-panel","bh-ui.atom.chart.wrapper-2/base-chart","bh-ui.atom.chart.wrapper-2/component-panel","bh-ui.atom.chart.scatter-chart/meta-data","re-frame.core/dispatch-sync"],"sourcesContent":["(ns bh-ui.atom.chart.scatter-chart\n  (:require [bh-ui.atom.chart.utils :as utils]\n            [bh-ui.atom.chart.wrapper-2 :as wrapper]\n            [bh-ui.utils :as ui-utils]\n            [bh-ui.utils.color :as color]\n            [bh-ui.utils.example-data :as example-data]\n            [re-frame.core :as rf]\n            [re-com.core :as rc]\n            [taoensso.timbre :as log]\n            [\"recharts\" :refer [ResponsiveContainer ScatterChart Scatter Brush\n                                XAxis YAxis ZAxis Tooltip]]))\n\n\n(log/info \"bh-ui.atom.chart.scatter-chart\")\n\n\n(def sample-data example-data/meta-tabular-data)\n(def sample-config-data (merge example-data/tabular-row-config-data\n                          {:values {:keys [:Page-A :Page-B :Page-C\n                                           :Page-D :Page-E :Page-F :Page-G]\n                                    :x :uv :y :pv :z :amt}}))\n(def random-data example-data/random-meta-positive-tabular-data)\n\n\n(defn local-config [data]\n  (let [d      (:data @data)\n        fields (get-in @data [:metadata :fields])]\n    (merge\n      (->> fields\n        (filter (fn [[k v]] (= :string v)))\n        keys\n        ((fn [m]\n           {:name {:keys m :chosen (first m)}})))\n\n      (->> fields\n        (filter (fn [[k v]] (= :number v)))\n        keys\n        ((fn [m]\n           {:values {:keys m :x (nth m 0) :y (nth m 1) :z (nth m 2)}})))\n\n      (->> d\n        (map-indexed (fn [idx entry]\n                       {(ui-utils/path->keyword (:name entry))\n                        {:name    (:name entry)\n                         :include true\n                         :color   (nth (cycle color/default-stroke-fill-colors) idx)}}))\n        (into {})))))\n\n\n(defn config\n  \"constructs the configuration panel for the chart's configurable properties. This is specific to\n  this being a line-chart component (see [[local-config]]).\n\n  Merges together the configuration needed for:\n\n  1. line charts\n  2. pub/sub between components of a container\n  3. `default-config` for all Rechart-based types\n  4. the `tab-panel` for view/edit configuration properties and data\n  5. sets properties of the default-config (local config properties are just set inside [[local-config]])\n  6. sets meta-data for properties this component publishes (`:pub`) or subscribes (`:sub`)\n\n  ---\n\n  - component-id : (string) unique id of the chart\n  \"\n  [component-id data]\n  ;(log/info \"scatter config\" data)\n  (->\n    ui-utils/default-pub-sub\n    (merge\n      utils/default-config\n      (ui-utils/config-tab-panel component-id)\n      (local-config data))))\n\n\n(defn- cell-config [component-id label path position]\n  (let [p (ui-utils/path->keyword path)]\n    ;(log/info \"cell-config\" component-id \"//\" label \"//\" p)\n    [rc/h-box\n     :gap \"5px\"\n     :children [[utils/boolean-config component-id \"\" (conj [p] :include)]\n                [utils/color-config-text component-id label (conj [p] :color) :right-above]]]))\n\n\n(defn- make-cell-config [component-id data]\n  (->> (:data @data)\n    (map-indexed (fn [idx {:keys [name] :as item}]\n                   [cell-config component-id name [name] :above-right]))\n    (into [:<>])))\n\n\n(defn config-panel [data component-id]\n  ;(log/info \"scatter config-panel\" component-id \"//\" data)\n\n  [rc/v-box :src (rc/at)\n   :gap \"10px\"\n   :width \"400px\"\n   :style {:padding          \"15px\"\n           :border-top       \"1px solid #DDD\"\n           :background-color \"#f7f7f7\"}\n   :children [[utils/non-gridded-chart-config @data component-id]\n              [rc/line :src (rc/at) :size \"2px\"]\n              [utils/option component-id \":name\" [:name]]\n              [rc/line :src (rc/at) :size \"2px\"]\n              [utils/column-picker data component-id \":x\" [:values :x]]\n              [utils/column-picker data component-id \":y\" [:values :y]]\n              [utils/column-picker data component-id \":z\" [:values :z]]\n              [rc/line :src (rc/at) :size \"2px\"]\n              [rc/v-box :src (rc/at)\n               :gap \"5px\"\n               :children [[rc/label :src (rc/at) :label \"Colors\"]\n                          (make-cell-config component-id data)]]]])\n\n\n(def source-code `[:> ScatterChart\n\n                   (utils/chart-grid component-id {})\n\n                   [:> Tooltip]\n                   [:> XAxis {:type \"number\" :dataKey (name x)}]\n                   [:> YAxis {:type \"number\" :dataKey (name y)}]\n                   [:> ZAxis {:type \"number\" :dataKey (name z)\n                              :range (get-range-across-fields data z)}\n\n                    [:> Scatter\n                     {:name name\n                      :fill (or (ui-utils/resolve-sub subscriptions [name :color])\n                              (color/get-color 0))\n                      :data [item]}]]])\n\n\n(defn- make-scatter [data subscriptions]\n  (let [ret (->> data\n              :data\n              (map (fn [{:keys [name] :as item}]\n                     (if (ui-utils/resolve-sub subscriptions [name :include])\n                       [:> Scatter\n                        {:name name\n                         :fill (or (ui-utils/resolve-sub subscriptions [name :color])\n                                 (color/get-color 0))\n                         :data [item]}]\n                       [])))\n              (remove empty?)\n              (into [:<>]))]\n\n    ;(log/info \"make-scatter\" values \"//\" ret)\n    ret))\n\n\n(defn- get-range-across-fields [data column]\n  (let [all-values  (->> data\n                      :data\n                      (map #(get % column))\n                      (distinct))\n        domainMax   (apply max all-values)\n        domainMin   (apply min all-values)]\n\n    ;(log/info \"get-range-across-fields\" column domainMin domainMax)\n\n    [domainMin domainMax]))\n\n\n(comment\n  (def data sample-data)\n  (def column :amt)\n\n  (->> data\n    :data\n    (map #(get % column))\n    (distinct))\n\n  ())\n\n\n(defn- component*\n  \"the chart to draw, taking cues from the settings of the configuration panel\n\n  ---\n\n  - data : (atom) any data shown by the component's ui\n  - component-id : (string) unique identifier for this specific widget instance\n  \"\n  [& {:keys [data component-id container-id\n             subscriptions isAnimationActive?]\n      :as   params}]\n\n  ;(log/info \"component*\" data)\n\n  (let [x      (ui-utils/resolve-sub subscriptions [:values :x])\n        y      (ui-utils/resolve-sub subscriptions [:values :y])\n        z      (ui-utils/resolve-sub subscriptions [:values :z])\n        domain ()]\n\n    [:> ResponsiveContainer\n     [:> ScatterChart\n\n      (utils/chart-grid component-id {})\n\n      [:> Tooltip]\n      [:> XAxis {:type \"number\" :dataKey (name x)}]\n      [:> YAxis {:type \"number\" :dataKey (name y)}]\n      [:> ZAxis {:type \"number\" :dataKey (name z)\n                 :range (get-range-across-fields data z)}]\n\n      (make-scatter data subscriptions)]]))\n\n(defn component [& {:keys [data config-data component-id container-id\n                           data-panel config-panel] :as params}]\n\n  ;(log/info \"component\" params)\n\n  [wrapper/base-chart\n   :data data\n   :config-data config-data\n   :component-id component-id\n   :container-id container-id\n   :component* component*\n   :component-panel wrapper/component-panel\n   :data-panel data-panel\n   :config-panel config-panel\n   :config config\n   :local-config local-config])\n\n\n(def meta-data {:rechart/scatter {:component component\n                                  ;:configurable-component configurable-component\n                                  :ports     {:data   :port/sink\n                                              :config :port/sink}}})\n\n\n(rf/dispatch-sync [:register-meta meta-data])\n\n\n\n\n\n\n(comment\n  (def data sample-data)\n\n  (->> @data\n    (map #(-> % (dissoc :name)))\n    (map #(->> % vals (zipmap [:x :y :z]))))\n\n\n  ())\n\n\n(comment\n  (def data [{:name \"page-1\" :fill \"#ffffff\" :uv 4000 :pv 2400 :amt 2400}\n             {:name \"page-2\" :fill \"#00ff00\" :uv 3000 :pv 1398 :amt 2210}])\n\n  (first data)\n\n\n  (map (fn [{:keys [x]}] {:x x}) data)\n\n  (map (fn [{:keys [name]}] {:x name}) data)\n\n  (map (fn [{:keys [name fill]}] [:> Scatter {:name name :fill fill}]) data)\n\n  (map (fn [{:keys [name fill uv pv amt]}] [:> Scatter {:name name :fill fill :data {:uv uv :pv pv :amt amt}}]) data)\n\n\n  (into [:<>] (map (fn [{:keys [name fill uv pv amt]}] [:> Scatter {:name name :fill fill :data {:uv uv :pv pv :amt amt}}]) data))\n\n\n  ())\n\n\n(comment\n  (def item {:name \"name\" :uv \"uv\" :pv \"pv\" :tv \"tv\"})\n  (def values '(:uv :pv))\n\n  (select-keys item values)\n\n  ())\n\n\n\n"]}