{"version":3,"sources":["bh_ui/atom/chart/bar_chart.cljs"],"mappings":"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","names":["taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","bh-ui.atom.chart.bar-chart/source-code","bh-ui.atom.chart.bar-chart/sample-data","bh-ui.utils.example-data/meta-tabular-data","bh-ui.atom.chart.bar-chart/sample-config-data","bh-ui.utils.example-data/tabular-column-config-data","bh-ui.atom.chart.bar-chart/random-data","bh-ui.utils.example-data/random-meta-tabular-data","bh-ui.atom.chart.bar-chart/local-config","data","ret","cljs.core.merge","cljs.core/deref","cljs.core.get_in","cljs.core.filter","p__58723","vec__58724","cljs.core.nth","k","v","cljs.core._EQ_","cljs.core/keys","cljs.core.map_indexed","idx","a","bh-ui.utils.color/get-color","cljs.core.into","bh-ui.atom.chart.bar-chart/config","component-id","bh-ui.utils/default-pub-sub","bh-ui.atom.chart.utils/default-config","cljs.core.keyword","cljs.core/assoc-in","bh-ui.atom.chart.bar-chart/bar-config","label","path","position","re-com.core/v-box","js/goog.DEBUG","bh-ui.atom.chart.utils/boolean-config","cljs.core.conj","bh-ui.atom.chart.utils/color-config","bh-ui.atom.chart.utils/text-config","bh-ui.atom.chart.bar-chart/make-bar-config","p__58727","vec__58728","bh-ui.atom.chart.bar-chart/config-panel","bh-ui.atom.chart.utils/standard-chart-config","re-com.core/line","re-com.core/h-box","bh-ui.utils/h-wrap","bh-ui.atom.chart.bar-chart/make-bar-display","subscriptions","isAnimationActive?","p__58731","vec__58732","_","cljs.core.map","bh-ui.utils/resolve-sub","js/shadow.js.shim.module$recharts.Bar","cljs.core/seq","cljs.core.remove","cljs.core/empty?","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","bh-ui.atom.chart.bar-chart/component*","p__58736","map__58737","cljs.core/--destructure-map","cljs.core.get","seq58735","self__4852__auto__","container-id","params","d","js/shadow.js.shim.module$recharts.ResponsiveContainer","js/shadow.js.shim.module$recharts.BarChart","bh-ui.atom.chart.utils/standard-chart-components","js/shadow.js.shim.module$recharts.Brush","bh-ui.atom.chart.bar-chart/component","p__58739","map__58740","seq58738","input-params","cljs.core.assoc","bh-ui.atom.chart.wrapper-2/component-panel","cljs.core.reduce","cljs.core/into","bh-ui.atom.chart.wrapper-2/base-chart","bh-ui.atom.chart.bar-chart/meta-data","re-frame.core/dispatch-sync"],"sourcesContent":["(ns bh-ui.atom.chart.bar-chart\n  (:require [bh-ui.atom.chart.utils :as utils]\n            [bh-ui.atom.re-com.configure-toggle :as ct]\n            [bh-ui.utils :as ui-utils]\n            [bh-ui.utils.color :as color]\n            [bh-ui.utils.example-data :as example-data]\n            [bh-ui.utils.helpers :as h]\n            [bh-ui.utils.locals :as l]\n            [bh-ui.atom.chart.wrapper-2 :as wrapper]\n            [re-frame.core :as rf]\n            [re-com.core :as rc]\n            [reagent.core :as r]\n            [taoensso.timbre :as log]\n            [woolybear.ad.layout :as layout]\n            [\"recharts\" :refer [ResponsiveContainer BarChart Bar Brush\n                                XAxis YAxis CartesianGrid Tooltip Legend]]))\n\n\n(log/info \"bh-ui.atom.chart.bar-chart\")\n\n\n(def source-code '[:> BarChart {:data d}\n                   (utils/standard-chart-components component-id {})\n                   [:> Bar (merge {:type              \"monotone\" :dataKey a\n                                   :isAnimationActive @isAnimationActive?\n                                   :stroke            (ui-utils/resolve-sub subscriptions [a :stroke])\n                                   :fill              (ui-utils/resolve-sub subscriptions [a :fill])}\n                                  (when (seq (ui-utils/resolve-sub subscriptions [a :stackId]))\n                                    {:stackId (ui-utils/resolve-sub subscriptions [a :stackId])}))]])\n\n\n(def sample-data example-data/meta-tabular-data)\n(def sample-config-data example-data/tabular-column-config-data)\n(def random-data example-data/random-meta-tabular-data)\n\n\n(defn local-config [data]\n\n  ;(log/info \"local-config\" @data)\n\n  (let [ret (merge\n              {:brush false}\n              (->> (get-in @data [:metadata :fields])\n                (filter (fn [[k v]] (= :number v)))\n                keys\n                (map-indexed (fn [idx a]\n                               {a {:include true\n                                   :fill    (color/get-color idx)\n                                   :stackId \"\"}}))\n                (into {})))]\n    ;(log/info \"local-config\" ret)\n    ret))\n\n\n(defn config [component-id data]\n  (-> ui-utils/default-pub-sub\n    (merge\n      utils/default-config\n      {:tab-panel {:value     (keyword component-id \"config\")\n                   :data-path [:containers (keyword component-id) :tab-panel]}}\n      (local-config data))\n    (assoc-in [:x-axis :dataKey] :name)))\n\n\n(defn- bar-config [component-id label path position]\n  [rc/v-box :src (rc/at)\n   :gap \"5px\"\n   :children [[utils/boolean-config component-id label (conj path :include)]\n              [utils/color-config component-id \":fill\" (conj path :fill) position]\n              [utils/text-config component-id \":stackId\" (conj path :stackId)]]])\n\n\n(defn- make-bar-config [component-id data]\n  ;(log/info \"make-bar-config\" component-id \"//\" @data)\n\n  (->> (get-in @data [:metadata :fields])\n    (filter (fn [[k v]] (= :number v)))\n    keys\n    (map-indexed (fn [idx a]\n                   [bar-config component-id a [a] :above-right]))\n    (into [])))\n\n\n(defn config-panel [data component-id]\n  ;(log/info \"config-panel\" component-id \"//\" @data)\n\n  [rc/v-box :src (rc/at)\n   :gap \"10px\"\n   :width \"100%\"\n   :height \"100%\"\n   :style {:padding          \"5px\"\n           :border-top       \"1px solid #DDD\"\n           :background-color \"#f7f7f7\"}\n   :children [[utils/standard-chart-config data component-id]\n              [rc/line :src (rc/at) :size \"2px\"]\n              [rc/h-box :src (rc/at)\n               :width \"100%\"\n               :height \"100%\"\n               :style ui-utils/h-wrap\n               :gap \"10px\"\n               :children (make-bar-config component-id data)]\n              [rc/line :src (rc/at) :size \"2px\"]\n              [utils/boolean-config component-id \":brush?\" [:brush]]]])\n\n\n(defn- make-bar-display [data subscriptions isAnimationActive?]\n  ;(log/info \"make-bar-display\" data \"//\" subscriptions)\n\n  (let [ret (->> (get-in data [:metadata :fields])\n              (filter (fn [[_ v]] (= :number v)))\n              keys\n              (map (fn [a]\n                     (if (ui-utils/resolve-sub subscriptions [a :include])\n                       [:> Bar (merge {:type \"monotone\" :dataKey a\n                                       :isAnimationActive @isAnimationActive?\n                                       :fill (ui-utils/resolve-sub subscriptions [a :fill])}\n                                 (when (seq (ui-utils/resolve-sub subscriptions [a :stackId]))\n                                   {:stackId (ui-utils/resolve-sub subscriptions [a :stackId])}))]\n                       [])))\n              (remove empty?)\n              (into [:<>]))]\n    ;(log/info \"ret\" ret)\n\n    ret))\n\n\n(defn- component* [& {:keys [data component-id container-id\n                             subscriptions isAnimationActive?]\n                      :as params}]\n  (let [d (if (empty? data) [] (get data :data))]\n\n    [:> ResponsiveContainer\n     [:> BarChart {:data d}\n\n      (utils/standard-chart-components component-id {})\n\n      (when (ui-utils/resolve-sub subscriptions [:brush]) [:> Brush])\n\n      (make-bar-display data subscriptions isAnimationActive?)]]))\n\n\n(defn component [& {:keys [component-id] :as params}]\n\n  ;(log/info \"component-2\" params)\n\n  (let [input-params (assoc params :component* component*\n                                   :component-panel wrapper/component-panel\n                                   :config config\n                                   :local-config local-config)]\n\n    (reduce into [wrapper/base-chart] (seq input-params))))\n\n\n(def meta-data {:rechart/bar {:component component\n                              :ports     {:data   :port/sink\n                                          :config :port/sink}}})\n\n\n(rf/dispatch-sync [:register-meta meta-data])\n\n\n\n\n\n(comment\n  (def component-id \":bar-chart-2-demo.bar-chart-2\")\n  (def data {:metadata {} :data []})\n  (def data (r/atom example-data/meta-tabular-data))\n  (config component-id data)\n\n  (def d (h/resolve-value data))\n\n\n\n  (->> (get-in data [:metadata :fields])\n    (filter (fn [[_ v]] (= :number v)))\n    keys\n    (map (fn [a]\n           [:> Bar {:type \"monotone\" :dataKey a :fill \"#aa0000\"}]))\n    (remove empty?)\n    (into [:<>]))\n\n\n\n  ())\n\n"]}