{"version":3,"sources":["bh_ui/atom/resium/shape.cljs"],"mappings":"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","names":["taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","bh-ui.atom.resium.shape/correct-locations","locations","cljs.core.map","p__59351","vec__59352","cljs.core.nth","lat","lon","cljs.core/flatten","p__59355","vec__59356","bh-ui.atom.resium.shape/correct-location","var_args","G__59360","bh-ui.atom.resium.shape/cartesian3","js/Error","p__59361","vec__59362","js/shadow.js.shim.module$cesium.Cartesian3","js/bh-ui","js/bh-ui.atom","js/bh-ui.atom.resium","js/bh-ui.atom.resium.shape","js/bh-ui.atom.resium.shape.make-shape","method-table__4747__auto__","cljs.core.atom","prefer-table__4748__auto__","method-cache__4749__auto__","cached-hierarchy__4750__auto__","hierarchy__4751__auto__","cljs.core.get","fexpr__59365","cljs.core/MultiFn","cljs.core.symbol","bh-ui.atom.resium.shape/make-shape","p__59366","map__59367","cljs.core/--destructure-map","shape","p__59368","map__59369","id","fill-color","outline-color","width","vec__59370","vec__59373","f-r","f-g","f-b","f-a","o-r","o-g","o-b","o-a","js/shadow.js.shim.module$resium.Entity","js/shadow.js.shim.module$resium.PolygonGraphics","cljs.core/clj->js","js/shadow.js.shim.module$cesium.Color","p__59376","map__59377","bounding-box","url","cljs.core/seq","bh-ui.utils.bounding-box/bounding-box->locations","js/shadow.js.shim.module$cesium.ImageMaterialProperty","p__59378","map__59379","vec__59380","r","g","b","a","js/shadow.js.shim.module$resium.PolylineGraphics","p__59383","map__59384","location","radius","height","vec__59385","vec__59388","bh_ui.atom.resium.shape.cartesian3","js/shadow.js.shim.module$resium.EllipseGraphics","p__59391","map__59392","label","font","vec__59393","vec__59396","js/shadow.js.shim.module$resium.LabelGraphics","or__4253__auto__","_"],"sourcesContent":["(ns bh-ui.atom.resium.shape\n  (:require [\"resium\" :refer (Viewer CameraFlyTo Globe Entity EllipseGraphics PolygonGraphics PolylineGraphics PointPrimitive LabelGraphics)]\n            [\"cesium\" :refer (Cartesian3 Ion Color CircleGeometry LabelStyle Material MaterialProperty ImageMaterialProperty)]\n            [bh-ui.utils.bounding-box :as bound]\n            [taoensso.timbre :as log]))\n\n\n(log/info \"bh-ui.atom.resium.shape\")\n\n\n(defn- correct-locations\n  \"Cesium/Resium locations are [lon lat] while Worldwind locations are [lat lon], so we need this\n  function to do the conversion (easier to go in this direction)\n  \"\n  [locations]\n  (->> locations\n    (map (fn [[lat lon]] [lon lat]))\n    flatten))\n\n\n(defn- correct-location [[lat lon]]\n  [lon lat])\n\n\n(defn- cartesian3\n  ([[lon lat]] (.fromDegrees Cartesian3 lon lat))\n\n  ([lon lat] (.fromDegrees Cartesian3 lon lat)))\n\n\n(defmulti make-shape (fn [{:keys [shape]}] shape))\n\n; :shape/polygon\n(defmethod make-shape :shape/polygon [{:keys [id locations fill-color outline-color width]}]\n  (let [[f-r f-g f-b f-a] fill-color\n        [o-r o-g o-b o-a] outline-color]\n    ^{:key id} [:> Entity\n                [:> PolygonGraphics {:hierarchy    (.fromDegreesArray Cartesian3 (clj->js (correct-locations locations)))\n                                     :outlineColor (Color. o-r o-g o-b o-a)\n                                     :outlineWidth width\n                                     :outline      true\n                                     :material     (Color. f-r f-g f-b f-a)}]]))\n\n\n; :shape/image\n(defmethod make-shape :shape/image [{:keys [id bounding-box locations url]}]\n  ;(log/info \"make-shape\" id bounding-box locations url)\n  ^{:key id} [:> Entity\n              [:> PolygonGraphics {:hierarchy (.fromDegreesArray Cartesian3\n                                                (clj->js (correct-locations (cond\n                                                                              (seq locations) locations\n                                                                              (seq bounding-box) (bound/bounding-box->locations bounding-box)\n                                                                              :else [:div \":shape/image is missing both :bounding-box AND :locations parameters\"]))))\n                                   :material (ImageMaterialProperty. (clj->js {:image url}))}]])\n\n\n; :shape/polyline\n(defmethod make-shape :shape/polyline [{:keys [id locations width outline-color]}]\n  (let [[r g b a] outline-color]\n    ^{:key id} [:> Entity\n                [:> PolylineGraphics {:positions (.fromDegreesArray Cartesian3 (clj->js (correct-locations locations)))\n                                      :width     width\n                                      :material  (Color. r g b a)}]]))\n\n\n; :shape/circle\n(defmethod make-shape :shape/circle [{:keys [id location radius fill-color outline-color width height]}]\n  (let [[f-r f-g f-b f-a] fill-color\n        [o-r o-g o-b o-a] outline-color]\n    ^{:key id} [:> Entity {:position (cartesian3 (correct-location location))}\n                [:> EllipseGraphics {:semiMajorAxis radius\n                                     :semiMinorAxis radius\n                                     :material      (Color. f-r f-g f-b f-a)\n                                     :outlineColor  (Color. o-r o-g o-b o-a)\n                                     :outlineWidth  width\n                                     :height        height\n                                     :outline       true}]]))\n\n\n; :shape/label\n(defmethod make-shape :shape/label [{:keys [id location label font fill-color outline-color width]}]\n  (let [[f-r f-g f-b f-a] fill-color\n        [o-r o-g o-b o-a] outline-color]\n    ^{:key id}  [:> Entity {:position (cartesian3 (correct-location location))}\n                 [:> LabelGraphics {:text         label\n                                    :font         (or font \"24px Helvetica\")\n                                    :fillColor    (Color. f-r f-g f-b f-a)\n                                    :outlineColor (Color. o-r o-g o-b o-a)\n                                    :outlineWidth width\n                                    :show         true}]]))\n\n(defmethod make-shape :default [_]\n  [:> Entity])\n"]}