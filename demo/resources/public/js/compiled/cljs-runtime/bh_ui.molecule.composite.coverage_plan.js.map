{"version":3,"sources":["bh_ui/molecule/composite/coverage_plan.cljs"],"mappings":"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","names":["taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","bh-ui.molecule.composite.coverage-plan/dummy-targets","bh-ui.molecule.composite.coverage-plan/dummy-satellites","p__60067","map__60068","cljs.core/--destructure-map","cljs.core.get","bh-ui.molecule.composite.coverage-plan/fn-coverage","targets","satellites","selected-targets","selected-satellites","coverages","current-time","shapes","re_frame.core.reg_sub","cljs.core/first","p__60069","vec__60070","cljs.core.nth","t","s","s-t","s-s","c","ct","_","filtered-coverages","p1__60066#","cljs.core.filter","cljs.core/contains?","cljs.core.get_in","bh-ui.molecule.composite.coverage-plan.support/cook-coverages","cvg","cljs.core/seq","cljs.core.map","bh-ui.molecule.composite.coverage-plan.support/make-coverage-shape","trg","bh-ui.molecule.composite.coverage-plan.support/make-target-shape","bh-ui.molecule.composite.coverage-plan.support/cook-targets","ret","cljs.core.concat","p__60080","map__60081","bh-ui.molecule.composite.coverage-plan/fn-range","data","range","d","times","cljs.core/set","cljs.core.apply","cljs.core/min","cljs.core/max","p__60084","map__60085","bh-ui.molecule.composite.coverage-plan/fn-current-time","value","v","cljs-time.coerce/to-date","cljs_time.core.plus","cljs-time.core/now","cljs_time.core.hours","p__60087","map__60091","bh-ui.molecule.composite.coverage-plan/fn-color-targets","colored","vec__60092","next-target-color","cljs.core.atom","component","topic","cljs.core/name","clojure.string.split","path","cljs.core.keyword","p__60095","vec__60096","p","cnt","cljs.core/count","bh-ui.molecule.composite.coverage-plan.support/sensor-color-pallet","last-target-data","fexpr__60099","assigned","cljs.core.juxt","assigned-set","cljs.core.doall","cljs.core.assoc","p1__60086#","cljs.core._EQ_","cljs.core/mod","cljs.core.swap_BANG_","cljs.core/inc","bh-ui.utils.helpers/handle-change-path","p__60108","map__60109","bh-ui.molecule.composite.coverage-plan/fn-color-satellites","vec__60110","next-sat-color","p__60113","vec__60114","last-sat-data","fexpr__60117","p1__60107#","p__60129","map__60130","bh-ui.molecule.composite.coverage-plan/fn-filtered-targets","filter-value","filtered-targets","params","p__60131","vec__60132","f","p1__60128#","cljs.core/re-find","cljs.core/re-pattern","re-frame.core/dispatch-sync","bh-ui.molecule.composite.coverage-plan/update-color","id","id-key","color-type","new-color","p1__60139#","cljs.core/keyword","p__60142","vec__60143","orig-data","bh-ui.utils.helpers/resolve-value","target","p1__60140#","cljs.core/deref","kept","p1__60141#","cljs.core.remove","new-data","cljs.core.conj","G__60149","cljs.core/Keyword","bh-ui.utils.color/match-colors-hex","bh-ui.utils.color/match-colors-rgba","bh-ui.molecule.composite.coverage-plan/toggle-selection","resolved-selection","selection-path","s-ids","or__4253__auto__","cljs.core.disj","bh-ui.molecule.composite.coverage-plan/display-checkbox","name","under-consideration","toggle-fn","event","p__60159","vec__60163","bh-ui.molecule.composite.coverage-plan/display-symbol","update-colors","color","showing?","reagent.core.atom","p__60166","vec__60167","re-com.core/popover-anchor-wrapper","js/goog.DEBUG","cljs.core/not","re-com.core/popover-content-wrapper","bh-ui.atom.bhui.color-picker/hex-color-picker","x","cljs.core.js__GT_clj","bh-ui.molecule.composite.coverage-plan/display-edit-control","is-editing","cljs.core/reset!","bh-ui.molecule.composite.coverage-plan/display-delete-control","p__60177","vec__60178","bh-ui.molecule.composite.coverage-plan/display-color","js-color","rgba-color","icon-color","p__60181","vec__60182","vec__60185","r","g","b","a","bh-ui.atom.bhui.color-picker/rgba-color-picker","bh-ui.molecule.composite.coverage-plan/display-text","cell","bh-ui.molecule.composite.coverage-plan/column-types","bh-ui.molecule.composite.coverage-plan/target-row-def","bh-ui.molecule.composite.coverage-plan/satellite-row-def","bh-ui.molecule.composite.coverage-plan/column-header-cell","column","cljs.core/rand-int","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","bh-ui.molecule.composite.coverage-plan/target-table","p__60198","map__60199","seq60196","self__4852__auto__","selection","colors","component-id","container-id","iter__4652__auto__","s__60201","cljs.core/LazySeq","temp__5753__auto__","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","b__60203","cljs.core/chunk-buffer","i__60202","map__60204","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__60200","cljs.core/chunk-rest","map__60205","cljs.core/cons","cljs.core/rest","cells","bh-ui.molecule.composite.coverage-plan/satellite-table","p__60211","map__60212","seq60210","s__60214","b__60216","i__60215","map__60217","iter__60213","map__60218","platform_id","sensor_id","platform","bh-ui.molecule.composite.coverage-plan/target-filter-input","p__60229","map__60233","seq60224","p1__60223#","re-com.core/h-box","re-com.core/input-text","re-com.core/md-circle-icon-button","bh-ui.molecule.composite.coverage-plan/ui-definition","cljs.core/chunk-first"],"sourcesContent":["(ns bh-ui.molecule.composite.coverage-plan\n  \"provide a composed UI for a \\\"Coverage Plan\\\" which shows targets and satellite coverage areas\n  on a 3D globe\"\n  (:require [bh-ui.atom.bhui.color-picker :as picker]\n            [bh-ui.molecule.composite.coverage-plan.support :as s]\n            [bh-ui.utils :as ui-utils]\n            [bh-ui.utils.color :as c]\n            [bh-ui.utils.helpers :as h]\n            [cljs-time.coerce :as coerce]\n            [cljs-time.core :as t]\n            [re-com.core :as rc]\n            [re-frame.core :as re-frame]\n            [reagent.core :as r]\n            [taoensso.timbre :as log]\n            [\"dagre\" :as dagre]\n            [\"graphlib\" :as graphlib]\n            [\"react-flow-renderer\" :refer (ReactFlowProvider Controls Handle Background) :default ReactFlow]))\n\n\n(log/info \"bh-ui.molecule.composite.coverage-plan\")\n\n\n;; region ; data for developing the UI\n\n\n(def dummy-targets #{\"alpha-hd\" \"bravo-img\" \"fire-hd\" \"fire-ir\" \"severe-hd\"})\n\n\n(def dummy-satellites #{\"abi-meso-2\" \"abi-meso-10\" \"abi-meso-4\" \"abi-meso-11\" \"viirs-5\" \"avhhr-6\"})\n\n;; endregion\n\n\n;; region ; local function to support :source/local topics\n\n(defn fn-coverage\n  \"registers the subscription for the entity defined by 'layers'. processing from\n  inputs to the output is performed by 'some-computation'\n\n  this function assumes that the caller provides fully-qualified signal vectors, so the CALLER\n  is responsible for building the keyword (using path->keyword)\n\n  - targets : (vector of keywords) the subscription signal for the target data\n  - satellites : (vector of keywords) the subscription signal for the 'selected' satellite data\n  - coverages : (vector of keywords) the subscription signal for the coverage data\n\n  builds and registers the subscription provided by 'layers'\n\n  \"\n  [{:keys [targets satellites\n           selected-targets selected-satellites\n           coverages\n           current-time shapes]}]\n\n  ;(log/info \"fn-coverage\" shapes\n  ;  \"//\" targets\n  ;  \"//\" satellites\n  ;  \"//\" selected-targets\n  ;  \"//\" selected-satellites\n  ;  \"//\" coverages)\n\n  (re-frame/reg-sub\n    (first shapes)\n    :<- targets\n    :<- satellites\n    :<- selected-targets\n    :<- selected-satellites\n    :<- coverages\n    :<- current-time\n    (fn [[t s s-t s-s c ct] _]\n      ;(log/info \"fn-coverage (sub)\" ct\n      ;  \"// (targets)\" t\n      ;  \"// (satellites)\" s\n      ;  \"// (selected-targets)\" s-t\n      ;  \"// (selected-satellites)\" s-s\n      ;  \"// (cooked)\" (s/cook-coverages s s-s c ct)\n      ;  \"// (:topic/target-filter)\" (filter #(contains?\n      ;                                         s-s (get-in % [:coverage :sensor]))\n      ;                                (s/cook-coverages s s-s c ct))\n\n      (let [filtered-coverages (filter #(contains?\n                                          s-s\n                                          (get-in % [:coverage :sensor]))\n                                 (s/cook-coverages s s-s c ct))\n            cvg                (if (seq filtered-coverages)\n                                 (map s/make-coverage-shape filtered-coverages)\n                                 [])\n            trg                (if (seq t)\n                                 (map s/make-target-shape (s/cook-targets t s-t ct))\n                                 [])\n            ret                (concat cvg trg)]\n\n        ;(log/info \"fn-coverage (ret)\" ret\n        ;  \"//\" cvg\n        ;  \"//\" trg)\n\n        ret))))\n\n\n(defn fn-range\n  \"registers the subscription for the entity defined by 'selected'. processing from\n  inputs to output is performed by 'some-computation'\n\n  - data : (vector of keywords) the subscription signal for the input data\n  - container-id : (string) name of the container holding the blackboard\n\n  builds and registers the subscription :<container>/blackboard.<selected>\n  \"\n  [{:keys [data range]}]\n\n  ;(log/info \"fn-range\" range \"//\" data)\n\n  (re-frame/reg-sub\n    (first range)\n    :<- data\n    (fn [d _]\n      (let [times (->> d :data (map :time) set)]\n        [(apply min times) (apply max times)]))))\n\n\n(defn fn-current-time [{:keys [value current-time]}]\n  ;(log/info \"fn-current-time\" value \"//\" current-time)\n\n  (re-frame/reg-sub\n    (first current-time)\n    :<- value\n    (fn [v _]\n      (coerce/to-date (t/plus (t/now) (t/hours v))))))\n\n\n(defn fn-color-targets [{:keys [data colored]}]\n  (let [next-target-color (atom -1)\n        [component topic] (-> colored\n                            first\n                            name\n                            (clojure.string/split #\".blackboard.\"))\n        path              [(keyword (str component \".blackboard\"))]]\n\n    ;(log/info \"fn-color-targets\" data \"//\" colored \"//\" path)\n\n    (re-frame/reg-sub\n      (first colored)\n      :<- data\n      :<- path\n      (fn [[d p] _]\n        ;(log/info \"fn-color-targets (data)\" d \"//\" (:data d) \"//\" (keyword topic) \"//\" ((keyword topic) p))\n        (let [cnt              (count s/sensor-color-pallet)\n              last-target-data ((keyword topic) p)\n              assigned         (map (juxt :name :color) last-target-data)\n              assigned-set     (->> assigned (map first) set)\n\n              ;_            (log/info \"fn-color-targets (atom)\" @last-target-data \"//\" assigned \"//\" assigned-set)\n              ret              (doall\n                                 (map (fn [t]\n                                        (if (contains? assigned-set (:name t))\n                                          (assoc t :color (->> last-target-data\n                                                            (filter #(= (:name t) (:name %)))\n                                                            first\n                                                            :color))\n                                          (assoc t :color (nth s/sensor-color-pallet\n                                                            (mod (swap! next-target-color inc) cnt)))))\n                                   (:data d)))]\n\n          ;(log/info \"fn-color-targets (ret)\" ret)\n\n          ; need to store this in the app-db because this fn is STATEFUL, we don't\n          ; want to change a target if it has already been assigned a color\n          (h/handle-change-path path [topic] ret)\n\n          ret)))))\n\n\n(defn fn-color-satellites [{:keys [data colored]}]\n  ;(log/info \"fn-color-satellites\" data \"//\" colored)\n  (let [next-sat-color (atom -1)\n        [component topic] (-> colored\n                            first\n                            name\n                            (clojure.string/split #\".blackboard.\"))\n        path           [(keyword (str component \".blackboard\"))]]\n    (re-frame/reg-sub\n      (first colored)\n      :<- data\n      :<- path\n      (fn [[d p] _]\n        ;(log/info \"fn-color-satellites (data)\" d \"//\" (:data d))\n        (let [cnt           (count s/sensor-color-pallet)\n              last-sat-data ((keyword topic) p)\n              assigned      (map (juxt :sensor_id :color) last-sat-data)\n              assigned-set  (->> assigned (map first) set)\n              ;_            (log/info \"fn-color-satellites (atom)\" @last-sat-data \"//\" assigned \"//\" assigned-set)\n              ret           (doall\n                              (map (fn [t]\n                                     (if (contains? assigned-set (:sensor_id t))\n                                       (assoc t :color (->> last-sat-data\n                                                         (filter #(= (:sensor_id t) (:sensor_id %)))\n                                                         first\n                                                         :color))\n                                       (assoc t :color (nth s/sensor-color-pallet\n                                                         (mod (swap! next-sat-color inc) cnt)))))\n                                (:data d)))]\n\n          ;(log/info \"fn-color-satellites (ret)\" ret )\n\n          ; need to store this in the app-db because this fn is STATEFUL, we don't\n          ; want to change a satellite/sensor if it has already been assigned a color\n          (h/handle-change-path path [topic] ret)\n\n          ret)))))\n\n\n(defn fn-filtered-targets [{:keys [targets filter-value filtered-targets] :as params}]\n  (re-frame/reg-sub\n    (first filtered-targets)\n    :<- targets\n    :<- filter-value\n    (fn [[t f] _]\n      (->> t\n        (filter #(re-find (re-pattern (str \"(?i)\" f)) (:name %)))))))\n\n\n; register meta-data for all these functions\n;\n(re-frame/dispatch-sync [:register-meta\n                         {:coverage-plan/fn-coverage {:function fn-coverage\n                                                      :ports {:targets          :port/sink :satellites :port/sink\n                                                              :selected-targets :port/sink :selected-satellites :port/sink\n                                                              :coverages        :port/sink :current-time :port/sink\n                                                              :shapes           :port/source}}\n                          :coverage-plan/fn-range {:function fn-range\n                                                   :ports {:data :port/sink\n                                                           :range :port/source}}\n                          :coverage-plan/fn-current-time {:function fn-current-time\n                                                          :ports {:value :port/sink\n                                                                  :current-time :port/source}}\n                          :coverage-plan/fn-color-targets {:function fn-color-targets\n                                                           :ports {:data :port/sink\n                                                                   :colored :port/source}}\n                          :coverage-plan/fn-color-satellites {:function fn-color-satellites\n                                                              :ports {:data :port/sink\n                                                                      :colored :port/source}}\n                          :coverage-plan/fn-filtered-targets {:function fn-filtered-targets\n                                                              :ports {:targets          :port/sink\n                                                                      :filter-value     :port/sink\n                                                                      :filtered-targets :port/source}}}])\n\n;; endregion\n\n\n;; region ; custom tables for display\n\n\n(defn- update-color [data id id-key color-type new-color]\n  ;(log/info \"update-color\" id color-type new-color)\n  (let [path      (-> data\n                    first\n                    name\n                    (clojure.string/split #\".blackboard.\")\n                    (#(map keyword %))\n                    ((fn [[c p]] [c :blackboard p])))\n        orig-data (h/resolve-value data)\n        target    (first (filter #(= (id-key %) id) @orig-data))\n        kept      (remove #(= (id-key %) id) @orig-data)\n        new-data  (conj kept (assoc target :color (case color-type\n                                                    :hex (c/match-colors-hex new-color)\n                                                    :rgba (c/match-colors-rgba new-color)\n                                                    (c/match-colors-hex new-color))))]\n\n    ;(log/info \"update-color (path)\" id \"//\" path \"//\" new-data)\n    (h/handle-change-path path [] new-data)))\n\n\n(defn- toggle-selection [resolved-selection selection-path id]\n  (let [s-ids (or resolved-selection #{})]\n    (if (contains? resolved-selection id)\n      ; remove\n      (h/handle-change-path selection-path [] (disj s-ids id))\n\n      ; add\n      (h/handle-change-path selection-path [] (conj s-ids id)))))\n\n\n(defn- display-checkbox [id name under-consideration toggle-fn]\n  ^{:key (str \"check-\" id)}\n  [:td.is-narrow\n   {:style    {:text-align :center}\n    :on-click (rc/handler-fn\n                (toggle-fn))}\n\n   (if (contains? under-consideration id)\n     [:span.icon.has-text-success.is-small [:i.fas.fa-check]]\n     [:span.icon.has-text-success.is-small [:i.far.fa-square]])])\n\n\n(defn- display-symbol [data update-colors name [_ _ _ _ color]]\n  (let [showing? (r/atom false)\n        d        (h/resolve-value data)]\n\n    ;(log/info \"display-symbol\" data \"//\" name \"//\" @showing?)\n\n    (fn [data update-colors name [_ _ _ _ color]]\n\n      ;(log/info \"display-symbol (inner)\" name\n      ;\"//\" color \"//\" @d\n      ;\"//\" @showing?\n\n      ^{:key (str \"symb-\" name)}\n      [:td {:style {:color      :white\n                    :text-align :center}}\n       [rc/popover-anchor-wrapper :src (rc/at)\n        :showing? @showing?\n        :position :below-right\n        :anchor [:span.icon.has-text-success.is-small\n                 [:i.fas.fa-circle\n                  {:style    {:color color}\n                   :on-click #(do\n                                (swap! showing? not))}]]\n        ;(log/info \"display-symbol (click)\" name \"//\" @showing?))}]]\n        :popover [rc/popover-content-wrapper :src (rc/at)\n                  :close-button? false\n                  :no-clip? false\n                  :body [picker/hex-color-picker\n                         :color color\n                         :on-change (fn [x]\n                                      (update-color update-colors name :name :hex (js->clj x)))]]]])))\n\n\n(defn- display-edit-control [name]\n  (let [is-editing (r/atom false)]\n    (fn []\n      ^{:key (str \"edit-\" name)}\n      [:td {:on-click #(if @is-editing\n                         (do\n                           (log/info \"SAVE\" name)\n                           (reset! is-editing false))\n                         (do\n                           (log/info \"EDIT\" name)\n                           (reset! is-editing true)))}\n       (if @is-editing\n         [:span.icon.has-text-success.is-small [:i.far.fa-save]]\n         [:span.icon.has-text-info.is-small [:i.far.fa-edit]])])))\n\n\n(defn- display-delete-control [name]\n  ^{:key (str \"delete-\" name)}\n  [:td {:on-click #(do)}\n   [:span.icon.has-text-danger.is-small [:i.far.fa-trash-alt]]])\n\n\n(defn- display-color [data name [_ js-color rgba-color _ icon-color]]\n\n  (let [showing? (r/atom false)\n        d        (h/resolve-value data)]\n\n    ;(log/info \"display-color\" name \"//\" @showing?)\n\n    (fn [data name [_ js-color [r g b a] _ icon-color]]\n\n      ;(log/info \"display-color (inner)\" name\n      ;\"//\" js-color \"//\" @d\n      ;\"//\" @showing?\n\n      ^{:key (str \"color-\" name)}\n      [:td\n       {:style {:background-color :transparent\n                :border-width     \"1px\"\n                :text-align       :center\n                :width            100}}\n       [rc/popover-anchor-wrapper :src (rc/at)\n        :showing? @showing?\n        :position :below-right\n        :anchor [:div {:style    {:padding          \"5px 10px 5px 10px\"\n                                  :background-color (or js-color :green)}\n                       :on-click #(swap! showing? not)}\n                 name]\n        :popover [rc/popover-content-wrapper :src (rc/at)\n                  :close-button? false\n                  :no-clip? false\n                  :body [picker/rgba-color-picker\n                         :color {:r r :g g :b b :a a}\n                         :on-change (fn [x]\n                                      (update-color data name :sensor_id :rgba\n                                        (js->clj x :keywordize-keys true)))]]]])))\n\n\n(defn- display-text [cell]\n  ^{:key (str \"target-\" cell)} [:td cell])\n\n\n(def column-types {:column/boolean      display-checkbox\n                   :column/colored-cell display-color\n                   :column/colored-icon display-symbol\n                   :column/delete       display-delete-control\n                   :column/edit         display-edit-control\n                   :column/text         display-text\n                   :column/status       #()})\n\n\n(def target-row-def {:columns    [{:column/key :include :column/label \"Include?\" :column/type :cell/boolean}\n                                  {:column/key :symbol :column/label \"Symbol\" :column/type :cell/colored-icon :column/icon :i.fas.fa-circle}\n                                  {:column/key :aoi :column/label \"AoI\" :column/type :cell/text}\n                                  {:column/key :edit :column/label \"\" :column/type :cell/edit-toggle}\n                                  {:column/key :delete :column/label \"\" :column/type :cell/delete-toggle}]\n                     :unique-key :name})\n\n\n(def satellite-row-def {:columns    [{:column/key :include :column/label \"Include?\" :column/type :cell/boolean}\n                                     {:column/key :sensor_id :column/label \"Sensor/Color\" :column/type :cell/colored-cell}\n                                     {:column/key :platform_id :column/label \"Platform\" :column/type :cell/text}]\n                        :unique-key :sensor_id})\n\n\n(defn- column-header-cell [column]\n  ^{:key (str (:column/label column) \"-\" (rand-int 1000))} [:th (:column/label column)])\n\n\n(defn- target-table [& {:keys [data selection colors component-id container-id] :as params}]\n  ;(log/info \"target-table\" params)\n  (let [d (h/resolve-value data)\n        s (h/resolve-value selection)]\n\n    (fn []\n      ;(log/info \"target-table (d)\" @d \"//\" @s)\n      [:div.table-container {:style {:width       \"100%\"\n                                     :height      \"100%\"\n                                     :overflow-y  :auto\n                                     :white-space :nowrap\n                                     :border      \"1px outset gray\"}}\n       [:table.table\n        [:thead {:style {:position :sticky :top 0 :background :lightgray}}\n         [:tr\n          (doall (->> target-row-def :columns (map column-header-cell)))]]\n\n        [:tbody\n         (doall\n           (for [{:keys [name cells color] :as target} @d]\n             (doall\n               ;(log/info \"target-table (for)\" @d\n               ; \"//\" target \"//\" name \"//\" color)\n\n               ^{:key name}\n               [:tr\n                [display-checkbox name name @s #(toggle-selection @s selection name)]\n\n                [display-symbol data colors name color]\n\n                [display-text name]\n\n                [display-edit-control name]\n\n                [display-delete-control name]])))]]])))\n\n\n(defn- satellite-table [& {:keys [data selection component-id container-id]}]\n  ;(log/info \"satellites-table\" data \"//\" selection)\n\n  (let [d (h/resolve-value data)\n        s (h/resolve-value selection)]\n\n    ;(log/info \"satellites-table (s)\" @d \"//\" @s)\n\n    (fn []\n      [:div.table-container {:style {:width       \"100%\"\n                                     :height      \"100%\"\n                                     :overflow-y  :auto\n                                     :white-space :nowrap\n                                     :border      \"1px outset gray\"}}\n       [:table.table\n        [:thead {:style {:position :sticky :top 0 :background :lightgray}}\n         [:tr\n          (doall (->> satellite-row-def :columns (map column-header-cell)))]]\n\n        [:tbody\n         (doall\n           (for [{:keys [platform_id sensor_id color] :as platform} @d]\n             (doall\n               ^{:key sensor_id}\n               [:tr\n                [display-checkbox sensor_id (str platform_id \"-\" sensor_id)\n                 @s #(toggle-selection @s selection sensor_id)]\n\n                [display-color data sensor_id color]\n\n                ^{:key (str \"satellite-\" platform_id \"-\" sensor_id)}\n                [display-text platform_id]])))]]])))\n\n\n(defn- target-filter-input [& {:keys [value component-id container-id] :as params}]\n  (let [v (h/resolve-value value)]\n    (fn []\n      [rc/h-box :src (rc/at)\n       :align :center\n       :children [[rc/input-text :src (rc/at)\n                   :model @v\n                   :placeholder \"enter text to filter targets\"\n                   :change-on-blur? false\n                   :on-change #(h/handle-change-path value [] %)]\n                  [rc/md-circle-icon-button :src (rc/at)\n                   :md-icon-name \"zmdi-close-circle-o\"\n                   :tooltip \"Click to clear\"\n                   :size :smaller\n                   :on-click #(h/handle-change-path value [] \"\")]]])))\n\n\n; register these as bh-uis\n(re-frame/dispatch-sync [:register-meta\n                         {:coverage-plan/target-table {:component target-table\n                                                       :ports {:data :port/sink\n                                                               :selection :port/sink\n                                                               :colors :port/sink}}\n                          :coverage-plan/satellite-table {:component satellite-table\n                                                          :ports {:data :port/sink\n                                                                  :selection :port/sink}}\n                          :coverage-plan/target-filter-input {:component target-filter-input\n                                                              :ports {:value :port/sink}}}])\n\n\n;; endregion\n\n\n(def ui-definition {:title        \"Coverage Plan\"\n                    :component-id :coverage-plan\n                    :components   {; ui components\n                                   ; TODO: add a :label element for use in the UI\n                                   :ui/targets                {:type        :ui/component :name :coverage-plan/target-table\n                                                               :label       \"Targets\"\n                                                               :config-data {:columns    [{:column/key :include :column/label \"Include?\" :column/type :cell/boolean}\n                                                                                          {:column/key :symbol :column/label \"Symbol\" :column/type :cell/colored-icon :column/icon :i.fas.fa-circle}\n                                                                                          {:column/key :aoi :column/label \"AoI\" :column/type :cell/text}\n                                                                                          {:column/key :edit :column/label \"\" :column/type :cell/edit-toggle}\n                                                                                          {:column/key :delete :column/label \"\" :column/type :cell/delete-toggle}]\n                                                                             :unique-key :name}}\n                                   :ui/satellites             {:type :ui/component :name :coverage-plan/satellite-table :label \"Platforms\"}\n                                   :ui/globe                  {:type :ui/component :name :ww/globe}\n                                   :ui/time-slider            {:type :ui/component :name :rc/slider}\n                                   :ui/current-time           {:type :ui/component :name :rc/label-md}\n                                   :ui/target-filter          {:type :ui/component :name :coverage-plan/target-filter-input :label \"Filter:\"}\n\n                                   ; remote data sources\n                                   :topic/target-data         {:type :source/remote :name :source/targets}\n                                   :topic/satellite-data      {:type :source/remote :name :source/satellites}\n                                   :topic/coverage-data       {:type :source/remote :name :source/coverages}\n\n                                   ; composite-local data sources\n                                   :topic/selected-targets    {:type :source/local :name :selected-targets :default dummy-targets}\n                                   :topic/colored-targets     {:type   :source/local :name :colored-targets\n                                                               :fields [:target/include :target/symbol :target/name]}\n\n                                   :topic/selected-satellites {:type :source/local :name :selected-satellites :default dummy-satellites}\n                                   :topic/colored-satellites  {:type :source/local :name :colored-satellites}\n\n                                   :topic/current-time        {:type :source/local :name :current-time :default 0}\n                                   :topic/shapes              {:type :source/local :name :shapes}\n                                   :topic/time-range          {:type :source/local :name :time-range}\n                                   :topic/current-slider      {:type :source/local :name :current-slider :default 0}\n                                   :topic/target-filter       {:type :source/local :name :target-filter :default \"\"}\n                                   :topic/filtered-targets    {:type :source/local :name :filtered-targets}\n\n                                   ; transformation functions\n                                   :fn/coverage               {:type  :source/fn :name :coverage-plan/fn-coverage}\n                                   :fn/range                  {:type  :source/fn :name :coverage-plan/fn-range}\n                                   :fn/current-time           {:type  :source/fn :name :coverage-plan/fn-current-time}\n                                   :fn/color-targets          {:type  :source/fn :name :coverage-plan/fn-color-targets}\n                                   :fn/color-satellites       {:type  :source/fn :name :coverage-plan/fn-color-satellites}\n                                   :fn/filtered-targets       {:type  :source/fn :name :coverage-plan/fn-filtered-targets}}\n\n                    :links        {:ui/targets                {;:data      {:topic/target-data :data}\n                                                               :selection {:topic/selected-targets :data}\n                                                               :colors    {:topic/colored-targets :data}}\n                                   :ui/satellites             {;:data      {:topic/satellite-data :data}\n                                                               :selection {:topic/selected-satellites :data}}\n                                   :ui/time-slider            {:value {:topic/current-slider :data}}\n                                   :ui/target-filter          {:value {:topic/target-filter :data}}\n\n                                   ; transformation functions publish to what?\n                                   :fn/coverage               {:shapes {:topic/shapes :data}}\n                                   :fn/range                  {:range {:topic/time-range :data}}\n                                   :fn/current-time           {:current-time {:topic/current-time :data}}\n                                   :fn/color-targets          {:colored {:topic/colored-targets :data}}\n                                   :fn/color-satellites       {:colored {:topic/colored-satellites :data}}\n                                   :fn/filtered-targets       {:filtered-targets {:topic/filtered-targets :data}}\n\n                                   ; topics are inputs into what?\n                                   :topic/target-data         {:data {:fn/color-targets :data}}\n                                   :topic/colored-targets     {:data {:fn/filtered-targets :targets}}\n                                   :topic/selected-targets    {:data {:ui/targets  :selection\n                                                                      :fn/coverage :selected-targets}}\n\n\n                                   :topic/satellite-data      {:data {:fn/color-satellites :data}}\n                                   :topic/colored-satellites  {:data {:ui/satellites :data\n                                                                      :fn/coverage   :satellites}}\n                                   :topic/selected-satellites {:data {:ui/satellites :selection\n                                                                      :fn/coverage   :selected-satellites}}\n\n                                   :topic/coverage-data       {:data {:fn/coverage :coverages\n                                                                      :fn/range    :data}}\n                                   :topic/shapes              {:data {:ui/globe :shapes}}\n                                   :topic/current-time        {:data {:ui/current-time :value\n                                                                      :ui/globe        :current-time}}\n                                   :topic/current-slider      {:data {:fn/current-time :value\n                                                                      :ui/time-slider  :value\n                                                                      :fn/coverage     :current-time}}\n                                   :topic/time-range          {:data {:ui/time-slider :range}}\n                                   :topic/target-filter       {:data {:ui/target-filter    :value\n                                                                      :fn/filtered-targets :filter-value}}\n                                   :topic/filtered-targets    {:data {:ui/targets  :data\n                                                                      :fn/coverage :targets}}}\n\n                    :grid-layout  [{:i :ui/target-filter :x 5 :y 0 :w 4 :h 2 :static true}\n                                   {:i :ui/targets :x 0 :y 2 :w 9 :h 7 :static true}\n                                   {:i :ui/satellites :x 0 :y 9 :w 9 :h 8 :static true}\n                                   {:i :ui/time-slider :x 2 :y 17 :w 6 :h 2 :static true}\n                                   {:i :ui/globe :x 9 :y 0 :w 11 :h 17 :static true}\n                                   {:i :ui/current-time :x 9 :y 17 :w 8 :h 2 :static true}]})\n\n\n\n;; region ; Rich comments\n\n; work out making actual shapes for the coverage data we get from the server\n(comment\n  (do\n    (def coverages (get-in @re-frame.db/app-db [:sources :source/coverages :data]))\n    (def current-time 0)\n\n    (def time-coverage (filter #(= (:time %) current-time) coverages)))\n\n\n  (ui-utils/subscribe-local\n    :ui-grid-ratom-demo.coverage-plan\n    [:blackboard :topic.shapes])\n\n\n  ())\n\n\n; can we cache the results so we only add :color to \"new\" elements?\n(comment\n  (do\n    (def colored [:coverage-plan-demo-ww.grid-widget.blackboard.topic.colored-targets]) ; actual\n    (def colored [:coverage-plan-demo-ww.grid-widget :blackboard :topic.colored-targets]) ; what we'd prefer\n\n    (def last-data (atom []))\n    (def last-target-data (atom dummy-targets))\n    (def assigned (map (juxt :name :color) @last-data))\n    (def assigned-set (->> assigned (map first) set))\n    (def candidate {:name  \"alpha-hd\",\n                    :cells #{[7 7 \"hidef-image\" 0] [7 6 \"hidef-image\" 1]\n                             [7 5 \"hidef-image\" 3] [7 6 \"hidef-image\" 2]}}))\n\n  (-> colored\n    first\n    name\n    (clojure.string/split #\".blackboard.\")\n    (#(map keyword %))\n    ((fn [[c p]] [c :blackboard p])))\n\n  (let [[component topic] (-> colored\n                            first\n                            name\n                            (clojure.string/split #\".blackboard.\"))]\n    {:c [(keyword (str component \".blackboard\"))] :t (keyword topic)})\n\n\n  (if (contains? assigned-set (:name candidate))\n    candidate\n    (assoc candidate :color [:dummy :dummy :dummy]))\n\n\n  (def last-target-data (atom []))\n\n  (->> @last-target-data\n    (filter #(= (:name candidate) (:name %)))\n    first\n    :color)\n\n\n  @(re-frame/subscribe [:subs/source :source/targets])\n\n  ; can we change the data in :source/targets and have the UI update?\n  ;\n  (re-frame/dispatch [:events/data-update\n                      {:id    :source/targets\n                       :value {:title    \"Targets\",\n                               :c-o-c    [{:step      :generated,\n                                           :by        \"dummy.data-source.targets\",\n                                           :version   \"0.6.0\",\n                                           :at        \"Mon May 23 14:21:10 EDT 2022\",\n                                           :signature \"73f7a470-ddc9-44d9-84fa-cf1ce1acc8f9\"}],\n                               :metadata {:title \"Targets\", :type :tabular, :id :target, :fields {:target :string, :cells :string}},\n                               :data     [{:name  \"alpha-hd\",\n                                           :cells #{[7 7 \"hidef-image\" 0] [7 6 \"hidef-image\" 1] [7 5 \"hidef-image\" 3] [7 6 \"hidef-image\" 2]}}\n                                          {:name \"bravo-img\", :cells #{[7 2 \"image\" 0] [7 1 \"image\" 1]}}\n                                          {:name  \"fire-hd\",\n                                           :cells #{[5 3 \"hidef-image\" 2]\n                                                    [4 3 \"hidef-image\" 3]\n                                                    [4 3 \"hidef-image\" 2]\n                                                    [5 3 \"hidef-image\" 0]\n                                                    [5 3 \"hidef-image\" 3]}}\n                                          {:name \"fire-ir\", :cells #{[5 4 \"v/ir\" 2] [5 4 \"v/ir\" 1] [5 3 \"v/ir\" 1] [5 4 \"v/ir\" 0] [5 4 \"v/ir\" 3]}}\n                                          {:name  \"severe-hd\",\n                                           :cells #{[5 7 \"hidef-image\" 3]\n                                                    [5 6 \"hidef-image\" 0]\n                                                    [6 6 \"hidef-image\" 2]\n                                                    [6 5 \"hidef-image\" 1]\n                                                    [5 7 \"hidef-image\" 1]}}\n                                          {:name  \"new-target\",\n                                           :cells #{[0 0 \"hidef-image\" 0]}}]}}])\n\n\n\n  (get-in @re-frame.db/app-db '(:containers))\n  (get-in @re-frame.db/app-db '(:containers :coverage-plan-demo-ww.grid-widget))\n  (get-in @re-frame.db/app-db '(:containers :coverage-plan-demo-ww.grid-widget\n                                 :blackboard))\n  (get-in @re-frame.db/app-db '(:containers :coverage-plan-demo-ww.grid-widget\n                                 :blackboard :topic.colored-targets))\n\n  ; can we change the data in :topic/colored-targets?\n  ;\n  (def new-colors [{:name  \"alpha-hd\", :cells #{[7 7 \"hidef-image\" 0] [7 6 \"hidef-image\" 1]\n                                                [7 5 \"hidef-image\" 3] [7 6 \"hidef-image\" 2]},\n                    :color [:darkred \"rgba(139, 0, 0, .3)\" [139 0 0 0.3] [0.55 0.0 0.0 0.1] \"#8B0000\"]}\n                   {:name  \"bravo-img\", :cells #{[7 2 \"image\" 0] [7 1 \"image\" 1]},\n                    :color [:blue \"rgba(0, 0, 255, .3)\" [0 0 255 0.3] [0 0 1 0.1] \"#0000FF\"]}\n                   {:name  \"fire-hd\", :cells #{[5 3 \"hidef-image\" 2] [4 3 \"hidef-image\" 3]\n                                               [4 3 \"hidef-image\" 2] [5 3 \"hidef-image\" 0] [5 3 \"hidef-image\" 3]},\n                    :color [:orange \"rgba(255, 165, 0, .3)\" [255 165 0 0.3] [1 0.65 0 0.3] \"#FFA500\"]}\n                   {:name  \"fire-ir\", :cells #{[5 4 \"v/ir\" 2] [5 4 \"v/ir\" 1] [5 3 \"v/ir\" 1]\n                                               [5 4 \"v/ir\" 0] [5 4 \"v/ir\" 3]},\n                    :color [:grey \"rgba(128, 128, 128, .3)\" [128 128 128 0.3] [0.5 0.5 0.5 0.3] \"#808080\"]}\n                   {:name  \"severe-hd\", :cells #{[5 7 \"hidef-image\" 3] [5 6 \"hidef-image\" 0]\n                                                 [6 6 \"hidef-image\" 2] [6 5 \"hidef-image\" 1] [5 7 \"hidef-image\" 1]},\n                    :color [:cornflowerblue \"rgba(100, 149, 237, .3)\"\n                            [100 149 237 0.3] [0.4 0.58 0.93 0.3] \"#6495ED\"]}])\n\n  (h/handle-change-path [:coverage-plan-demo-ww.grid-widget :blackboard :topic.colored-targets] []\n    new-colors)\n\n  ())\n\n\n; update the correct target's color with the new value\n(comment\n  (do\n    (def data [:coverage-plan-demo-ww.grid-widget.blackboard.topic.colored-targets])\n    (def id \"alpha-hd\")\n    (def new-color \"#000000\"))\n\n\n  (let [path      (-> data\n                    first\n                    name\n                    (clojure.string/split #\".blackboard.\")\n                    (#(map keyword %))\n                    ((fn [[c p]] [c :blackboard p])))\n        orig-data (h/resolve-value data)\n        target    (first (filter #(= (:name %) id) @orig-data))\n        kept      (remove #(= (:name %) id) @orig-data)\n        new-data  (conj kept (assoc target :color (c/match-colors-hex new-color)))]\n    [target kept new-data])\n\n  (update-color data id :name :hex new-color)\n\n\n  ())\n\n\n;; components have \"ports\" which define their inputs and outputs:\n;;\n;;      you SUBSCRIBE with a :port/sink, ie, data come IN   (re-frame/subscribe ...)\n;;\n;;      you PUBLISH to a :port/source, ie, data goes OUT    (re-frame/dispatch ...)\n;;\n;;      you do BOTH with :port/source-sink (both)           should we even have this, or should we spell out both directions?\n;;\n;; the question about :port/source-sink arises because building the layout (the call for the UI itself) doesn't actually\n;; need to make a distinction (in fact the code is a bit cleaner if we don't) and we have the callee sort it out (since it\n;; needs to implement the correct usage anyway). The flow-diagram, on the other hand, is easier if we DO make the\n;; distinction, so we can quickly build all the Nodes and Handles used for the diagram...\n\n\n\n;; endregion\n\n"]}