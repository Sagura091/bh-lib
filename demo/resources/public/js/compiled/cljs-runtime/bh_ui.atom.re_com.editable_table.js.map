{"version":3,"sources":["bh_ui/atom/re_com/editable_table.cljs"],"mappings":"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","names":["taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","bh-ui.atom.re-com.editable-table/sample-data","reagent.core.atom","bh-ui.utils.example-data/tabular-data","bh-ui.atom.re-com.editable-table/meta-sample-data","bh-ui.utils.example-data/meta-tabular-data","bh-ui.atom.re-com.editable-table/meta-coc-sample-data","cljs.core.assoc","bh-ui.utils.example-data/default-coc","p__59663","p__59664","vec__59665","cljs.core.nth","vec__59668","bh-ui.atom.re-com.editable-table/cell-click","dataset","editing-cell","editing-cell-content","rowidx","colidx","k","v","cljs.core._EQ_","cljs.core/reset!","cljs.core.into","cljs.core/deref","cljs.core.sort_by","p__59672","vec__59673","p1__59671#","bh-ui.atom.re-com.editable-table/edit-comp","re-com.util/px","re-com.core/input-text","js/goog.DEBUG","re-com.core/md-icon-button","cljs.core.swap_BANG_","cljs.core/assoc-in","cljs.core/key","cljs.core/last","p__59676","map__59677","cljs.core/--destructure-map","cljs.core.get","bh-ui.atom.re-com.editable-table/span-with-border","colname","name","background","height","width","font-size","is-editing?","and__4251__auto__","p__59682","vec__59683","bh-ui.atom.re-com.editable-table/build-header","vals","cljs.core.doall","cljs.core.map_indexed","idx","p__59690","vec__59691","bh-ui.atom.re-com.editable-table/build-row","row_height","row_index","row","values","cljs.core/vals","ks","cljs.core/keys","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","bh-ui.atom.re-com.editable-table/table*","p__59697","map__59698","seq59695","self__4852__auto__","cljs.core/seq","data","max-rows","p1__59694#","cljs.core.map","cljs.core.apply","cljs.core/merge","p__59700","vec__59701","light-blue","blue","gold","green","white","fib-ratio","unit-50","unit-31","js/Math.round","num-rows","or__4253__auto__","row-height","total-row-height","width-of-main-row-content","re-com.core/v-table","cljs.core.partial","bh-ui.atom.re-com.editable-table/non-meta-table","p__59708","map__59709","seq59707","cell-style-fn","on-click-row-fn","row-line-color","d","bh-ui.utils.helpers/resolve-value","bh-ui.atom.re-com.editable-table/meta-table","p__59712","map__59713","seq59711","coc?","re-com.core/h-box","re-com.core/popover-anchor-wrapper","cljs.core/not","re-com.core/popover-content-wrapper","bh-ui.atom.re-com.editable-table/table","p__59715","map__59716","seq59714"],"sourcesContent":["(ns bh-ui.atom.re-com.editable-table\n  (:require [bh-ui.utils.example-data :as ex]\n            [bh-ui.utils.helpers :as h]\n            [re-com.core :as rc]\n            [re-com.util :refer [px]]\n            [reagent.core :as r]\n            [taoensso.timbre :as log]))\n\n\n(log/info \"bh-ui.atom.re-com.editable-table\")\n\n\n(def sample-data (r/atom ex/tabular-data))\n(def meta-sample-data (r/atom ex/meta-tabular-data))\n(def meta-coc-sample-data (r/atom (assoc ex/meta-tabular-data\n                                    :c-o-c ex/default-coc)))\n\n\n(defn- cell-click [[dataset editing-cell editing-cell-content] [rowidx colidx] k v]\n  ;(log/info \"cell clicked: \" rowidx colidx k v)\n  (if (and (= -1 colidx) (= -1 rowidx))\n    (reset! dataset (into [] (sort-by v @dataset)))\n    (do\n      (reset! editing-cell {:row rowidx :col colidx k v})\n      (reset! editing-cell-content (str v)))))\n\n\n(defn- edit-comp [[dataset editing-cell editing-cell-content]]\n  [:div#editable {:style {:display        \"inline-block\"\n                          :vertical-align \"middle\"\n                          :width          (px 195)\n                          :height         (px 30)}}\n   [:div#input {:style {:display        \"inline-block\"\n                        :vertical-align \"middle\"}}\n    [rc/input-text :src (rc/at)\n     :model editing-cell-content\n     :width (px 135)\n     :height (px 25)\n     :style {:align-items \"bottom\"}\n     :change-on-blur? false\n     :on-change #(do\n                   ;(log/info \"edit-comp\" %)\n                   (reset! editing-cell-content %))]]\n   [:div#check {:style {:display        \"inline-block\"\n                        :vertical-align \"middle\"\n                        :padding        (px 2)}}\n    [rc/md-icon-button :src (rc/at)\n     :style {:display \"inline-block\"}\n     :md-icon-name \"zmdi-check\"\n     :size :smaller\n     :on-click #(do\n                  ;(log/info \"check\" [(:row @editing-cell) (key (last @editing-cell))] \"//\" @editing-cell-content)\n                  (swap! dataset assoc-in [(:row @editing-cell)\n                                           (key (last @editing-cell))]\n                    @editing-cell-content)\n                  (reset! editing-cell nil)\n                  (reset! editing-cell-content nil))]]\n   [:div#cancel {:style {:display        \"inline-block\"\n                         :vertical-align \"middle\"\n                         :padding        (px 2)}}\n    [rc/md-icon-button :src (rc/at)\n     :style {:display \"inline-block\"}\n     :md-icon-name \"zmdi-delete\"\n     :size :smaller\n     :on-click #(do (reset! editing-cell-content nil)\n                    (reset! editing-cell nil))]]])\n\n\n(defn- span-with-border [{:keys [dataset\n                                 editing-cell editing-cell-content\n                                 rowidx colidx\n                                 colname\n                                 name\n                                 background height width font-size]}]\n  (let [is-editing? (r/atom (= [(:row @editing-cell)\n                                (:col @editing-cell)]\n                              [rowidx colidx]))]\n\n    ;(log/info \"span-with-border\" [rowidx colidx] name colname)\n\n    (if (and @is-editing?\n          (not (= colidx -1)))\n      [edit-comp [dataset editing-cell editing-cell-content]]\n      [:span {:style    {:position         \"static\"\n                         :width            (px width)\n                         :height           (px height)\n                         :border-radius    \"2px\"\n                         :border           \"solid grey 2px\"\n                         :vertical-align   \"middle\"\n                         :background-color background\n                         :display          \"inline-block\"\n                         :text-align       \"center\"\n                         :white-space      \"nowrap\"\n                         :overflow         \"hidden\"\n                         :text-overflow    \"ellipsis\"\n                         :color            \"black\"\n                         :font-size        font-size\n                         :cursor           \"pointer\"}\n              :on-click #(cell-click\n                           [dataset editing-cell editing-cell-content]\n                           [rowidx colidx] colname name)}\n       (str name)])))\n\n\n(defn- build-header [[dataset editing-cell editing-cell-content]\n                     height vals]\n  ;(log/info \"build-header\" vals)\n\n  [:div {:class \"headers\"\n         :style {:display    \"inline-block\"\n                 :text-align \"center\"}}\n   (doall\n     (map-indexed\n       (fn [idx v]\n         ^{:key [idx]} [span-with-border {:name                 v\n                                          :rowidx               -1 :colidx -1\n                                          :font-size            20\n                                          :background           \"#60A0D8\"\n                                          :height               height :width 195\n                                          :dataset              dataset\n                                          :editing-cell         editing-cell\n                                          :editing-cell-content editing-cell-content}])\n       vals))])\n\n\n(defn- build-row [[dataset editing-cell editing-cell-content]\n                  row_height row_index row]\n\n  ;(log/info \"build-row\" row)\n\n  (let [values (vals row)\n        ks     (into [] (keys row))]\n    [:div {:class (str \"row\" row_index)\n           :style {:display    \"inline-block\"\n                   :text-align \"center\"}}\n     (doall\n       (map-indexed\n         (fn [idx v]\n           ^{:key [row_index idx (get ks idx)]}\n           [span-with-border {:rowidx               row_index :colidx idx\n                              :colname              (get ks idx)\n                              :name                 v\n                              :font-size            14\n                              :background           \"#ffffff\" :height row_height :width 195\n                              :dataset              dataset\n                              :editing-cell         editing-cell\n                              :editing-cell-content editing-cell-content}]) values))]))\n\n\n(defn- table* [& {:keys [data width height max-rows]}]\n  ; the apply/merge/map below is to stringify all the values so sorting still works once a value is edited\n  ; this will need more modification/thought once we move beyond strings/ints in the table cells\n  (let [dataset                   (r/atom\n                                    (->> @data\n                                      (map #(apply merge (map (fn [[k v]]\n                                                                {k (str v)}) %)))\n                                      (into [])))\n        editing-cell              (r/atom nil)\n        editing-cell-content      (r/atom nil)\n\n        light-blue                \"#d860a0\"\n        blue                      \"#60A0D8\"\n        gold                      \"#d89860\"\n        green                     \"#60d898\"\n        white                     \"#ffffff\"\n\n        fib-ratio                 0.618                     ;; fibonacci ratios to make the visuals look pretty\n        unit-50                   50                        ;; base for fibonacci calulations\n        unit-31                   (js/Math.round (* unit-50 fib-ratio))  \n\n        num-rows                  (or max-rows 5)\n        row-height                unit-31\n        total-row-height          (* num-rows row-height)\n\n        width-of-main-row-content (js/Math.round (/ total-row-height fib-ratio))]\n        ;dummy-rows                (r/atom (mapv #(hash-map :id %1) (range num-rows)))]\n    (fn []\n\n      ;(log/info \"table* INSIDE\" data \"//\" @dataset)\n\n      [rc/v-table :src (rc/at)\n       :model dataset\n       :max-width \"inherit\"\n\n       ;; Data Rows (section 5)\n       ;:row-renderer            (fn [_row_index, _row] [box-with-border {:name (str (:id _row)) :background light-blue :height row-height :width width-of-main-row-content}])\n       :row-renderer (partial build-row [dataset editing-cell editing-cell-content] row-height)\n       :row-content-width 1000\n       :row-height row-height\n       :max-row-viewport-height total-row-height            ;; force a vertical scrollbar\n\n       ;; row header/footer (sections 2,8)\n       ;:row-header-renderer     (fn [_row-index, _row] [box-with-border {:name \":row-header-renderer \" :background green :height unit-31 :width unit-121}])\n       ;:row-footer-renderer     (fn [_row-index, _row] [box-with-border {:name \":row-footer-renderer\"  :background green :height unit-31 :width unit-121}])\n\n       ;; column header/footer (sections 4,6)\n       ;:column-footer-renderer  (fn [] [edit-comp])\n       ;:column-footer-height    unit-50\n\n       ;; 4 corners (sections 1,3,7,9)\n       ;:top-left-renderer       (fn [] [box-with-border {:name \":top-left-renderer\"     :background white  :height unit-50 :width unit-121}])\n       ;:bottom-left-renderer    (fn [] [box-with-border {:name \":bottom-left-renderer\"  :background white  :height unit-50 :width unit-121}])\n       ;:top-right-renderer      (fn [] [box-with-border {:name \":top-right-renderer\"    :background white  :height unit-50 :width unit-121}])\n       ;:bottom-right-renderer   (fn [] [box-with-border {:name \":bottom-right-renderer\" :background white  :height unit-50 :width unit-121}])\n\n       :column-header-renderer (fn [] [build-header\n                                       [dataset editing-cell editing-cell-content]\n                                       (+ row-height 10)\n                                       (into (keys (get @data 0)))])\n       :column-header-height 40])))\n\n\n(defn- non-meta-table [& {:keys [data max-rows width height cell-style-fn\n                                 on-click-row-fn row-line-color]}]\n  (let [d (h/resolve-value data)]\n    ;(log/info \"non-meta-table\" data \"//\" @d)\n    (fn []\n      [table*\n        :data d\n        :max-rows max-rows\n        :width width\n        :height height\n        :row-line-color row-line-color\n        :on-click-row on-click-row-fn\n        :cell-style-fn cell-style-fn])))\n\n\n(defn- meta-table [& {:keys [data max-rows width height cell-style-fn\n                             on-click-row-fn row-line-color]}]\n  (let [d (h/resolve-value data)]\n    (fn []\n\n      (let [coc? (r/atom false)]\n        ;(log/info \"meta-table\" data \"//\" @d \"//\" (:data @d))\n\n        [:div.card {:style {:width  (or width \"100%\") :height (or height \"100%\")\n                            :margin :auto}}\n         [:h3 (-> @d :metadata :title)]\n         [rc/h-box :src (rc/at)\n          :gap \"2px\"\n          :children [[table*\n                      :data (h/resolve-value (if (:data @d) (:data @d) []))\n                      :max-rows max-rows\n                      :width width\n                      :height height\n                      :row-line-color row-line-color\n                      :on-click-row on-click-row-fn\n                      :cell-style-fn cell-style-fn]\n                     (when (seq (:c-o-c @d))\n                       [:div\n                        [rc/popover-anchor-wrapper :src (rc/at)\n                         :showing? coc?\n                         :position :below-center\n                         :anchor [rc/md-icon-button\n                                  :md-icon-name \"zmdi zmdi-badge-check\"\n                                  :tooltip \"view chain-of-custody\"\n                                  :on-click #(swap! coc? not)]\n                         :popover [rc/popover-content-wrapper :src (rc/at)\n                                   :title \"Chain-of-Custody\"\n                                   :body [table*\n                                          :data (:c-o-c @d)\n                                          :width \"400px\"\n                                          :max-width \"400px\"\n                                          :max-rows 3]]]])]]]))))\n\n\n(defn table [& {:keys [data max-rows width height cell-style-fn\n                       on-click-row-fn row-line-color]}]\n  (let [d (h/resolve-value data)]\n    ;(log/info \"table\" data \"//\" @d \"//\" (:data @d))\n    (if (:metadata @d)\n      [meta-table\n       :data data\n       :max-rows max-rows\n       :width width\n       :height height\n       :cell-style-fn cell-style-fn\n       :on-click-row-fn on-click-row-fn\n       :row-line-color row-line-color]\n      [non-meta-table\n       :data data\n       :max-rows max-rows\n       :width width\n       :height height\n       :cell-style-fn cell-style-fn\n       :on-click-row-fn on-click-row-fn\n       :row-line-color row-line-color])))\n\n\n\n\n; Testing out row building\n(comment\n  (def data sample-data)\n  ;(sort-by :pv @dataset)\n  (map #(map (fn [k v] (str v)) %) @data)\n  (into [] (map #(apply merge (map (fn [[k v]] {k (str v)}) %)) @dataset))\n\n  (keys (get @data 2))\n  (mapv #(merge {:id (:name %)} %) @data)\n  (mapv #(clojure.set/rename-keys % {:name :id}) @data)\n\n  (map (fn [k v] [box-with-border {:name       (str v)\n                                   :background \"#d860a0\"\n                                   :height     30\n                                   :width      50}]) (get @data 0))\n  (build-row 1 (get @data 0))\n\n\n  (def row {:id \"Page A\", :kp 2000, :uv 4000, :pv 2400, :amt 2400})\n  (def values (vals row))\n  (-> (into [] (map #(vector box-with-border {:name (str %) :background \"#d860a0\" :height 30 :width 500}) values))\n    (with-meta {:key (rand-int 30)}))\n  ^{:key (rand-int 30)}\n\n  @is-editing?\n  @dataset\n  (assoc-in @dataset [(:row @editing-cell) (key (last @editing-cell))] @editing-cell-content)\n  (swap! dataset update-in [(:row @editing-cell) (key (last @editing-cell))] @editing-cell-content)\n\n\n  ())\n\n\n\n"]}