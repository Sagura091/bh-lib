{"version":3,"sources":["bh_ui/utils/example_data.cljs"],"mappings":"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","names":["taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","bh-ui.utils.example-data/default-coc","js/Date","cljs-uuid-utils.core/uuid-string","cljs-uuid-utils.core/make-random-uuid","cljs.spec.alpha/def-impl","cljs.spec.alpha/and-spec-impl","cljs.core/string?","cljs.spec.alpha/map-spec-impl","G__58514","cljs.core/map?","cljs.core/contains?","cljs.spec.alpha.every_impl","G__58526","cljs.core/coll?","bh-ui.utils.example-data/coc-step","bh-ui.utils.example-data/coc-step-map","bh-ui.utils.example-data/coc-by","bh-ui.utils.example-data/coc-version","bh-ui.utils.example-data/coc-at","bh-ui.utils.example-data/coc-signature","bh-ui.utils.example-data/coc-entry","bh-ui.utils.example-data/tabular-data","bh-ui.utils.example-data/grouped-tabular-data","bh-ui.utils.example-data/tabular-column-config-data","bh-ui.utils.example-data/tabular-row-config-data","bh-ui.utils.example-data/tabular-data-org","G__58536","bh-ui.utils.example-data/field-name","bh-ui.utils.example-data/tabular-data-entry","cljs.core/any?","bh-ui.utils.example-data/tabular-data-data","bh-ui.utils.example-data/example-tabular-data-entry","cljs.core/number?","bh-ui.utils.example-data/example-tabular-data-data","bh-ui.utils.example-data/meta-tabular-data","bh-ui.utils.example-data/BAD-meta-tabular-data-missing-type","bh-ui.utils.example-data/BAD-meta-tabular-data-bad-field","cljs.core/keyword?","cljs.spec.alpha.tuple_impl","G__58541","i__11803__auto__","v__11804__auto__","cljs.core.nth","G__58546","G__58558","bh-ui.utils.example-data/data-type","bh-ui.utils.example-data/data-id","bh-ui.utils.example-data/data-title","bh-ui.utils.example-data/data-fields","bh-ui.utils.example-data/data-metadata","bh-ui.utils.example-data/tabular-data-meta-data","bh-ui.utils.example-data/example-data-fields","bh-ui.utils.example-data/example-data-metadata","bh-ui.utils.example-data/example-tabular-data-meta-data","bh-ui.utils.example-data/pos-int-limit","bh-ui.utils.example-data/example-positive-tabular-data-entry","bh-ui.utils.example-data/example-positive-tabular-data-data","bh-ui.utils.example-data/example-positive-tabular-data-meta-data","bh-ui.utils.example-data/random-tabular-data","malli.generator.generate","bh-ui.utils.example-data/random-meta-tabular-data","bh-ui.utils.example-data/random-meta-positive-tabular-data","bh-ui.utils.example-data/some-other-tabular","bh-ui.utils.example-data/paired-data","bh-ui.utils.example-data/triplet-data","bh-ui.utils.example-data/hierarchy-data","bh-ui.utils.example-data/dag-data","bh-ui.utils.example-data/m-dag-data-spec","cljs.core/int?","bh-ui.utils.example-data/m-hierarchy-data-spec","bh-ui.utils.example-data/dag-config-data"],"sourcesContent":["(ns bh-ui.utils.example-data\n  (:require [bh-ui.subs :as subs]\n            [cljs-uuid-utils.core :as uuid]\n            [cljs.spec.alpha :as spec]\n            [clojure.test.check.generators :as gen]\n            [expound.alpha :as expound]\n            [malli.core :as m]\n            [malli.error :as me]\n            [malli.generator :as mg]\n            [malli.provider :as mp]\n            [re-frame.core :as re-frame]\n            [taoensso.timbre :as log]))\n\n\n(log/info \"bh-ui.utils.example-data\")\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;\n; SOME EXAMPLE DATA\n;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;\n; Chain-of-Custody data\n;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; region\n(def default-coc [{:coc/step      :generated\n                   :coc/by        \"bh-ui.atom.bhui.table\"\n                   :coc/version   \"no version\"\n                   :coc/at        (str (js/Date.))\n                   :coc/signature (uuid/uuid-string (uuid/make-random-uuid))}])\n\n; in clojure.spec (2)\n(spec/def :coc/step (spec/and #{:generated :updated :deleted}))\n(spec/def :coc/by string?)\n(spec/def :coc/version string?)\n(spec/def :coc/at string?)\n(spec/def :coc/signature string?)\n(spec/def :coc/entry (spec/keys :req [:coc/step :coc/by :coc/version\n                                      :coc/at :coc/signature]))\n(spec/def :coc/coc (spec/coll-of :coc/entry))\n\n(comment\n  (spec/valid? :coc/entry {:coc/step      :generated\n                           :coc/by        \"bh-ui.atom.bhui.table\"\n                           :coc/version   \"no version\"\n                           :coc/at        (str (js/Date.))\n                           :coc/signature (uuid/uuid-string (uuid/make-random-uuid))})\n  (spec/valid? :coc/entry {:coc/step      :generated\n                           :coc/by        \"bh-ui.atom.bhui.table\"\n                           :coc/version   \"no version\"\n                           :coc/at        (js/Date.)\n                           :coc/signature (uuid/make-random-uuid)})\n  (spec/explain :coc/entry {:coc/step      :generated\n                            :coc/by        \"bh-ui.atom.bhui.table\"\n                            :coc/version   \"no version\"\n                            :coc/at        (js/Date.)\n                            :coc/signature (uuid/make-random-uuid)})\n  (spec/valid? :coc/coc default-coc)\n\n  ())\n\n\n; in Malli\n(def coc-step [:enum :generated :updated :deleted])\n(def coc-step-map [:map [:coc/step coc-step]])\n(def coc-by string?)\n(def coc-version string?)\n(def coc-at string?)\n(def coc-signature string?)\n(def coc-entry [:map\n                [:coc/step coc-step]\n                [:coc/by coc-by]\n                [:coc/version coc-version]\n                [:coc/at coc-at]\n                [:coc/signature coc-signature]])\n\n\n(comment\n  (m/validate coc-step :generated)\n  (m/validate coc-step :dummy)\n\n  (def entry {:coc/step      :generated\n              :coc/by        \"bh-ui.atom.bhui.table\"\n              :coc/version   \"no version\"\n              :coc/at        (str (js/Date.))\n              :coc/signature (uuid/uuid-string (uuid/make-random-uuid))})\n\n\n  (m/validate coc-entry entry)\n  (m/explain coc-entry entry)\n\n\n  ; generate some data\n  (mg/generate coc-step)\n  (mg/generate coc-version)\n  (mg/generate coc-entry {:size 64})\n\n  (mg/sample coc-entry {:size 25})\n\n  (gen/sample (mg/generator pos-int?))\n\n\n  ())\n;; endregion\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;\n; Tabular Data examples\n;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; region\n(def tabular-data [{:name \"Page A\" :uv 4000 :pv 2400 :tv 1500 :amt 2400}\n                   {:name \"Page B\" :uv 3000 :pv 1398 :tv 1500 :amt 2210}\n                   {:name \"Page C\" :uv 2000 :pv 9800 :tv 1500 :amt 2290}\n                   {:name \"Page D\" :uv 2780 :pv 3908 :tv 1500 :amt 2000}\n                   {:name \"Page E\" :uv 1890 :pv 4800 :tv 1500 :amt 2181}\n                   {:name \"Page F\" :uv 2390 :pv 3800 :tv 1500 :amt 2500}\n                   {:name \"Page G\" :uv 3490 :pv 4300 :tv 1500 :amt 2100}])\n\n\n(def grouped-tabular-data [{:name \"Page-A\" :values [{:uv 4000 :pv 2400 :amt 400}\n                                                    {:uv 1000 :pv 400 :amt 2300}\n                                                    {:uv 2000 :pv 3400 :amt 5400}\n                                                    {:uv 3000 :pv 2498 :amt 5400}]}])\n\n\n(def tabular-column-config-data {:brush false\n                                 :uv    {:include true :fill \"#ff0000\" :stroke \"#ff0000\"\n                                         :name    :uv :stackId \"\" :fillOpacity 0.6}\n                                 :pv    {:include true :fill \"#00ff00\" :stroke \"#00ff00\"\n                                         :name    :pv :stackId \"\" :fillOpacity 0.6}\n                                 :tv    {:include true :fill \"#0000ff\" :stroke \"#0000ff\"\n                                         :name    :tv :stackId \"a\" :fillOpacity 0.6}\n                                 :amt   {:include true :fill \"#ff00ff\" :stroke \"#ff00ff\"\n                                         :name    :amt :stackId \"a\" :fillOpacity 0.6}})\n\n\n; TODO: convert :color to :fill/:stroke throughout\n(def tabular-row-config-data {:Page-A {:name \"Page A\" :include true :color \"#ff0000\"} ;\"#8884d8\"}\n                              :Page-B {:name \"Page B\" :include true :color \"#00ff00\"} ;\"#ffc107\"}\n                              :Page-C {:name \"Page C\" :include true :color \"#0000ff\"} ;\"#82ca9d\"}\n                              :Page-D {:name \"Page D\" :include true :color \"#ffff00\"} ;\"#ff00ff\"}\n                              :Page-E {:name \"Page E\" :include true :color \"#ff00ff\"} ;\"#00e5ff\"}\n                              :Page-F {:name \"Page F\" :include true :color \"#00ffff\"} ;\"#4db6ac\"}\n                              :Page-G {:name \"Page G\" :include true :color \"#888888\"} ;\"#83a6ed\"}\n                              :value  {:keys [:uv :pv :tv :amt] :chosen :uv}})\n\n\n(def tabular-data-org [{:name \"Page A\" :org \"Alpha\" :uv 4000 :pv 2400 :amt 2400}\n                       {:name \"Page B\" :org \"Bravo\" :uv 3000 :pv 1398 :amt 2210}\n                       {:name \"Page C\" :org \"Charlie\" :uv 2000 :pv 9800 :amt 2290}\n                       {:name \"Page D\" :org \"Delta\" :uv 2780 :pv 3908 :amt 2000}\n                       {:name \"Page E\" :org \"Echo\" :uv 1890 :pv 4800 :amt 2181}\n                       {:name \"Page F\" :org \"Foxtrot\" :uv 2390 :pv 3800 :amt 2500}\n                       {:name \"Page G\" :org \"Gamma\" :uv 3490 :pv 4300 :amt 2100}])\n\n\n; in clojure.spec (2)\n(spec/def :tabular-data/entry map?)\n(spec/def :tabular-data/data (spec/coll-of :tabular-data/entry))\n\n\n(comment\n  (spec/valid? :tabular-data/data tabular-data)\n  (spec/valid? :tabular-data/data tabular-data-org)\n\n  ())\n\n\n; in Malli\n\n;(def tabular-data-entry map?)\n(def field-name [:keyword])\n(def tabular-data-entry [:map-of field-name any?])\n(def tabular-data-data [:sequential tabular-data-entry])\n\n(def example-tabular-data-entry [:map\n                                 [:name string?] [:uv number?]\n                                 [:pv number?] [:tv number?] [:amt number?]])\n(def example-tabular-data-data [:sequential example-tabular-data-entry])\n\n(comment\n  (m/validate tabular-data-data tabular-data)\n  (m/validate tabular-data-data tabular-data-org)\n\n  (mg/generate tabular-data-data)\n\n\n  (m/validate example-tabular-data-data tabular-data)\n  (mg/generate example-tabular-data-data)\n\n  ())\n\n;; endregion\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;\n; Tabular Data with Meta-data examples\n;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; region\n\n(def meta-tabular-data\n  {:metadata {:type   :data/tabular\n              :id     :name\n              :title  \"Tabular Data with Metadata\"\n              :fields {:name :string :uv :number :pv :number :tv :number :amt :number}}\n   :data     tabular-data})\n\n(def BAD-meta-tabular-data-missing-type\n  {:metadata {:id     :name\n              :title  \"Tabular Data with Metadata\"\n              :fields {:name :string :uv :number :pv :number :tv :number :amt :number}}\n   :data     tabular-data})\n(def BAD-meta-tabular-data-bad-field\n  {:metadata {:type   :data/tabular\n              :id     :name\n              :title  \"Tabular Data with Metadata\"\n              :fields {:name :keyword}}\n   :data     tabular-data})\n\n; in clojure.spec (2)\n; TODO: spec needs to include the actual \"example\" data format so we can generate random values\n(spec/def :data/type #{:data/tabular :data/entity})\n(spec/def :data/id keyword?)\n(spec/def :data/title string?)\n(spec/def :data/fields (spec/map-of keyword? #{:string :number}))\n(spec/def :data/metadata (spec/keys :req-un [:data/type :data/fields] :opt-un [:data/id :data/title]))\n(spec/def :data/data :tabular-data/data)\n(spec/def :tabular-data/meta-data (spec/keys :req-un [:data/metadata :data/data]))\n\n\n(comment\n  (spec/valid? :tabular-data/meta-data meta-tabular-data)\n  (spec/valid? :tabular-data/meta-data BAD-meta-tabular-data-missing-type)\n\n  (spec/explain :tabular-data/meta-data BAD-meta-tabular-data-missing-type)\n  (spec/explain :tabular-data/meta-data BAD-meta-tabular-data-bad-field)\n\n  (expound/expound-str :tabular-data/meta-data meta-tabular-data)\n  (expound/expound :tabular-data/meta-data BAD-meta-tabular-data-missing-type)\n  (expound/expound-str :tabular-data/meta-data BAD-meta-tabular-data-missing-type)\n\n  (expound/expound :tabular-data/meta-data BAD-meta-tabular-data-bad-field)\n  (def error (expound/expound-str :tabular-data/meta-data BAD-meta-tabular-data-bad-field))\n\n\n  ; we can use re-com/alert-list data structure to display spec failures in place of the\n  ; expected UI using the \"NEW\" alert-list bh-ui\n\n  (def alert-msg {:id   0 :alert-type :danger :heading \"Parameter Error (Spec Failed)\"\n                  :body error :padding \"8px\" :closeable? false})\n\n  ())\n\n\n; in Malli\n(def data-type [:enum :data/tabular :data/entity])\n(def data-id keyword?)\n(def data-title string?)\n(def data-fields [:map-of keyword? [:enum {:error/message \"should be: :string OR :number\"}\n                                    :string :number]])\n(def data-metadata [:map\n                    [:type data-type] [:fields data-fields]\n                    [:id {:optional true} data-id] [:title {:optional true} data-title]])\n(def tabular-data-meta-data [:map\n                             [:metadata data-metadata]\n                             [:data tabular-data-data]])\n\n\n(def example-data-fields [:map [:name [:enum :string]] [:uv [:enum :number]]\n                          [:pv [:enum :number]] [:tv [:enum :number]] [:amt [:enum :number]]])\n(def example-data-metadata [:map\n                            [:type [:enum :data/tabular]] [:fields example-data-fields]\n                            [:id [:enum :name]] [:title {:optional true} data-title]])\n(def example-tabular-data-meta-data [:map\n                                     [:metadata example-data-metadata]\n                                     [:data example-tabular-data-data]])\n\n(def pos-int-limit [:any {:gen/schema [:int {:min 500, :max 8000}]}])\n(def example-positive-tabular-data-entry [:map\n                                          [:name string?] [:uv pos-int-limit]\n                                          [:pv pos-int-limit] [:tv pos-int-limit] [:amt pos-int-limit]])\n(def example-positive-tabular-data-data [:sequential example-positive-tabular-data-entry])\n(def example-positive-tabular-data-meta-data [:map\n                                              [:metadata example-data-metadata]\n                                              [:data example-positive-tabular-data-data]])\n\n\n(comment\n  (m/validate tabular-data-meta-data meta-tabular-data)\n  (m/validate tabular-data-meta-data BAD-meta-tabular-data-missing-type)\n  (m/explain tabular-data-meta-data BAD-meta-tabular-data-missing-type)\n\n  (m/validate tabular-data-meta-data BAD-meta-tabular-data-bad-field)\n  (->> BAD-meta-tabular-data-bad-field\n    (m/explain tabular-data-meta-data)\n    (me/humanize))\n\n  (m/validate example-tabular-data-meta-data meta-tabular-data)\n\n  (mg/generate example-tabular-data-meta-data)\n\n  (mg/generate [:any {:gen/schema [:int {:min 500, :max 8000}]}])\n\n  (mg/generate example-positive-tabular-data-meta-data)\n\n\n  ())\n\n\n(defn random-tabular-data []\n  (mg/generate example-tabular-data-data))\n\n\n(defn random-meta-tabular-data []\n  (mg/generate example-tabular-data-meta-data))\n\n\n(defn random-meta-positive-tabular-data []\n  (mg/generate example-positive-tabular-data-meta-data))\n\n;; endregion\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;\n; Other data structures\n;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; region\n\n(def some-other-tabular [{:id \"Page A\" :a 4000 :b 2400 :c 2400}\n                         {:id \"Page B\" :a 3000 :b 1398 :c 2210}\n                         {:id \"Page C\" :a 2000 :b 9800 :c 2290}\n                         {:id \"Page D\" :a 2780 :b 3908 :c 2000}\n                         {:id \"Page E\" :a 1890 :b 4800 :c 2181}\n                         {:id \"Page F\" :a 2390 :b 3800 :c 2500}\n                         {:id \"Page G\" :a 3490 :b 4300 :c 2100}])\n\n\n(def paired-data [{:name \"Group A\" :value 400}\n                  {:name \"Group B\" :value 300}\n                  {:name \"Group C\" :value 300}\n                  {:name \"Group D\" :value 200}\n                  {:name \"Group E\" :value 278}\n                  {:name \"Group F\" :value 189}])\n\n\n(def triplet-data [{:x 100 :y 200 :z 200}\n                   {:x 110 :y 280 :z 200}\n                   {:x 120 :y 100 :z 260}\n                   {:x 140 :y 250 :z 280}\n                   {:x 150 :y 400 :z 500}\n                   {:x 170 :y 300 :z 400}])\n\n\n(def hierarchy-data [{:name     \"axis\"\n                      :children [{:name \"Axis\" :size 24593}\n                                 {:name \"Axes\" :size 1302}\n                                 {:name \"AxisGridLine\" :size 652}\n                                 {:name \"AxisLabel\" :size 636}\n                                 {:name \"CartesianAxes\" :size 6703}]}\n                     {:name     \"controls\"\n                      :children [{:name \"TooltipControl\" :size 8435}\n                                 {:name \"SelectionControl\" :size 7862}\n                                 {:name \"PanZoomControl\" :size 5222}\n                                 {:name \"HoverControl\" :size 4896}\n                                 {:name \"ControlList\" :size 4665}\n                                 {:name \"ClickControl\" :size 3824}\n                                 {:name \"ExpandControl\" :size 2832}\n                                 {:name \"DragControl\" :size 2649}\n                                 {:name \"AnchorControl\" :size 2138}\n                                 {:name \"Control\" :size 1353}\n                                 {:name \"IControl\" :size 763}]}\n                     {:name     \"data\"\n                      :children [{:name \"Data\" :size 20544}\n                                 {:name \"NodeSprite\" :size 19382}\n                                 {:name \"DataList\" :size 19788}\n                                 {:name \"DataSprite\" :size 10349}\n                                 {:name \"EdgeSprite\" :size 3301}\n                                 {:name     \"render\"\n                                  :children [{:name \"EdgeRenderer\" :size 5569}\n                                             {:name \"ShapeRenderer\" :size 2247}\n                                             {:name \"ArrowType\" :size 698}\n                                             {:name \"IRenderer\" :size 353}]}\n                                 {:name \"ScaleBinding\" :size 11275}\n                                 {:name \"TreeBuilder\" :size 9930}\n                                 {:name \"Tree\" :size 7147}]}\n                     {:name     \"events\"\n                      :children [{:name \"DataEvent\" :size 7313}\n                                 {:name \"SelectionEvent\" :size 6880}\n                                 {:name \"TooltipEvent\" :size 3701}\n                                 {:name \"VisualizationEvent\" :size 2117}]}\n                     {:name     \"legend\"\n                      :children [{:name \"Legend\" :size 20859}\n                                 {:name \"LegendRange\" :size 10530}\n                                 {:name \"LegendItem\" :size 4614}]}\n                     {:name     \"operator\"\n                      :children [{:name     \"distortion\"\n                                  :children [{:name \"Distortion\" :size 6314}\n                                             {:name \"BifocalDistortion\" :size 4461}\n                                             {:name \"FisheyeDistortion\" :size 3444}]}\n                                 {:name     \"encoder\"\n                                  :children [{:name \"PropertyEncoder\" :size 4138}\n                                             {:name \"Encoder\" :size 4060}\n                                             {:name \"ColorEncoder\" :size 3179}\n                                             {:name \"SizeEncoder\" :size 1830}\n                                             {:name \"ShapeEncoder\" :size 1690}]}\n                                 {:name     \"filter\"\n                                  :children [{:name \"FisheyeTreeFilter\" :size 5219}\n                                             {:name \"VisibilityFilter\" :size 3509}\n                                             {:name \"GraphDistanceFilter\" :size 3165}]}\n                                 {:name \"IOperator\" :size 1286}\n                                 {:name     \"label\"\n                                  :children [{:name \"Labeler\" :size 9956}\n                                             {:name \"RadialLabeler\" :size 3899}\n                                             {:name \"StackedAreaLabeler\" :size 3202}]}\n                                 {:name     \"layout\"\n                                  :children [{:name \"RadialTreeLayout\" :size 12348}\n                                             {:name \"NodeLinkTreeLayout\" :size 12870}\n                                             {:name \"CirclePackingLayout\" :size 12003}\n                                             {:name \"CircleLayout\" :size 9317}\n                                             {:name \"TreeMapLayout\" :size 9191}\n                                             {:name \"StackedAreaLayout\" :size 9121}\n                                             {:name \"Layout\" :size 7881}\n                                             {:name \"AxisLayout\" :size 6725}\n                                             {:name \"IcicleTreeLayout\" :size 4864}\n                                             {:name \"DendrogramLayout\" :size 4853}\n                                             {:name \"ForceDirectedLayout\" :size 8411}\n                                             {:name \"BundledEdgeRouter\" :size 3727}\n                                             {:name \"IndentedTreeLayout\" :size 3174}\n                                             {:name \"PieLayout\" :size 2728}\n                                             {:name \"RandomLayout\" :size 870}]}\n                                 {:name \"OperatorList\" :size 5248}\n                                 {:name \"OperatorSequence\" :size 4190}\n                                 {:name \"OperatorSwitch\" :size 2581}\n                                 {:name \"Operator\" :size 2490}\n                                 {:name \"SortOperator\" :size 2023}]}])\n\n\n(def dag-data {:nodes #{{:name :Visit :index 0}\n                        {:name :Direct-Favourite :index 1}\n                        {:name :Page-Click :index 2}\n                        {:name :Detail-Favourite :index 3}\n                        {:name :Lost :index 4}}\n               :links #{{:source :Visit :target :Direct-Favourite :value 37283}\n                        {:source :Visit :target :Page-Click :value 354170}\n                        {:source :Page-Click :target :Detail-Favourite :value 62429}\n                        {:source :Page-Click :target :Lost :value 291741}}})\n\n\n; these Malli specs were built (inferred) using \"provide\"\n(def m-dag-data-spec [:map\n                      [:nodes [:set [:map [:name keyword?] [:index int?]]]]\n                      [:links [:set [:map [:source keyword?]\n                                     [:target keyword?] [:value int?]]]]])\n(def m-hierarchy-data-spec [:vector\n                            [:map\n                             [:name string?]\n                             [:children\n                              [:vector\n                               [:map\n                                [:name string?]\n                                [:size {:optional true} int?]\n                                [:children {:optional true} [:vector [:map [:name string?] [:size int?]]]]]]]]])\n\n\n; create Malli from the data itself!\n(comment\n  (mp/provide [dag-data dag-data dag-data])\n\n  (m/validate m-dag-data-spec dag-data)\n\n\n  (m/validate (mp/provide [hierarchy-data]) hierarchy-data)\n  (m/validate m-hierarchy-data-spec hierarchy-data)\n\n  ())\n\n\n(def dag-config-data {:Visit            {:include true :fill \"#ff0000\" :stroke \"#ff0000\"}\n                      :Direct-Favourite {:include true :fill \"#00ff00\" :stroke \"#00ff00\"}\n                      :Page-Click       {:include true :fill \"#0000ff\" :stroke \"#0000ff\"}\n                      :Detail-Favourite {:include true :fill \"#12a4a4\" :stroke \"#12a4a4\"}\n                      :Lost             {:include true :fill \"#ba7b47\" :stroke \"#ba7b47\"}})\n\n\n\n\n;; endregion\n\n"]}