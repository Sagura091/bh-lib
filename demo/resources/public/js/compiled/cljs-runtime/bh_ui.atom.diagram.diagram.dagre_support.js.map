{"version":3,"sources":["bh_ui/atom/diagram/diagram/dagre_support.cljs"],"mappings":";AAMA,AAAAA,0DAAAC,mCAAA,qDAAA,2CAAA,KAAA,EAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA;GAAA,OAAA,KAAA,UAAA;AAGA,AAAA;;;;;uDAAA,+DAAAC,tHAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,mFAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,mFAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,qFAAA,rFAAMD,gGAIFE,MAAMC;AAJV,AAKG,IAAMC,aAAW,KAAK,AAASC;gBAA/B,ZACMC;iBADN,bAEMC;AAFN,AAIE,AAAsBH,+BAAW,qBAAA,rBAACI;;AAClC,AAAWJ,oBAAW,qBAAA,2CAAA,4DAAA,5HAACI;;AAEvB,AAACC,8CACC,AAACC,4CAAI,WAAKC;AAAL,AACE,OAAUP,mBAAW,AAAA,gFAAKO,SACxB,qBAAA,2CAAA,iEAAA,jIAACH,uHAAgBF,mEAAkBC;GAC1CL;;AAEJ,AAACO,8CACC,AAACC,4CAAI,WAAKC;AAAL,AACE,OAAUP,mBAAW,AAAA,uFAASO,SAAS,AAAA,sFAASA;GACrDR;;AAEJC;;;AAvBL,CAAA,qFAAA,rFAAMJ,gGAyBFY;AAzBJ,AA0BG,OAACC,mFAAY,AAAA,sFAAQD,OAAO,AAAA,qFAAQA;;;AA1BvC,CAAA,+EAAA,/EAAMZ;;AAAN,AA6BA,AAAA;;;;;wDAAA,gEAAAF,xHAAMiB;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,oFAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,oFAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAd,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,sFAAA,tFAAMc,iGAIFb,MAAMC;AAJV,AAKG,IAAMC,aAAW,AAACS,mFAAYX,MAAMC;gBAApC,ZACMG;iBADN,bAEMC;AAFN,AAIE,AAASS,mCAAMZ;;AAEf,UAAA,2CAAA,jDAAMa,yGAAY,AAACR,8CACC,AAACC,4CAAI,WAAKC;AAAL,AACE,IAAMO,YAAU,AAAOd,gBAAW,AAACI,qBAAQ,AAAA,gFAAKG;IAC1CQ,IAAU,CAAG,AAAKD,cAAW,aAAA,ZAAGZ;IAChCc,IAAU,CAAG,AAAKF,cAAW,cAAA,bAAGX;AAFtC,AAIE,oEAAA,8DAAA,2CAAA,iDAAA,4GAAA,0EAAA,MAAA,wEAAA,3dAACc,qDAAMV,gKAAsBQ,kDAAKC;WAN/D,RASsBlB,+DACJC;AAVlB,AAeEc;;;AA1BP,CAAA,sFAAA,tFAAMF,iGA4BFH;AA5BJ,AA6BG,OAACU,oFAAa,AAAA,sFAAQV,OAAO,AAAA,qFAAQA;;;AA7BxC,CAAA,gFAAA,hFAAMG;;AAAN,AAgCA,sDAAA,tDAAMQ,oHAAYnB;AAAlB,AACE,AAACK,8CACC,AAACC,4CAAI,WAAKc;AAAL,AACE,gHAAA,zGAACC,gHAAe,AAACC,mDAAQF;GAC9B,AAAQpB;;AACZ,OAACK,8CACC,AAACC,4CAAI,WAAKc;AAAL,AACE,gHAAA,zGAACC,gHAAe,AAACC,mDAAQF;GAC9B,AAAQpB;;AAGd","names":["taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","var_args","G__59034","bh-ui.atom.diagram.diagram.dagre-support/dagre-graph","js/Error","nodes","edges","dagreGraph","js/shadow.js.shim.module$graphlib","nodeWidth","nodeHeight","cljs.core/clj->js","cljs.core.doall","cljs.core.map","element","graph","bh_ui.atom.diagram.diagram.dagre_support.dagre_graph","G__59036","bh-ui.atom.diagram.diagram.dagre-support/build-layout","js/shadow.js.shim.module$dagre","ret","dagreNode","x","y","cljs.core.assoc","bh_ui.atom.diagram.diagram.dagre_support.build_layout","bh-ui.atom.diagram.diagram.dagre-support/dump-dagre","n","cljs.core.println","cljs.core.js__GT_clj"],"sourcesContent":["(ns bh-ui.atom.diagram.diagram.dagre-support\n  (:require [taoensso.timbre :as log]\n            [\"dagre\" :as dagre]\n            [\"graphlib\" :as graphlib]))\n\n\n(log/info \"bh-ui.atom.diagram.diagram.dagre-support\")\n\n\n(defn dagre-graph\n  \"copy the nodes and edges from Look to dagre, so we can use dagre layout function to put them\n  onto the display without drawing over each other\n  \"\n  ([nodes edges]\n   (let [dagreGraph (new (.-Graph graphlib))\n         nodeWidth  172\n         nodeHeight 36]\n\n     (.setDefaultEdgeLabel dagreGraph (clj->js {}))\n     (.setGraph dagreGraph (clj->js {:rankdir \"tb\"}))\n\n     (doall\n       (map (fn [element]\n              (.setNode dagreGraph (:id element)\n                (clj->js {:width nodeWidth :height nodeHeight})))\n         nodes))\n\n     (doall\n       (map (fn [element]\n              (.setEdge dagreGraph (:source element) (:target element)))\n         edges))\n\n     dagreGraph))\n\n  ([graph]\n   (dagre-graph (:nodes graph) (:edges graph))))\n\n\n(defn build-layout\n  \"use dagre (see https://reactflow.dev/examples/layouting/) to perform an auto-layout of the nodes,\n  which are then connected by the edges.\n  \"\n  ([nodes edges]\n   (let [dagreGraph (dagre-graph nodes edges)\n         nodeWidth  172\n         nodeHeight 36]\n\n     (.layout dagre dagreGraph)\n\n     (let [ret {:nodes (doall\n                         (map (fn [element]\n                                (let [dagreNode (.node dagreGraph (clj->js (:id element)))\n                                      x         (- (.-x dagreNode) (/ nodeWidth 2))\n                                      y         (- (.-y dagreNode) (/ nodeHeight 2))]\n                                  ;(log/info \"pos\" (:id element) x y \"//\" (.-x dagreNode) (.-y dagreNode))\n                                  (assoc element :position {:x x :y y}\n                                                 :targetPosition \"top\"\n                                                 :sourcePosition \"bottom\")))\n                           nodes))\n                :edges edges}]\n                ;(doall\n                ;  (map (fn [element] element)\n                ;    edges))}]\n       ;(log/info \"build-layout\" ret)\n       ret)))\n\n  ([graph]\n   (build-layout (:nodes graph) (:edges graph))))\n\n\n(defn dump-dagre [dagreGraph]\n  (doall\n    (map (fn [n]\n           (println \"node\" (js->clj n)))\n      (.nodes dagreGraph)))\n  (doall\n    (map (fn [n]\n           (println \"edge\" (js->clj n)))\n      (.edges dagreGraph))))\n\n\n(comment\n  (do\n    (def graph {:nodes [{:id       \":ui/targets\"\n                         :type     \":ui/component\"\n                         :data     {:label   \":ui/targets\"\n                                    :inputs  []\n                                    :outputs []}\n                         :position {:x 0 :y 0}}\n                        {:id       \":topic/target-data\"\n                         :type     \":source/remote\"\n                         :data     {:label   \":topic/target-data\"\n                                    :inputs  []\n                                    :outputs []}\n                         :position {:x 0 :y 100}}\n                        {:id       \":topic/selected-targets\"\n                         :type     \":source/local\"\n                         :data     {:label   \":topic/selected-targets\"\n                                    :inputs  []\n                                    :outputs []}\n                         :position {:x 0 :y 200}}]\n\n                :edges [{:id     \"target-data->targets\"\n                         :source \":topic/target-data\" :target \":ui/targets\"\n                         :style  {:strokeWidth 2 :stroke :orange}}\n                        {:id     \"targets->selected-targets\"\n                         :source \":ui/targets\" :target \":topic/selected-targets\"\n                         :style  {:strokeWidth 2 :stroke :blue}}]}))\n\n\n  (dagre-graph graph)\n  (build-layout graph)\n\n\n\n  ())"]}