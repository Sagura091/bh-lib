{"version":3,"sources":["bh_ui/molecule/composite/util/node_config_ui.cljs"],"mappings":"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","names":["taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","js/bh-ui","js/bh-ui.molecule","js/bh-ui.molecule.composite","js/bh-ui.molecule.composite.util","js/bh-ui.molecule.composite.util.node-config-ui","js/bh-ui.molecule.composite.util.node-config-ui.make-config-item","method-table__4747__auto__","cljs.core.atom","prefer-table__4748__auto__","method-cache__4749__auto__","cached-hierarchy__4750__auto__","hierarchy__4751__auto__","cljs.core.get","fexpr__59059","cljs.core/MultiFn","cljs.core.symbol","bh-ui.molecule.composite.util.node-config-ui/make-config-item","p__59060","map__59061","cljs.core/--destructure-map","type","p__59062","map__59064","name","p__59066","map__59067","p__59069","map__59071","p__59072","map__59073","js/bh-ui.molecule.composite.util.node-config-ui.make-config-panel*","fexpr__59076","bh-ui.molecule.composite.util.node-config-ui/make-config-panel*","node","p__59079","map__59080","id","p__59081","map__59082","p__59087","map__59088","p__59093","map__59094","p__59095","map__59098","bh-ui.molecule.composite.util.node-config-ui/make-config-panel","node-type","kw-node-type"],"sourcesContent":["(ns bh-ui.molecule.composite.util.node-config-ui\n  (:require [taoensso.timbre :as log]\n            [bh-ui.utils.helpers :as h]\n            [bh-ui.utils.locals :as l]))\n\n\n(log/info \"bh-ui.molecule.composite.util.node-config-ui\")\n\n\n;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;\n;\n; build the correct data-entry control for each type\n;\n;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;\n(defmulti make-config-item (fn [{:keys [type]}] type))\n\n\n(defmethod make-config-item :string [{:keys [type name]}]\n  [:div (str \":string - \" type \" - \" name)])\n\n\n(defmethod make-config-item :id [{:keys [type name]}]\n  [:div (str \":id - \" type \" - \" name)])\n\n\n(defmethod make-config-item :port [{:keys [type name]}]\n  [:div (str \":port - \" type \" - \" name)])\n\n\n(defmethod make-config-item :choices [{:keys [type name]}]\n  [:div (str \":choices - \" type \" - \" name)])\n\n\n;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;\n;\n; build the complete panel for each type\n;\n;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;\n(defmulti make-config-panel* (fn [type node] type))\n\n\n(defmethod make-config-panel* :ui/component [type {:strs [id] :as node}]\n  ;(log/info \"make-config-panel* :ui/component\" type id)\n  [:div.bh-ui (str type \" - \" id)])\n\n\n(defmethod make-config-panel* :source/remote [type {:strs [id] :as node}]\n  ;(log/info \"make-config-panel* :source/remote\" type id)\n  [:div.source-remote (str type \" - \" id)])\n\n\n(defmethod make-config-panel* :source/local [type {:strs [id] :as node}]\n  ;(log/info \"make-config-panel* :source/local\" type id)\n  [:div.source-local (str type \" - \" id)])\n\n\n(defmethod make-config-panel* :source/fn [type {:strs [id] :as node}]\n  ;(log/info \"make-config-panel* :source/fn\" type id)\n  [:div.source-fn (str type \" - \" id)])\n\n\n(defmethod make-config-panel* :default [type {:strs [id] :as node}]\n  ;(log/info \"make-config-panel* :default\" type \"//\" id \"//\" node)\n  [:div])\n\n\n(defn make-config-panel [node]\n  (let [node-type (get node \"type\")\n        kw-node-type (get {\":ui/component\" :ui/component\n                           \":source/remote\" :source/remote\n                           \":source/local\" :source/local\n                           \":source/fn\" :source/fn}\n                       node-type)]\n\n    ;(log/info \"make-config-panel\" node \"//\" node-type \"//\" kw-node-type)\n\n    (make-config-panel* kw-node-type node)))\n\n\n\n(comment\n  (do\n    (def component-id :widget-grid-demo.grid-widget)\n    (def item :topic/target-data)\n    (def components   @(l/subscribe-local component-id [:blackboard :defs :source :components]))\n    (def details      ((h/string->keyword item) components))\n    (def detail-types (:type details)))\n\n\n  (map (fn [{:keys [type name]}] {:t type :n name}) details)\n\n  (make-config-panel details)\n\n  (defmulti dummy (fn [type] (keyword (get type \"type\"))))\n  (defmethod dummy :one [_] 1)\n  (defmethod dummy :two [_] 2)\n\n  (dummy {\"type\" \":one\"})\n\n\n  (get {\"type\" \":one\"} \"type\")\n\n  (let [{:strs [type]} {\"type\" \":one\"}]\n    (keyword type))\n  ())\n\n\n\n\n"]}