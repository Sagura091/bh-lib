{"version":3,"sources":["bh_ui/utils/color.cljs"],"mappings":"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","names":["bh-ui.utils.color/default-stroke-fill-colors","bh-ui.utils.color/get-color","idx","i","cljs.core/mod","cljs.core/count","cljs.core.get","bh-ui.utils.color/hex->rgba","hex-color","vec__50876","cljs.core.nth","stripped","cljs.core.apply","cljs.core/str","cljs.core/rest","r","g","b","cljs.core/re-seq","js/parseInt","p__50879","map__50880","cljs.core/--destructure-map","bh-ui.utils.color/rgba-normal","a","p__50881","map__50882","bh-ui.utils.color/normal-map->rgba","var_args","G__50884","bh-ui.utils.color/normal->rgba","js/Error","p__50885","vec__50886","js/Math","p__50889","map__50890","bh-ui.utils.color/rgba-map->rgba-vector","rgba-map","p__50891","map__50892","bh-ui.utils.color/rgba-map->js-function","G__50894","bh-ui.utils.color/rgba->hex","p__50895","map__50896","rgba-color","convertFn","x","s","js/Number","cljs.core._EQ_","_","p__50901","map__50902","bh-ui.utils.color/hash->rgba","hash-color","bh-ui.utils.color/match-colors-hex","rgba","bh-ui.utils.color/match-colors-rgba","hex","bh_ui.utils.color.rgba__GT_hex","p__50904","map__50905","bh-ui.utils.color/relative-luminance","normalFn","linearizeFn","bh-ui.utils.color/best-text-color","p__50906","map__50907","bh-ui.utils.color/best-text-color-alpha"],"sourcesContent":["(ns bh-ui.utils.color)\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;\n; Color Support\n;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n\n; see colors at https://htmlcolors.com\n(def default-stroke-fill-colors [\"#8884d8\" \"#ffc107\" \"#82ca9d\"\n                                 \"#ff00ff\" \"#00e5ff\" \"#4db6ac\"\n                                 \"#83a6ed\" \"#8dd1e1\" \"#a4de6c\"\n                                 \"#ffff00\" \"#ff0000\" \"#00ff00\"\n                                 \"#0000ff\" \"#009999\" \"#d7e62b\"])\n\n\n(defn get-color [idx]\n  (let [i (mod idx (count default-stroke-fill-colors))]\n    (get default-stroke-fill-colors i)))\n\n\n(defn hex->rgba\n  \"convert a color in hexadecimal (string) into a hash-map of RGBA\n\n  ---\n\n  - hex-color : (string) hex encoded color, such as \\\"#ff0000\\\" (red) or \\\"#00CED1\\\" (dark turquoise)\n\n  returns hash-map containing:\n\n  | key  | type    | range   | description    |\n  |:-----|:-------:|:-------:|:---------------|\n  | `:r` | integer | 0-255   | red value      |\n  | `:g` | integer | 0-255   | green value    |\n  | `:b` | integer | 0-255   | blue value     |\n  | `:a` | float   | 1.0     | alpha channel value, always returned as 1.0 |\n  \"\n  [hex-color]\n\n  (let [stripped (apply str (rest hex-color))\n        [r g b] (re-seq #\"\\w\\w\" stripped)]\n    {:r (js/parseInt r 16)\n     :g (js/parseInt g 16)\n     :b (js/parseInt b 16)\n     :a 1.0}))\n\n\n(defn rgba-normal\n  \"convert a color hash-map of RGBA to a hash-map where the values are\n  in the range of 0.0 - 1.0\n\n  ---\n\n  - hex-color : (string) hex encoded color, such as \\\"#ff0000\\\" (red) or \\\"#00CED1\\\" (dark turquoise)\n\n  returns hash-map containing:\n\n  | key  | type    | range   | description    |\n  |:-----|:-------:|:-------:|:---------------|\n  | `:r` | float   | 0.0-1.0 | red value      |\n  | `:g` | float   | 0.0-1.0 | green value    |\n  | `:b` | float   | 0.0-1.0 | blue value     |\n  | `:a` | float   | 1.0     | alpha channel value, always returned as 1.0 |\n  \"\n  [{:keys [r g b a]}]\n\n  {:r (/ r 255) :g (/ g 255) :b (/ b 255) :a a})\n\n\n(defn normal-map->rgba\n  \"convert a color hash-map of RGBA (0-1.0) to a hash-map where the values are\n  in the range of 0 255\n\n  ---\n\n  - color : (string) float encoded color\n\n  returns hash-map containing:\n\n  | key  | type    | range   | description    |\n  |:-----|:-------:|:-------:|:---------------|\n  | `:r` | float   | 0.0-1.0 | red value      |\n  | `:g` | float   | 0.0-1.0 | green value    |\n  | `:b` | float   | 0.0-1.0 | blue value     |\n  | `:a` | float   | 1.0     | alpha channel value, always returned as 1.0 |\n  \"\n  [{:keys [r g b a]}]\n\n  {:r (* r 255) :g (* g 255) :b (* b 255) :a a})\n\n\n(defn normal->rgba\n  ([r g b a]\n   {:r (.round js/Math (* r 255)) :g (.round js/Math (* g 255))\n    :b (.round js/Math (* b 255)) :a (.round js/Math (* a 255))})\n\n  ([[r g b a]]\n   {:r (.round js/Math (* r 255)) :g (.round js/Math (* g 255))\n    :b (.round js/Math (* b 255)) :a (.round js/Math (* a 255))}))\n\n\n(defn rgba-map->rgba-vector [{:keys [r g b a] :as rgba-map}]\n  [r g b a])\n\n\n(defn rgba-map->js-function [{:keys [r g b a] :as rgba-map}]\n  (str \"rgba(\" r \", \" g \", \" b \", \" a \")\"))\n\n\n(defn rgba->hex\n  \"convert a color hash-map of RGBA into a hexadecimal (string)\n\n  ---\n\n  - rgba-color : (hash-map) containing:\n\n  | key  | type    | range   | description    |\n  |:-----|:-------:|:-------:|:---------------|\n  | `:r` | integer | 0-255   | red value      |\n  | `:g` | integer | 0-255   | green value    |\n  | `:b` | integer | 0-255   | blue value     |\n  | `:a` | float   | 1.0     | alpha channel value, always returned as 1.0 |\n\n  returns string containing the encoded color, such as \\\"#ff0000\\\" (red) or \\\"#00CED1\\\" (dark turquoise)\n  \"\n  ([{:keys [r g b] :as rgba-color}]\n\n   (let [convertFn (fn [x]\n                     (let [s (.toString (js/Number. x) 16)]\n                       (if (= (count s) 1)\n                         (str \"0\" s)\n                         s)))]\n     (str \"#\" (convertFn r) (convertFn g) (convertFn b))))\n\n  ([r g b _]\n   (let [convertFn (fn [x]\n                     (let [s (.toString (js/Number. x) 16)]\n                       (if (= (count s) 1)\n                         (str \"0\" s)\n                         s)))]\n     (str \"#\" (convertFn r) (convertFn g) (convertFn b)))))\n\n\n(defn hash->rgba\n  \"converts a color represented as a ClojureScript hash-map into a format compatible with\n  Javascript, HTML, and CSS.\n\n  ---\n\n  - hash-color : (hash-map) containing:\n\n  | key  | type    | range   | description    |\n  |:-----|:-------:|:-------:|:---------------|\n  | `:r` | integer | 0-255   | red value      |\n  | `:g` | integer | 0-255   | green value    |\n  | `:b` | integer | 0-255   | blue value     |\n  | `:a` | float   | 0-1.0   | alpha channel  |\n\n  returns a Javascript command (string) that various HMTL `:style`s will treat as an rgba color\n  \"\n  [{:keys [r g b a] :as hash-color}]\n\n  (str \"rgba(\" r \",\" g \",\" b \",\" a \")\"))\n\n\n(defn match-colors-hex [hex-color]\n  (let [rgba (hex->rgba hex-color)]\n    [:custom\n     (rgba-map->js-function rgba)\n     (rgba-map->rgba-vector rgba)\n     (-> hex-color hex->rgba rgba-normal rgba-map->rgba-vector)\n     hex-color]))\n\n\n(defn match-colors-rgba [rgba-color]\n  (let [hex (rgba->hex rgba-color)]\n    [:custom\n     (rgba-map->js-function rgba-color)\n     (rgba-map->rgba-vector rgba-color)\n     (rgba-map->rgba-vector (rgba-normal rgba-color))\n     (rgba->hex rgba-color)]))\n\n\n(defn relative-luminance\n  \"computes _relative luminance_ per the [W3C](https://www.w3.org/TR/WCAG20/#relativeluminancedef)\n\n  typically, this value is uses to determine the proper color (`:white` or `:black`) to use with a\n  colored background.\n\n  ---\n  - color : (hash-map) containing:\n\n  | key  | type    | range   | description    |\n  |:-----|:-------:|:-------:|:---------------|\n  | `:r` | integer | 0-255   | red value      |\n  | `:g` | integer | 0-255   | green value    |\n  | `:b` | integer | 0-255   | blue value     |\n\n  returns (long) - the relative luminance of the color\"\n\n  [{:keys [r g b]}]\n\n  (let [normalFn    (fn [x] (/ x 255))\n        linearizeFn (fn [x] (if (< x 0.03928)\n                              (/ x 12.92)\n                              (.pow js/Math (/ (+ x 0.055) 1.055) 2.4)))]\n    (+ (* 0.2126 (linearizeFn (normalFn r)))\n      (* 0.7152 (linearizeFn (normalFn g)))\n      (* 0.0722 (linearizeFn (normalFn b))))))\n\n\n(defn best-text-color\n  \"return `\\\"white\\\"` or `\\\"black\\\"` as the best color for text to be placed 'over'\n  the given color.\n\n  ---\n\n  - rgba-color : (hash-map) containing:\n\n  | key  | type    | range   | description    |\n  |:-----|:-------:|:-------:|:---------------|\n  | `:r` | integer | 0-255   | red value      |\n  | `:g` | integer | 0-255   | green value    |\n  | `:b` | integer | 0-255   | blue value     |\n  | `:a` | float   | 0-1.0   | alpha channel  |\n\n  return `\\\"white\\\"` or `\\\"black\\\"`\n  \"\n  [rgba-color]\n\n  (if (<= (relative-luminance rgba-color) 0.1833)\n    \"white\"\n    \"black\"))\n\n\n(defn best-text-color-alpha\n  \"return `\\\"white\\\"` or `\\\"black\\\"` as the best color for text to be placed 'over'\n  the given color, including it's [alpha channel](https://www.techopedia.com/definition/1945/alpha-channel).\n\n  ---\n\n  - rgba-color : (hash-map) containing:\n\n  | key  | type    | range   | description    |\n  |:-----|:-------:|:-------:|:---------------|\n  | `:r` | integer | 0-255   | red value      |\n  | `:g` | integer | 0-255   | green value    |\n  | `:b` | integer | 0-255   | blue value     |\n  | `:a` | float   | 0-1.0   | alpha channel  |\n\n  return `\\\"white\\\"` or `\\\"black\\\"`\n  \"\n  [{a :a :as rgba-color}]\n\n  (if (<= (relative-luminance rgba-color) 0.1833)\n    (if (<= 0.25 a) \"white\" \"black\")\n    \"black\"))\n\n\n\n(comment\n  (-> \"#ff0000\" hex->rgba rgba-normal rgba-map->rgba-vector)\n  (-> \"#ff00ff\" hex->rgba rgba-normal rgba-map->rgba-vector)\n\n  (match-colors-hex \"#000000\")\n  (match-colors-hex \"#ff0000\")\n  (match-colors-hex \"#ff00ff\")\n\n  (match-colors-rgba {:r 255 :g 0 :b 0 :a 1.0})\n\n\n\n  (-> [1 0 0 1]\n    normal->rgba\n    rgba->hex)\n\n\n  (.round js/Math (* 0.5 255))\n\n  (def outline-color [1 0.5 0.78 1.0])\n  (normal->rgba outline-color)\n  (rgba->hex {:r 255, :g 127.5, :b 198.9, :a 1})\n  (-> outline-color c/normal->rgba c/rgba->hex)\n  ())\n\n\n"]}