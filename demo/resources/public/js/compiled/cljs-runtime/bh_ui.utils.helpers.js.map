{"version":3,"sources":["bh_ui/utils/helpers.cljs"],"mappings":"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","names":["bh-ui.utils.helpers/config-tab-panel","component-id","cljs.core.keyword","bh-ui.utils.helpers/component-id","cljs-uuid-utils.core/make-random-uuid","cljs-uuid-utils.core/uuid-string","p__50699","vec__50700","cljs.core.nth","bh-ui.utils.helpers/chart-config","config","data","panel","tab","data-panel","config-panel","data-or-config","bh-ui.atom.bhui.navbar/navbar","re-com.core/scroller","js/goog.DEBUG","woolybear.packs.tab-panel/tab-panel","woolybear.packs.tab-panel/sub-panel","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","bh-ui.utils.helpers/path->string","seq50706","self__4852__auto__","cljs.core/seq","path","cljs.core/flatten","cljs.core.remove","cljs.core/nil?","cljs.core.map","cljs.core/str","p1__50703#","clojure.string/replace","p1__50704#","p1__50705#","clojure.string.join","bh-ui.utils.helpers/path->keyword","seq50707","bh_ui.utils.helpers.path__GT_string","bh-ui.utils.helpers/string->keyword","s","bh-ui.utils.helpers/resolve-subscription","subs","opts","vec__50708","seq__50709","first__50710","cljs.core/first","cljs.core/next","target","_","cljs.core._EQ_","re_frame.core.subscribe","cljs.core.reduce","cljs.core/conj","bh_ui.utils.helpers.path__GT_keyword","bh-ui.utils.helpers/resolve-value","seq50711","G__50712","self__4851__auto__","value","ret","cljs.core/Keyword","cljs.core/coll?","cljs.core/empty?","cljs.core/every?","or__4253__auto__","cljs.core/keyword?","cljs.core/string?","reagent.ratom/RAtom","reagent.ratom/Reaction","cljs.core/Atom","reagent.core.atom","bh-ui.utils.helpers/handle-change","new-value","re-frame.core/dispatch","cljs.core.conj","cljs.core/reset!","bh-ui.utils.helpers/handle-change-path","update-event","cljs.core.swap_BANG_","cljs.core/assoc-in"],"sourcesContent":["(ns bh-ui.utils.helpers\n  (:require [bh-ui.atom.bhui.navbar :as navbar]\n            [cljs-uuid-utils.core :as uuid]\n            [day8.re-frame.tracing :refer-macros [fn-traced]]\n            [re-com.core :as rc]\n            [re-frame.core :as re-frame]\n            [reagent.core :as r]\n            [taoensso.timbre :as log]\n            [woolybear.packs.tab-panel :as tab-panel]))\n\n\n(defn config-tab-panel [component-id]\n  {:tab-panel {:value     (keyword component-id \"config\")\n               :data-path [:containers (keyword component-id) :tab-panel]}})\n\n\n(defn component-id []\n  (-> (uuid/make-random-uuid)\n    uuid/uuid-string))\n\n\n(defn chart-config [[config data panel tab] data-panel config-panel]\n  ;(log/info \"chart-config\" config data panel tab)\n  (let [data-or-config [[config \"config\"]\n                        [data \"data\"]]]\n    [:div.chart-config {:style {:width \"100%\" :height \"100%\"}}\n     [navbar/navbar data-or-config [panel]]\n     [rc/scroller :src (rc/at)\n      :v-scroll :auto\n      :height \"95%\"\n      :child [tab-panel/tab-panel {:extra-classes             :is-fluid\n                                   :subscribe-to-selected-tab [tab]}\n\n              [tab-panel/sub-panel {:panel-id config}\n               config-panel]\n\n              [tab-panel/sub-panel {:panel-id data}\n               data-panel]]]]))\n\n\n(defn path->string [& path]\n  (->> path\n    flatten\n    (remove nil?)\n    (map str)\n    (map #(clojure.string/replace % #\":\" \"\"))\n    (map #(clojure.string/replace % #\"/\" \".\"))\n    (map #(clojure.string/replace % #\" \" \"-\"))\n    (clojure.string/join \".\")))\n\n\n(defn path->keyword [& path]\n  (->> path\n    path->string\n    keyword))\n\n\n(defn string->keyword [s]\n  (-> s\n    str\n    (clojure.string/replace #\":\" \"\")\n    keyword))\n\n\n(defn- resolve-subscription\n  \"resolve a subscription.\n\n  there are 2 types if subscriptions: REMOTE and LOCAL\n\n  REMOTE subscriptions are designed to reach across the network and query data from the Server, while\n  LOCAL subscriptions are designed to reach into the Re-frame 'APP-DB' at a certain path\n  \"\n  [subs opts]\n  (let [[target & _] subs]\n    ;(log/info \"resolve-subscription\" subs \"//\" target)\n    (if (= target :bhui.subs/source)\n      (re-frame/subscribe (reduce conj subs opts))\n      (re-frame/subscribe (reduce conj [(path->keyword subs)] opts)))))\n\n\n(defn resolve-value [value & opts]\n  ;(log/info \"resolve-value\" value \"//\" opts\n  ;  \"// (path-kw)\" (reduce conj [(path->keyword value)] opts)\n  ;  \"// (path-sub)\" (reduce conj [(path->keyword value)] opts))\n\n  (let [ret (cond\n              (keyword? value) (re-frame/subscribe (reduce conj [(path->keyword value)] opts))\n              (and (coll? value)\n                (not (empty? value))\n                (every? (or keyword? string?) value)) (resolve-subscription value opts)\n              (instance? reagent.ratom.RAtom value) value\n              (instance? reagent.ratom.Reaction value) value\n              (instance? Atom value) value\n              :else (r/atom value))]\n    ;(log/info \"resolve-value\" value \"//\" opts \"//\" ret \"//\" (str @ret))\n    ret))\n\n\n\n(defn handle-change [value new-value]\n  ;(log/info \"handle-change\" value \"//\" new-value)\n  (cond\n    (or (coll? value)\n      (keyword? value)\n      (string? value)) (re-frame/dispatch (conj value new-value))\n    (instance? reagent.ratom.RAtom value) (reset! value new-value)\n    (instance? Atom value) (reset! value new-value)\n    :else ()))\n\n\n(defn handle-change-path [value path new-value]\n  ;(log/info \"handle-change-path\" value \"//\" path \"//\" new-value)\n\n  (cond\n    (or (coll? value)\n      (keyword? value)\n      (string? value)) (let [update-event (conj [(path->keyword value path)] new-value)]\n                         ;(log/info \"handle-change-path (update event)\" update-event)\n                         (re-frame/dispatch update-event))\n    (instance? reagent.ratom.RAtom value) (swap! value assoc-in path new-value)\n    (instance? Atom value) (swap! value assoc-in path new-value)\n    :else ()))\n\n\n\n(comment\n  (do\n    (def container-id \"simple-multi-chart\")\n    (def component-id (path->keyword container-id \"widget\"))\n    (def data [component-id :blackboard :topic.data])\n    (def path [:data])\n    (def old-data (atom {:metadata {:type :tabular,\n                                    :id :name,\n                                    :title \"Tabular Data with Metadata\",\n                                    :fields {:name :string, :uv :number, :pv :number, :tv :number, :amt :number}},\n                         :data [{:name \"Page A\", :uv 4000, :pv 2400, :tv 1500, :amt 2400}\n                                {:name \"Page B\", :uv 3000, :pv 1398, :tv 1500, :amt 2210}\n                                {:name \"Page C\", :uv 2000, :pv 9800, :tv 1500, :amt 2290}\n                                {:name \"Page D\", :uv 2780, :pv 3908, :tv 1500, :amt 2000}\n                                {:name \"Page E\", :uv 1890, :pv 4800, :tv 1500, :amt 2181}\n                                {:name \"Page F\", :uv 2390, :pv 3800, :tv 1500, :amt 2500}\n                                {:name \"Page G\", :uv 3490, :pv 4300, :tv 1500, :amt 2100}]}))\n    (def value data)\n    (def new-value (assoc-in (:data @old-data) [0 :uv] 10000)))\n\n\n\n  (cond\n    (or (coll? value)\n      (keyword? value)\n      (string? value)) (let [update-event (conj [(path->keyword value path)] new-value)]\n                         ;(log/info \"handle-change-path (update event)\" update-event)\n                         (re-frame/dispatch update-event))\n    (instance? reagent.ratom.RAtom value) (swap! value assoc-in path new-value)\n    (instance? Atom value) (swap! value assoc-in path new-value)\n    :else ())\n\n  (handle-change-path data [:data]\n    (assoc-in (:data @old-data) [0 :uv] 10000))\n\n\n\n  ())\n\n\n\n(comment\n  (def path [:uv :fill])\n  (def value [:dummy])\n\n  (path->keyword value path)\n  (conj [(path->keyword value path)] \"#000000\")\n\n  (->>\n    (re-frame/subscribe [:coverage-plan-demo.component.blackboard.topic.current-time])\n    deref\n    str)\n\n  ())\n\n\n\n(comment\n  (path->string \"one\" \"two\" \"three/dummy\")\n  (path->keyword \"one\" \"two\" \"three/dummy\")\n\n  (path->keyword :area-chart-demo.area-chart :grid nil)\n  (path->string :area-chart-demo.area-chart :grid nil)\n\n\n  (path->keyword :topic/layers)\n  (path->keyword [:topic/layers])\n\n  (apply conj [:containers]\n    (map path->keyword [:blackboard :topic/layers]))\n\n  ())\n\n\n\n"]}