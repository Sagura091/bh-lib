"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkDemo"] = self["webpackChunkDemo"] || []).push([["node_modules_astrouxds_astro-web-components_dist_esm_rux-tag_entry_js"],{

/***/ "./node_modules/@astrouxds/astro-web-components/dist/esm/rux-tag.entry.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@astrouxds/astro-web-components/dist/esm/rux-tag.entry.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   rux_tag: () => (/* binding */ RuxTag)\n/* harmony export */ });\n/* harmony import */ var _index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-b64764b4.js */ \"./node_modules/@astrouxds/astro-web-components/dist/esm/index-b64764b4.js\");\n/* harmony import */ var _utils_73490106_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils-73490106.js */ \"./node_modules/@astrouxds/astro-web-components/dist/esm/utils-73490106.js\");\n\n\n\nconst ruxTagCss = \":host{display:flex;justify-content:center;align-items:center;border-radius:var(--radius-base);font-size:var(--font-body-2-bold-font-size);font-weight:var(--font-body-2-bold-font-weight);line-height:var(--font-body-2-bold-line-height);font-family:var(--font-body-2-bold-font-family);letter-spacing:var(--font-body-2-bold-letter-spacing);padding:0.25rem 0.625rem;text-align:center;color:var(--color-palette-neutral-000)}:host(.is-undefined){height:1.5rem;width:3.75rem;border:1px solid var(--status-symbol-color-fill-off);background:var(--color-palette-grey-800);box-shadow:var(--tag-shadow-inner-off)}:host([status=pass]){height:1.5rem;width:3.75rem;border:1px solid var(--status-symbol-color-fill-normal);background:var(--color-palette-green-900);box-shadow:var(--tag-shadow-inner-normal)}:host([status=fail]){height:1.5rem;width:3.75rem;border:1px solid var(--status-symbol-color-fill-critical);background:var(--color-palette-red-900);box-shadow:var(--tag-shadow-inner-critical)}:host([status=unknown]){height:1.5rem;width:3.75rem;border:1px solid var(--status-symbol-color-fill-off);background:var(--color-palette-grey-800);box-shadow:var(--tag-shadow-inner-off)}\";\n\nconst statusMap = {\n  unknown: 'UNK',\n  pass: 'PASS',\n  fail: 'FAIL',\n};\nconst RuxTag = class {\n  constructor(hostRef) {\n    (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);\n    /**\n     *  Used to display a status of pass, fail, or unknown. If no status is provided or the provided status is not an accepted status type, the default is unknown.\n     */\n    this.status = 'unknown';\n  }\n  _getValidStatus() {\n    if (this.status) {\n      //if it is a valid status, return it\n      if (statusMap[this.status]) {\n        return statusMap[this.status];\n      }\n      //if it's not, return the default status\n      else {\n        return statusMap['unknown'];\n      }\n    }\n  }\n  render() {\n    return ((0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: {\n        'is-undefined': statusMap[this.status] === undefined,\n      } }, (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", { part: \"container\" }, (0,_utils_73490106_js__WEBPACK_IMPORTED_MODULE_1__.h)(this.el) ? (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.h)(\"slot\", null) : this._getValidStatus())));\n  }\n  get el() { return (0,_index_b64764b4_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }\n};\nRuxTag.style = ruxTagCss;\n\n\n\n\n//# sourceURL=webpack://Demo/./node_modules/@astrouxds/astro-web-components/dist/esm/rux-tag.entry.js?");

/***/ }),

/***/ "./node_modules/@astrouxds/astro-web-components/dist/esm/utils-73490106.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@astrouxds/astro-web-components/dist/esm/utils-73490106.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ renderHiddenSelect),\n/* harmony export */   b: () => (/* binding */ hasShadowDom),\n/* harmony export */   h: () => (/* binding */ hasSlot),\n/* harmony export */   r: () => (/* binding */ renderHiddenInput)\n/* harmony export */ });\nconst hasShadowDom = (el) => {\n  return !!el.shadowRoot && !!el.attachShadow;\n};\nfunction hasSlot(el, name) {\n  // Look for a named slot\n  if (name) {\n    return el.querySelector(`[slot=\"${name}\"]`) !== null;\n  }\n  // Look for a default slot\n  return [...el.childNodes].some((node) => {\n    var _a;\n    //If node is text and not an empty string return true\n    if (node.nodeType === node.TEXT_NODE &&\n      ((_a = node === null || node === void 0 ? void 0 : node.textContent) === null || _a === void 0 ? void 0 : _a.trim()) !== '') {\n      return true;\n    }\n    //If node is an element with a slot attribute return true\n    if (node.nodeType === node.ELEMENT_NODE) {\n      const el = node;\n      if (!el.hasAttribute('slot') &&\n        /*\n         * This condition is specifically for checkbox because\n         * the hidden input becomes slotted content\n         */\n        el.getAttribute('type') !== 'hidden') {\n        return true;\n      }\n    }\n    return false;\n  });\n}\n/**\n* This method is used to add a hidden input to a host element that contains\n* a Shadow DOM. It does not add the input inside of the Shadow root which\n* allows it to be picked up inside of forms. It should contain the same\n* values as the host element.\n* https://github.com/ionic-team/ionic-framework/blob/ae96563fb3c4612cb8585292b389ee746f5759f7/core/src/utils/helpers.ts#L198\n\n*\n* @param always Add a hidden input even if the container does not use Shadow\n* @param container The element where the input will be added\n* @param name The name of the input\n* @param value The value of the input\n* @param disabled If true, the input is disabled\n* @param checked Optional. If true, the input is checked\n*/\nconst renderHiddenInput = (always, container, name, value, disabled, checked) => {\n  let input = container.querySelector('input.aux-input');\n  if (always || hasShadowDom(container)) {\n    if (checked || checked == undefined) {\n      if (!input) {\n        input = container.ownerDocument.createElement('input');\n        input.type = 'hidden';\n        input.classList.add('aux-input');\n        container.appendChild(input);\n      }\n      input.disabled = disabled;\n      input.name = name;\n      input.value = value || '';\n    }\n    else {\n      if (input) {\n        input.remove();\n      }\n    }\n  }\n};\n/**\n * Renders multiple hidden inputs from an array of values\n * Used in multiselect\n * @param always\n * @param container\n * @param name\n * @param value\n * @param disabled\n */\nconst renderHiddenSelect = (always, container, name, value, disabled) => {\n  // Clear any existing hidden options. May be more performant to edit their values instead though.\n  let inputs = container.querySelectorAll('input.aux-select');\n  if (inputs) {\n    for (const elem of inputs) {\n      elem.remove();\n    }\n  }\n  if (always || hasShadowDom(container)) {\n    if (Array.isArray(value)) {\n      for (const el in value) {\n        let input = container.ownerDocument.createElement('input');\n        input.type = 'hidden';\n        input.classList.add('aux-select');\n        input.classList.add(`aux-select-${el}`);\n        input.disabled = disabled;\n        input.name = name;\n        if (value[el]) {\n          input.value = value[el];\n        }\n        container.appendChild(input);\n      }\n    }\n    else {\n      let input = container.ownerDocument.createElement('input');\n      input.type = 'hidden';\n      input.classList.add('aux-select');\n      input.classList.add(`aux-select-0`);\n      input.disabled = disabled;\n      input.name = name;\n      if (value) {\n        input.value = value;\n      }\n      container.appendChild(input);\n    }\n  }\n};\n\n\n\n\n//# sourceURL=webpack://Demo/./node_modules/@astrouxds/astro-web-components/dist/esm/utils-73490106.js?");

/***/ })

}]);